<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Eddy&#39;s Boke</title>
		<link>https://Eddy-622.github.io/posts/</link>
		<description>Recent content in Posts on Eddy&#39;s Boke</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-CN</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 04 Nov 2020 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://Eddy-622.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>函数分类，形参实参，结构，模块</title>
			<link>https://Eddy-622.github.io/posts/%E5%87%BD%E6%95%B0%E5%88%86%E7%B1%BB%E5%BD%A2%E5%8F%82%E5%AE%9E%E5%8F%82%E7%BB%93%E6%9E%84%E6%A8%A1%E5%9D%97/</link>
			<pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/%E5%87%BD%E6%95%B0%E5%88%86%E7%B1%BB%E5%BD%A2%E5%8F%82%E5%AE%9E%E5%8F%82%E7%BB%93%E6%9E%84%E6%A8%A1%E5%9D%97/</guid>
			<description>今日内容概要   函数
认识学会基本的函数定义，基本的函数使用
  模块
  面向对象
认识，学会如何定义类，如何产生对象，基本的面向对象概念，使用
  今日内容详细 函数 &#39;&#39;&#39;函数相对于是工具，能够提前准备好之后在反复的使用，无需重复制造，可以大大的减少我们的工作时间，提高我们的工作效率在python中函数必须要先定义（创造）之后才能使用函数的定义★ 1.函数在定义阶段只检查语法不执行代码def get_user():username = input(&#39;username&amp;gt;&amp;gt;&amp;gt;:&#39;)password = input(&#39;password&amp;gt;&amp;gt;&amp;gt;:&#39;)print(&#39;%s:%s&#39;%(username,password))★2.函数的调用函数名+括号会执行函数体内部的代码get_user()&#39;&#39;&#39;函数的语法结构 &amp;#34;&amp;#34;&amp;#34;函数的语法结构def get_user():&amp;#39;&amp;#39;&amp;#39;注释&amp;#39;&amp;#39;&amp;#39;username = input(&amp;#39;username&amp;gt;&amp;gt;&amp;gt;:&amp;#39;)password = input(&amp;#39;password&amp;gt;&amp;gt;&amp;gt;:&amp;#39;)print(&amp;#39;%s:%s&amp;#39;(username,password))return &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;返回值1.def 是定义函数的关键字2.get_user 是函数名(类似于变量名，起的时候注意做到见名知意)3.(参数1，参数2) 括号里面可以放参数，意思是在调用函数的时候可以给函数的内部传输额外的数据4.参数 外界传递给函数内部的数据（不是必须的）5.函数的注释 用来解释该函数的功能、使用方式、注意事项6.函数体代码 函数真正的功能逻辑7.return 函数执行完毕之后返回给调用者的信息（该关键字也不是必须的）结构def 函数名 (参数1，参数2，...):&amp;#39;&amp;#39;&amp;#39;函数的注释&amp;#39;&amp;#39;&amp;#39;函数体代码return 返回值&amp;#34;&amp;#34;&amp;#34;函数的分类 &amp;#39;&amp;#39;&amp;#39;1.</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>
<p>函数</p>
<p>认识学会基本的函数定义，基本的函数使用</p>
</li>
<li>
<p>模块</p>
</li>
<li>
<p>面向对象</p>
<p>认识，学会如何定义类，如何产生对象，基本的面向对象概念，使用</p>
</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h4 id="函数">函数</h4>
<pre><code class="language-pythom" data-lang="pythom">'''
函数相对于是工具，能够提前准备好之后在反复的使用，无需重复制造，可以大大的减少我们的工作时间，提高我们的工作效率
在python中函数必须要先定义（创造）之后才能使用

函数的定义
★ 1.函数在定义阶段只检查语法不执行代码
def get_user():
    username = input('username&gt;&gt;&gt;:')
    password = input('password&gt;&gt;&gt;:')
    print('%s:%s'%(username,password))
★2.函数的调用
函数名+括号
	会执行函数体内部的代码
	
get_user()
'''
</code></pre><h4 id="函数的语法结构">函数的语法结构</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">函数的语法结构
</span><span class="s2">
</span><span class="s2">def get_user():
</span><span class="s2">    &#39;&#39;&#39;注释&#39;&#39;&#39;
</span><span class="s2">    username = input(&#39;username&gt;&gt;&gt;:&#39;)
</span><span class="s2">    password = input(&#39;password&gt;&gt;&gt;:&#39;)
</span><span class="s2">    print(&#39;</span><span class="si">%s</span><span class="s2">:</span><span class="si">%s</span><span class="s2">&#39;(username,password))
</span><span class="s2">    return     &gt;&gt;&gt;&gt;&gt;返回值
</span><span class="s2">
</span><span class="s2">1.def   是定义函数的关键字
</span><span class="s2">2.get_user  是函数名(类似于变量名，起的时候注意做到见名知意)
</span><span class="s2">3.(参数1，参数2) 括号里面可以放参数，意思是在调用函数的时候可以给函数的内部传输额外的数据
</span><span class="s2">4.参数  外界传递给函数内部的数据（不是必须的）
</span><span class="s2">5.函数的注释  用来解释该函数的功能、使用方式、注意事项
</span><span class="s2">6.函数体代码  函数真正的功能逻辑
</span><span class="s2">7.return   函数执行完毕之后返回给调用者的信息（该关键字也不是必须的）
</span><span class="s2">
</span><span class="s2"> 结构
</span><span class="s2">    def  函数名 (参数1，参数2，...):
</span><span class="s2">        &#39;&#39;&#39;函数的注释&#39;&#39;&#39;
</span><span class="s2">        函数体代码
</span><span class="s2">        return   返回值
</span><span class="s2">&#34;&#34;&#34;</span>

</code></pre></div><h4 id="函数的分类">函数的分类</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">1.无参函数：定义函数的时候括号内没有参数
</span><span class="s1">def index():
</span><span class="s1">    print(&#39;这是一段字符串&#39;)
</span><span class="s1">    
</span><span class="s1">2.有参函数：定义函数的时候括号里有参数，那么在调用该函数的时候也必须传参数
</span><span class="s1">def index(x,y):
</span><span class="s1">    print(x,y)
</span><span class="s1">    
</span><span class="s1">3.空函数：没有具体的函数代码
</span><span class="s1">def index():
</span><span class="s1">    pass
</span><span class="s1">
</span><span class="s1">★空函数多用于做前期的项目架构（空函数列举全部的功能之后再填充函数体代码）
</span><span class="s1">
</span><span class="s1">eg:贾维斯功能开发
</span><span class="s1">函数不单单可以理解为是工具还可以看成是具有一定功能的功能
</span><span class="s1">
</span><span class="s1">def talk():
</span><span class="s1">    pass
</span><span class="s1">def run():
</span><span class="s1">    pass
</span><span class="s1">def fight():
</span><span class="s1">    pass
</span><span class="s1">def read():
</span><span class="s1">    pass
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h4 id="函数的返回值">函数的返回值</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">def index():
</span><span class="s1">    print(&#39;这是一段字符串&#39;)
</span><span class="s1">    return  
</span><span class="s1">1.函数体代码中没有return关键字的时候
</span><span class="s1">res = index()  &gt;&gt;&gt;将index执行之后的返回值（结果）赋值给res
</span><span class="s1">print(res)  &gt;&gt;&gt;None
</span><span class="s1">  结论：没有return关键字函数默认返回None
</span><span class="s1"> 
</span><span class="s1">2.函数体代码中有return关键字但是后面没有值
</span><span class="s1">res = index ()  &gt;&gt;&gt;将index执行之后的返回值(结果)赋值给res
</span><span class="s1">print(res)       &gt;&gt;&gt;&gt;None
</span><span class="s1">  结论：有return关键字但是后面没有值照样返回None
</span><span class="s1">    
</span><span class="s1">3.函数体代码中有return关键字，并且有单个值
</span><span class="s1">def index():
</span><span class="s1">    print(&#39;这是一段字符串&#39;)
</span><span class="s1">    return 123
</span><span class="s1">res = index()   
</span><span class="s1">print(res)  &gt;&gt;&gt;&gt;&gt;  123
</span><span class="s1">	结论：return后面写什么函数就会返回什么
</span><span class="s1">    
</span><span class="s1">4.函数体代码中有return关键字，并且后面有多个值
</span><span class="s1">def index():
</span><span class="s1">    print(&#39;这是一段字符串&#39;)
</span><span class="s1">    return 111，222，333，444
</span><span class="s1">res = index()  
</span><span class="s1">print(res)  &gt;&gt;&gt;&gt;&gt;&gt;(111,222,333,444)
</span><span class="s1">	结论：return后面写多个值，默认自动组织成元组的形式返回
</span><span class="s1">    
</span><span class="s1">★return除了有返回值的功能之外，还有一个功能就是立刻结束函数的运行
</span><span class="s1">类似于break对while循环的作用
</span><span class="s1">当函数体遇到return的时候会立刻结束
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><p>函数的参数概念</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">形式参数
</span><span class="s2">	在函数的定义阶段，括号内写的参数都叫形式参数(类似于变量名)
</span><span class="s2">    	可以简称为形参
</span><span class="s2">def index(x,y):           &gt;&gt;&gt;&gt;(x,y) 都为形式参数
</span><span class="s2">        print(x,y)
</span><span class="s2">
</span><span class="s2">实际参数
</span><span class="s2">	在函数的调用阶段，括号内穿的参数都教实际参数（类似于变量的值）
</span><span class="s2">    	可以简称为实参
</span><span class="s2"> def index(x,y):
</span><span class="s2">        print(x,y)
</span><span class="s2">    index(1,2)           &gt;&gt;&gt;&gt;&gt;&gt;&gt;(1,2)为实际参数
</span><span class="s2">    
</span><span class="s2">形式参数于实际参数之间的联系
</span><span class="s2">	在函数调用阶段括号内传入的实际参数会赋值给形式参数
</span><span class="s2">    当函数运行结束之后两者又会解开关系
</span><span class="s2">     def index(x,y):
</span><span class="s2">        print(x,y) 
</span><span class="s2">    index(1,2)             &gt;&gt;&gt;&gt;&gt; x = 1  y = 2
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="函数的参数">函数的参数</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">位置参数
</span><span class="s2">def index(x,y):
</span><span class="s2">     print(x,y)
</span><span class="s2"> index(111)           &gt;&gt;&gt;&gt;&gt;   报错：给少了不行
</span><span class="s2"> index(111,222)       &gt;&gt;&gt;&gt;&gt;   运行结果：111 222  &gt;&gt;&gt;&gt;要几个就给几个
</span><span class="s2"> index(111,222,333)   &gt;&gt;&gt;&gt;&gt;   报错：给多了也不行
</span><span class="s2">
</span><span class="s2">按照位置的先后顺序传值
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">关键字参数
</span><span class="s2"> def index(x,y,z):
</span><span class="s2">     print(x,y,z)
</span><span class="s2"> index(y=111,x=222)
</span><span class="s2"> index(y=111,222)             &gt;&gt;&gt;&gt;&gt;&gt; 报错  关键字参数必须在位置参数的后面
</span><span class="s2"> index(222,z=666,y=111)       &gt;&gt;&gt;&gt;&gt;&gt;符合
</span><span class="s2"> index(222,x=666,y=111,z=222)  
</span><span class="s2">    
</span><span class="s2">指名道姓的给形式参数传值 可以打破位置的限制
</span><span class="s2">
</span><span class="s2">注意事项
</span><span class="s2">    1.关键字参数必须在位置参数的后面
</span><span class="s2">    2.形式参数在传实际参数的时候不能给多个
</span><span class="s2">
</span><span class="s2">补充
</span><span class="s2">    函数我们有时候也称之为方法
</span><span class="s2">    
</span><span class="s2">   
</span><span class="s2">
</span><span class="s2">默认参数
</span><span class="s2">
</span><span class="s2">在函数定义阶段就已经给形式参数赋值
</span><span class="s2">    当用户不给数据的时候就用默认的
</span><span class="s2">    当用户给了数据的时候就用用户的
</span><span class="s2">    
</span><span class="s2"> def register(username, gender=&#39;male&#39;):   &gt;&gt;&gt;&gt;&gt;这里gender的默认参数为male
</span><span class="s2">     print(&#39;姓名:</span><span class="si">%s</span><span class="s2">,性别:</span><span class="si">%s</span><span class="s2">&#39; % (username, gender))
</span><span class="s2">       则只需要输入姓名，性别默认则为male
</span><span class="s2">       如果不是，则需要手动输入参数
</span><span class="s2">eg：
</span><span class="s2">register(&#39;jason&#39;)
</span><span class="s2">register(&#39;kevin&#39;)
</span><span class="s2">register(&#39;egon&#39;)
</span><span class="s2">register(&#39;queen&#39;,&#39;female&#39;)
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">可变长参数
</span><span class="s2"> def index(x,*y):
</span><span class="s2">     print(&#39;from index&#39;)
</span><span class="s2">     print(&#39;x:&#39;,x)
</span><span class="s2">     print(&#39;y:&#39;,y)
</span><span class="s2"> 无论传多少个位置参数函数都可以正常执行
</span><span class="s2"> index(1,2,2,2,2,2,2,3,4,4,5,6,7,6,4,5,67,5,4,5,6,5)
</span><span class="s2">
</span><span class="s2"> def index(x,**y):
</span><span class="s2">     print(&#39;from index&#39;)
</span><span class="s2">     print(&#39;x:&#39;,x)
</span><span class="s2">     print(&#39;y:&#39;,y)
</span><span class="s2"> 无论传多少个关键参数函数都可以正常执行
</span><span class="s2"> index(1,y=2,z=3,u=1)
</span><span class="s2">
</span><span class="s2">    
</span><span class="s2">*
</span><span class="s2">    在形式参数中，用于接收多余的位置参数
</span><span class="s2">    组织成元祖的形式赋值给*后面的变量名
</span><span class="s2">**
</span><span class="s2">    在形式参数中，用于接收多余的关键字参数
</span><span class="s2">    组织成字典的形式赋值给**后面的变量名
</span><span class="s2">
</span><span class="s2">    
</span><span class="s2">    
</span><span class="s2"> 定义一个函数无论传多少个位置参数和关键字参数都能够正常执行
</span><span class="s2"> def index(*a,**b):
</span><span class="s2">     print(&#39;a:&#39;,a)
</span><span class="s2">     print(&#39;b:&#39;,b)
</span><span class="s2">
</span><span class="s2"> index()
</span><span class="s2"> index(111,222,2,2,2,2,23,3,4,5)
</span><span class="s2"> index(a=1,b=2,c=2)
</span><span class="s2"> index(111,222,33,a=1,d=2)
</span><span class="s2">
</span><span class="s2">    
</span><span class="s2">由于我们以后再写函数的时候不知道该函数将来可能会接收什么参数
</span><span class="s2">所以我们在定义函数的时候一般情况下都是用*和**
</span><span class="s2">并且由于使用频率较高 两个符号后面的变量名我们统一使用
</span><span class="s2">    args
</span><span class="s2">    kwargs
</span><span class="s2">
</span><span class="s2">def index(*args,**kwargs):
</span><span class="s2">    pass
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">
</span><span class="s2"> 补充
</span><span class="s2"> *和**不单单可以在形式参数中使用还可以在实际参数中使用
</span><span class="s2">l = [111,22,33,44,55,]
</span><span class="s2">d = {&#39;a&#39;:111,&#39;b&#39;:222,&#39;c&#39;:333}
</span><span class="s2"> def index1(*a):
</span><span class="s2">     print(a)
</span><span class="s2"> index1(l)  # ([111, 22, 33, 44, 55],)
</span><span class="s2"> index1(*l)  # (111, 22, 33, 44, 55)
</span><span class="s2"> 等价
</span><span class="s2"> index1(111,22,33,44,55)  # (111, 22, 33, 44, 55)
</span><span class="s2">
</span><span class="s2">    
</span><span class="s2">def index2(*args,**kwargs):
</span><span class="s2">    print(args)
</span><span class="s2">    print(kwargs)
</span><span class="s2">index2(d)  # ({&#39;a&#39;: 111, &#39;b&#39;: 222, &#39;c&#39;: 333},)
</span><span class="s2">index2(**d)  # {&#39;a&#39;: 111, &#39;b&#39;: 222, &#39;c&#39;: 333}
</span><span class="s2"> 等价
</span><span class="s2">index2(a=111,b=222,c=333)  # {&#39;a&#39;: 111, &#39;b&#39;: 222, &#39;c&#39;: 333}
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">*
</span><span class="s2">    在实际参数中会将列表中的元素打散成位置参数的形式
</span><span class="s2">    挨个传入函数
</span><span class="s2">
</span><span class="s2">**
</span><span class="s2">    在实际参数中会将字典的k:v键值对打散成关键字参数
</span><span class="s2">    挨个传入函数
</span><span class="s2">&#34;&#34;&#34;</span>     
</code></pre></div><h4 id="函数小练习">函数小练习</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 注册登录功能</span>
<span class="s1">&#39;&#39;&#39;体会编程魅力&#39;&#39;&#39;</span>
<span class="k">def</span> <span class="nf">get_user</span><span class="p">():</span>
    <span class="n">username</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;username&gt;&gt;&gt;:&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">password</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;password&gt;&gt;&gt;:&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">username</span><span class="p">,</span> <span class="n">password</span>


<span class="k">def</span> <span class="nf">register</span><span class="p">():</span>
    <span class="c1"># 解压赋值</span>
    <span class="n">user</span><span class="p">,</span> <span class="n">pwd</span> <span class="o">=</span> <span class="n">get_user</span><span class="p">()</span>
    <span class="c1"># 将数据存入文件</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;userinfo.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%s</span><span class="s1">:</span><span class="si">%s</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">pwd</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">login</span><span class="p">():</span>
    <span class="n">user</span><span class="p">,</span> <span class="n">pwd</span> <span class="o">=</span> <span class="n">get_user</span><span class="p">()</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;userinfo.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
            <span class="c1"># print(line)  # jason:123</span>
            <span class="c1"># 字符串的切割</span>
            <span class="n">name</span><span class="p">,</span><span class="n">password</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">user</span> <span class="o">==</span> <span class="n">name</span> <span class="ow">and</span> <span class="n">password</span> <span class="o">==</span> <span class="n">pwd</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s1">&#39;登录成功&#39;</span><span class="p">)</span>
                <span class="k">break</span>       <span class="c1"># 直接结束for循环</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s1">&#39;用户名或密码错误/用户不存在&#39;</span><span class="p">)</span>


<span class="c1"># 注册</span>
<span class="c1"># register()</span>
<span class="c1"># 登录</span>
<span class="n">login</span><span class="p">()</span>
</code></pre></div><h4 id="模块">模块</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="err">模块你可以看成是已经写好的具有一定功能的代码块</span>
<span class="err">模块的表现形式可以是单个的</span><span class="n">py文件</span><span class="err">，也可以是多个</span><span class="n">py文件组成的文件夹</span>


<span class="err">使用方式</span>
	<span class="mf">1.</span><span class="err">内置的</span><span class="p">(</span><span class="n">python解释器自带的</span><span class="p">)</span>
    	<span class="kn">import</span> <span class="nn">os</span>
    <span class="mf">2.</span><span class="err">自己写的</span>
        <span class="kn">import</span> <span class="nn">mydd</span>  <span class="c1"># 将mydd内所有的变量全部导入</span>
        <span class="kn">from</span> <span class="nn">mydd</span> <span class="kn">import</span> <span class="n">name</span>  <span class="c1"># 从mydd中只导入一个name变量</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    导入模块其实会自动执行模块文件内的所有代码
</span><span class="s2">    之后通过模块名的形式就可以直接使用模块内所有的功能
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="mf">3.</span><span class="err">导入第三方</span><span class="p">(</span><span class="err">存于网上</span><span class="p">)</span>
    	<span class="err">要想第三方模块必须先下载</span>
        <span class="n">pip3</span> 
        <span class="n">pip3</span> <span class="n">install</span> <span class="n">requests</span>  <span class="c1"># 默认是去国外的仓库下载 速度会比较慢</span>
        <span class="c1"># 针对下载地址我们可以有以下几种方式修改</span>
        <span class="err">（</span><span class="mi">1</span><span class="err">）阿里云</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">mirrors</span><span class="o">.</span><span class="n">aliyun</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">pypi</span><span class="o">/</span><span class="n">simple</span><span class="o">/</span>
        <span class="err">（</span><span class="mi">2</span><span class="err">）豆瓣</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">pypi</span><span class="o">.</span><span class="n">douban</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">simple</span><span class="o">/</span>
        <span class="err">（</span><span class="mi">3</span><span class="err">）清华大学</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">pypi</span><span class="o">.</span><span class="n">tuna</span><span class="o">.</span><span class="n">tsinghua</span><span class="o">.</span><span class="n">edu</span><span class="o">.</span><span class="n">cn</span><span class="o">/</span><span class="n">simple</span><span class="o">/</span>
        <span class="err">（</span><span class="mi">4</span><span class="err">）中国科学技术大学</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">pypi</span><span class="o">.</span><span class="n">mirrors</span><span class="o">.</span><span class="n">ustc</span><span class="o">.</span><span class="n">edu</span><span class="o">.</span><span class="n">cn</span><span class="o">/</span><span class="n">simple</span><span class="o">/</span>
        <span class="err">（</span><span class="mi">5</span><span class="err">）华中科技大学</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">pypi</span><span class="o">.</span><span class="n">hustunique</span><span class="o">.</span><span class="n">com</span><span class="o">/</span>
            
        <span class="c1"># 方式1 </span>
        <span class="n">pip3</span> <span class="n">install</span> <span class="o">-</span><span class="n">i</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">pypi</span><span class="o">.</span><span class="n">tuna</span><span class="o">.</span><span class="n">tsinghua</span><span class="o">.</span><span class="n">edu</span><span class="o">.</span><span class="n">cn</span><span class="o">/</span><span class="n">simple</span><span class="o">/</span> <span class="n">requests</span>
        <span class="c1"># 方式2</span>
        <span class="n">pycharm快捷方式修改</span>
        <span class="c1"># 方式3(修改python的配置文件)</span>
        <span class="err">不建议修改</span>
     
</code></pre></div><h4 id="模块的使用">模块的使用</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">random</span>

<span class="c1"># 内置的 随机模块</span>
<span class="c1"># print(random.random())  # 0-1之间的随机小数</span>
<span class="c1"># print(random.randint(1,6))  # 1-6之间的整数  类似于摇骰子</span>
<span class="c1"># l = [2, 3, 4, 5, 6, 7, 8, 9, 10, &#39;J&#39;, &#39;Q&#39;, &#39;K&#39;, &#39;A&#39;]</span>
<span class="c1"># random.shuffle(l)  # 洗牌功能  打乱原来的顺序</span>
<span class="c1"># print(l)</span>
<span class="n">l1</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;三等奖&#39;</span><span class="p">,</span><span class="s1">&#39;二等奖&#39;</span><span class="p">,</span><span class="s1">&#39;一等奖&#39;</span><span class="p">,</span><span class="s1">&#39;谢谢惠顾&#39;</span><span class="p">,</span><span class="s1">&#39;如花抱回家&#39;</span><span class="p">]</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">l1</span><span class="p">)</span>  <span class="c1"># 随机抽取</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>字符编码，字符处理，文件处理，文件操作</title>
			<link>https://Eddy-622.github.io/posts/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
			<pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
			<description>今日内容概要   字符编码的概念
  文件处理
用python代码来操作文件的创建、书写、修改
  函数
  模块
  面向对象
python本质就是一门面向对象的编程语言
  今日内容详细 知识补充
​	布尔值为False的情况有哪些
​	0 、None 、 &#39;&amp;rsquo; 、[ ] 、 { }
字符编码 &amp;#39;&amp;#39;&amp;#39;有时候当我们打开一个文件的时候发现展示的内容是一段乱码，这种情况是如何产生的，以及如何解决字符编码的研究只针对文本文件，视频音频文件没有字符一说，不在研究范围之内知识回顾1、软件运行前，软件的代码及其相关数据都是存放于硬盘中的2、任何软件的启动都是将数据从硬盘中读入内存，然后cpu从内存中取出指令并执行3、软件运行过程中产生的数据最先都是存放于内存中的，若想永久保存软件产生的数据，则需要将数据由内存写入硬盘普通的文本编辑器阶段1、启动一个文件编辑器（文本编辑器如nodepad++，pycharm，word）阶段2、文件编辑器会将文件内容从硬盘读入内存阶段3、文本编辑器会将刚刚读入内存中的内容显示到屏幕上python解释器阶段1、启动python解释器，此时就相当于启动了一个文本编辑器阶段2、python解释器相当于文本编辑器，从硬盘上将test.py的内容读入到内存中阶段3、python解释器解释执行刚刚读入的内存的内容，开始识别python语法 文本编辑器和python解释器的异同点1、相同点：前两个阶段二者完全一致，都是将硬盘中文件的内容读入内存，详解如下python解释器是解释执行文件内容的，因而python解释器具备读py文件的功能，这一点与文本编辑器一样2、不同点：在阶段3时，针对内存中读入的内容处理方式不同，详解如下文本编辑器将文件内容读入内存后，是为了显示或者编辑，根本不去理会python的语法，而python解释器将文件内容读入内存后，可不是为了给你瞅一眼python代码写的啥，而是为了执行python代码、会识别python语法）计算机由于是基于电工作的，只能识别识别010101二进制数据，但是我们人在使用计算机的时候却可以使用各式各样的文字语言人类的字符	转换过程	二进制数字&amp;#39;&amp;#39;&amp;#39;字符编码发展史 &amp;#39;&amp;#39;&amp;#39;计算机起源于美国美国人用的是英文，而计算机只认识二进制，美国人需要解决英文字符和二进制之间的转换关系(ASCII码)&amp;#34;&amp;#34;&amp;#34;8bit = 1bytes1024bytes = 1KB1024KB = 1MB1024MB = 1GB&amp;#34;&amp;#34;&amp;#34;一家独大ASCII码记录了英文字符和数字之间的转换关系用8位来来表示一个英文字符2**8(其实2的7次方足以表示所有的英文字符，但是考虑到后续可能会出现新的语言，所以留了一位备用)群雄割据自己得开发一套自己的字符编码表中国人GBK编码表记录了中文字符、英文字符跟数字的对应关系用16位来表示一个中文字符，针对英文字符还是用8位(针对生僻字我们可能会使用更高位数来表示)韩国人Euc_kr编码表记录了韩文、英文跟数字的对应关系日本人shift_JIS编码表记录了日文、英文跟数字的对应关系# 每个国家自己使用自己的编码，无法实现国家之间数据的交互&amp;#34;&amp;#34;&amp;#34;在中国电脑上使用GBK编写的文件基于网络发送给日本人打开的时候使用的是shift_JIS编码表，会造成文件乱码现象&amp;#34;&amp;#34;&amp;#34;天下一统为了解决群雄割据的局面，实现数据的统一思想unicode编码表	万国码兼容所有国家的所有编码统一使用16位即2bytes表示数据(针对生僻字会采用更多的位数)我们现在之所以能够在一台计算机上敲出各个国家的文字就是因为我们计算机内存中使用的是unicode编码表unicode的弊端，针对纯英文的文件存储空间会翻倍，随之而来的等待时间也会翻倍这个是我们无法容忍的utf8 万国码的转换格式它是存在与硬盘中的(内存使用unicode硬盘使用utf8)针对中文使用3bytes英文使用1bytes当我们书写文件的时候编码默认使用utf8即可，目前绝大多数的软件使用的都是utf8&amp;#39;&amp;#39;&amp;#39;字符编码和要掌握的内容 变量名.</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>
<p>字符编码的概念</p>
</li>
<li>
<p>文件处理</p>
<p>用python代码来操作文件的创建、书写、修改</p>
</li>
<li>
<p>函数</p>
</li>
<li>
<p>模块</p>
</li>
<li>
<p>面向对象</p>
<p>python本质就是一门面向对象的编程语言</p>
</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<p>知识补充</p>
<p>​	布尔值为False的情况有哪些</p>
<p>​		0 、None 、 '&rsquo;   、[  ]   、 { }</p>
<h3 id="字符编码">字符编码</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;有时候当我们打开一个文件的时候发现展示的内容是一段乱码，这种情况是如何产生的，以及如何解决
</span><span class="s1">
</span><span class="s1">字符编码的研究只针对文本文件，视频音频文件没有字符一说，不在研究范围之内
</span><span class="s1">
</span><span class="s1">知识回顾
</span><span class="s1">1、软件运行前，软件的代码及其相关数据都是存放于硬盘中的
</span><span class="s1">2、任何软件的启动都是将数据从硬盘中读入内存，然后cpu从内存中取出指令并执行
</span><span class="s1">3、软件运行过程中产生的数据最先都是存放于内存中的，若想永久保存软件产生的数据，则需要将数据由内存写入硬盘
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">普通的文本编辑器
</span><span class="s1">阶段1、启动一个文件编辑器（文本编辑器如nodepad++，pycharm，word）
</span><span class="s1">阶段2、文件编辑器会将文件内容从硬盘读入内存
</span><span class="s1">阶段3、文本编辑器会将刚刚读入内存中的内容显示到屏幕上
</span><span class="s1">python解释器
</span><span class="s1">阶段1、启动python解释器，此时就相当于启动了一个文本编辑器
</span><span class="s1">阶段2、python解释器相当于文本编辑器，从硬盘上将test.py的内容读入到内存中
</span><span class="s1">阶段3、python解释器解释执行刚刚读入的内存的内容，开始识别python语法 
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">文本编辑器和python解释器的异同点
</span><span class="s1">1、相同点：前两个阶段二者完全一致，都是将硬盘中文件的内容读入内存，详解如下
</span><span class="s1">python解释器是解释执行文件内容的，因而python解释器具备读py文件的功能，这一点与文本编辑器一样
</span><span class="s1">2、不同点：在阶段3时，针对内存中读入的内容处理方式不同，详解如下
</span><span class="s1">文本编辑器将文件内容读入内存后，是为了显示或者编辑，根本不去理会python的语法，而python解释器将文件内容读入内存后，可不是为了给你瞅一眼python代码写的啥，而是为了执行python代码、会识别python语法）
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">计算机由于是基于电工作的，只能识别识别010101二进制数据，但是我们人在使用计算机的时候却可以使用各式各样的文字语言
</span><span class="s1">	人类的字符			转换过程				二进制数字&#39;&#39;&#39;</span>
</code></pre></div><h4 id="字符编码发展史">字符编码发展史</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;计算机起源于美国
</span><span class="s1">	美国人用的是英文，而计算机只认识二进制，美国人需要解决英文字符和二进制之间的转换关系(ASCII码)
</span><span class="s1">&#34;&#34;&#34;
</span><span class="s1">8bit = 1bytes
</span><span class="s1">1024bytes = 1KB
</span><span class="s1">1024KB = 1MB
</span><span class="s1">1024MB = 1GB
</span><span class="s1">&#34;&#34;&#34;
</span><span class="s1">    
</span><span class="s1">    
</span><span class="s1">一家独大
</span><span class="s1">	ASCII码
</span><span class="s1">    	记录了英文字符和数字之间的转换关系
</span><span class="s1">        	用8位来来表示一个英文字符
</span><span class="s1">            	2**8(其实2的7次方足以表示所有的英文字符，但是考虑到后续可能会出现新的语言，所以留了一位备用)
</span><span class="s1">		
</span><span class="s1">群雄割据
</span><span class="s1">	自己得开发一套自己的字符编码表
</span><span class="s1">	中国人
</span><span class="s1">    	GBK编码表
</span><span class="s1">        记录了中文字符、英文字符跟数字的对应关系
</span><span class="s1">        	用16位来表示一个中文字符，针对英文字符还是用8位
</span><span class="s1">        	(针对生僻字我们可能会使用更高位数来表示)
</span><span class="s1">    韩国人
</span><span class="s1">    	Euc_kr编码表
</span><span class="s1">        记录了韩文、英文跟数字的对应关系
</span><span class="s1">    日本人
</span><span class="s1">    	shift_JIS编码表
</span><span class="s1">        记录了日文、英文跟数字的对应关系
</span><span class="s1">	# 每个国家自己使用自己的编码，无法实现国家之间数据的交互
</span><span class="s1">    &#34;&#34;&#34;在中国电脑上使用GBK编写的文件基于网络发送给日本人
</span><span class="s1">    打开的时候使用的是shift_JIS编码表，会造成文件乱码现象
</span><span class="s1">    &#34;&#34;&#34;
</span><span class="s1">    
</span><span class="s1">天下一统
</span><span class="s1">	为了解决群雄割据的局面，实现数据的统一思想
</span><span class="s1">    unicode编码表		万国码
</span><span class="s1">    	兼容所有国家的所有编码
</span><span class="s1">       	统一使用16位即2bytes表示数据(针对生僻字会采用更多的位数)
</span><span class="s1">    我们现在之所以能够在一台计算机上敲出各个国家的文字就是因为我们计算机内存中使用的是unicode编码表
</span><span class="s1">    
</span><span class="s1">    unicode的弊端，针对纯英文的文件存储空间会翻倍，随之而来的等待时间也会翻倍这个是我们无法容忍的
</span><span class="s1">    
</span><span class="s1">    utf8 万国码的转换格式
</span><span class="s1">    	它是存在与硬盘中的
</span><span class="s1">        (内存使用unicode硬盘使用utf8)
</span><span class="s1">        	针对中文使用3bytes英文使用1bytes
</span><span class="s1">            
</span><span class="s1">当我们书写文件的时候编码默认使用utf8即可，目前绝大多数的软件使用的都是utf8&#39;&#39;&#39;</span>
</code></pre></div><h4 id="字符编码和要掌握的内容">字符编码和要掌握的内容</h4>
<p><strong>变量名.encode(&lsquo;utf-8&rsquo;)  &raquo;&raquo;&raquo;   使用utf8格式编码</strong></p>
<p><strong>变量名.decode(&lsquo;utf-8&rsquo;)  &raquo;&raquo;&raquo;  使用utf-8 格式解码</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;1.解决乱码的核心就是在于用什么编码编的就用什么码来解
</span><span class="s2">2.代码层面如何用数据进行编码与解码
</span><span class="s2">	基于网络传输数据，数据必须是bytes格式（二进制格式）
</span><span class="s2">    
</span><span class="s2">eg： info = &#39;这是一段字符串&#39;
</span><span class="s2">	把字符串按照指定的编码编成bytes格式
</span><span class="s2">    res = info.encoude(&#39;utf-8&#39;)
</span><span class="s2">    print(res)   &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;此时res所待变的则就是经过utf8转码后的二进制码
</span><span class="s2">    
</span><span class="s2">    在python中如果字符串有一个b，则说明该数据类型为bytes类型
</span><span class="s2">    python中的bytes类型你可以直接看成是二进制数据
</span><span class="s2">	
</span><span class="s2">    将bytes类型的数据按照指定的编码解析成人类可读的数据
</span><span class="s2">    res1 = res.decode(&#39;utf_8&#39;)
</span><span class="s2">    print(res1)
</span><span class="s2">    
</span><span class="s2">3.python2版本和python3版本默认的字符编码是不一致的
</span><span class="s2">	python2版本出来的时候还没有unicode，python2内部采用的是ASCII
</span><span class="s2">    python3版本默认的则为utf8
</span><span class="s2">    
</span><span class="s2">    针对python2我们在书写字符串的时候会采用
</span><span class="s2">    1.文件头的形式
</span><span class="s2">    	coding:utf8
</span><span class="s2">    2.在所有的字符串前面加上字母u
</span><span class="s2">    	info = u&#39;这是一段字符串&#39;&#34;&#34;&#34;</span>
</code></pre></div><h4 id="文件处理">文件处理</h4>
<div class="highlight"><pre class="chroma"><code class="language-PYTHON" data-lang="PYTHON"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">什么是文件？
</span><span class="s2">	文件就是用来帮助我们保存数据的
</span><span class="s2">    文件的本质其实就是操作系统给我们封装的一个用来操作计算机硬盘的快捷工具
</span><span class="s2">    
</span><span class="s2">文件的操作
</span><span class="s2">（了解）
</span><span class="s2">file = open(r&#39;a.txt&#39;,&#39;r&#39;,encoding=&#39;utf-8&#39;)  &gt;&gt;&gt;&gt;&gt;&gt; 此处的r作用为防止路径中的\与字母                &gt;&gt;&gt;打开文件                被解释为特殊含义，从而出现代码错误。
</span><span class="s2">file.close()   &gt;&gt;&gt;&gt;关闭文件
</span><span class="s2">
</span><span class="s2">with   上下文管理
</span><span class="s2">with open(r&#39;a.txt&#39;,&#39;r&#39;,encoding=&#39;utf-8&#39;) as f: 
</span><span class="s2">       							  &gt;&gt;&gt;&gt;&gt;这里的f就是一个变量名用来指代open的结果
</span><span class="s2">     res = f.read()
</span><span class="s2">     print(res)
</span><span class="s2">固定句式
</span><span class="s2">with open(r&#39;文件路径&#39;(必需),&#39;读写模式&#39;(必需),encoding(不是必需的)) as 变量名:
</span><span class="s2">    缩进的代码用于操作文件
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="文件的打开方式">文件的打开方式</h4>
<p>​	r	 	只读模式</p>
<p>​	w		只写模式</p>
<p>​	a		只追加写模式</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">r 模式打开文件的时候若输入的文件名不存在则直接报错
</span><span class="s2">witn open(r&#39;b.txt&#39;, &#39;r&#39;, encoding=&#39;utf8&#39;) as f:
</span><span class="s2">    pass      &gt;&gt;&gt;&gt;&gt;&gt;此处pass的本身没有任何意义，用来补全代码结构
</span><span class="s2">文件名存在：r模式会以只读的形式打开文件
</span><span class="s2">with open(r&#39;a.txt&#39;, &#39;r&#39;, encoding= &#39;utf8&#39;) as = f:
</span><span class="s2">    data = f.read()			&gt;&gt;&gt;&gt;&gt;读取文件内的所有数据
</span><span class="s2">    print(data)
</span><span class="s2">    
</span><span class="s2">w 模式
</span><span class="s2">若输入的文件名不存在， w 模式会自动帮你创建新文件并重命名
</span><span class="s2">with open(r &#39;b.txt&#39;, &#39;w&#39;, encoding= &#39;utf8&#39;) as = f:
</span><span class="s2">    pass   &gt;&gt;&gt;&gt;&gt;补全代码
</span><span class="s2"> 文件名存在:w模式会以只写的形式打开文件(先清空文件再写入容)
</span><span class="s2"> with open(r&#39;a.txt&#39;, &#39;w&#39;, encoding=&#39;utf8&#39;) as f:
</span><span class="s2">     f.write(&#39;哈哈哈哈</span><span class="se">\n</span><span class="s2">&#39;)
</span><span class="s2">     f.write(&#39;哈哈哈哈</span><span class="se">\n</span><span class="s2">&#39;)
</span><span class="s2">     f.write(&#39;哈哈哈哈&#39;)
</span><span class="s2">        
</span><span class="s2">       
</span><span class="s2">a模式
</span><span class="s2">文件名不存在，a模式会帮你创建文件
</span><span class="s2">with open(r &#39;c.txt&#39;, &#39;a&#39;, encoding=&#39;utf8&#39;) as = f:
</span><span class="s2">    pass
</span><span class="s2">文件名存在，a模式会以只追加写的形式打开文件（不会清空原文件的内容）
</span><span class="s2"> with open(r&#39;a.txt&#39;, &#39;a&#39;, encoding=&#39;utf8&#39;) as f:
</span><span class="s2">	 f.write(&#39;嘿嘿嘿&#39;)&#34;&#34;&#34;</span>
</code></pre></div><h4 id="文件操作的常用方法">文件操作的常用方法</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">read()    &gt;&gt;&gt;&gt;&gt;&gt;读取文件操作
</span><span class="s1">	1.执行完read方法之后光标会停留在文件末尾，再次读取时就没有内容了
</span><span class="s1">    2.当文件特别大的时候，执行read可能会造成内存溢出（撑爆了）
</span><span class="s1">    	推荐
</span><span class="s1">        	for循环文件对象
</span><span class="s1">write()    &gt;&gt;&gt;&gt;&gt;&gt;&gt;写入文件内容
</span><span class="s1">readable()  &gt;&gt;&gt;&gt;&gt;&gt;判断文件是否可读
</span><span class="s1">f.writable() &gt;&gt;&gt;&gt;&gt;判断文件是否可写
</span><span class="s1">f.readline() &gt;&gt;&gt;&gt;&gt;&gt;只读一行数据
</span><span class="s1">f.readlines()  &gt;&gt;&gt;&gt;&gt;将文件内容全部读取出来并且组织成列表的形式
</span><span class="s1">f.writelines([]) &gt;&gt;&gt;&gt;&gt;一次性将列表多个元素全部写入文件
</span><span class="s1">f.flush()   &gt;&gt;&gt;&gt;&gt;&gt;&gt;将内存中的数据立刻刷到硬盘上
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h4 id="文件的操作模式">文件的操作模式</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">t    文本模式
</span><span class="s1">		该模式也是默认的模式
</span><span class="s1">    r   rt
</span><span class="s1">    w   wt
</span><span class="s1">    a   at
</span><span class="s1">  1.该模式只能用于文本文件
</span><span class="s1">  2，该模式读写都市以字符串为单位
</span><span class="s1">  3.该模式必须要有encoding参数
</span><span class="s1">
</span><span class="s1">b    二进制（bytes）模式
</span><span class="s1">	1.该模式可以用于任意的文件
</span><span class="s1">    2.该模式读写都是以butes为单位
</span><span class="s1">    3.该模式不一定要有encoding参数
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h4 id="控制光标的移动">控制光标的移动</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">f.seek(offset,whence)
</span><span class="s2">	offset:移动量
</span><span class="s2">    whence:模式
</span><span class="s2">        	0:可以在t和b使用(相对于文件开头)
</span><span class="s2">            1:只能在b模式使用(相对于光标所在的位置)
</span><span class="s2">            2:只能在b模式使用(相对于文件末尾)
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="文件的修改">文件的修改</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">eg:   文件 b.txt  内容为  my name is egon ，my age is 18.
</span><span class="s2">    将文件中的egon修敢为jason
</span><span class="s2">    with open(r &#39;b.txt&#39;,&#39;r&#39;,encoding=&#39;utf8&#39;) as = f: 
</span><span class="s2">         &gt;&gt;&gt;&gt;&gt;&gt;以只读模式打开文件b.txt并赋值在变量f上
</span><span class="s2">        data = f.read()   &gt;&gt;&gt;&gt;&gt;读取文件的内容并赋值给变量data
</span><span class="s2">    with open(r &#39;b.txt&#39;,&#39;w&#39;,encoding = &#39;utf8&#39;) as = f:
</span><span class="s2">           &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;以只写模式打开b.txt文件并赋值在变量f上
</span><span class="s2">        res = data.replace(&#39;egon&#39;,&#39;jason&#39;)   &gt;&gt;&gt;&gt;&gt;&gt;字符串的替换（替换数据）
</span><span class="s2">        f.write(res)     &gt;&gt;&gt;&gt;&gt;&gt;&gt;写入数据   
</span><span class="s2">        
</span><span class="s2">        
</span><span class="s2">方式二：
</span><span class="s2">先创建一个新文件，将老文件内容写入新文件
</span><span class="s2">将老文件删除并重命名新文件名为老文件名
</span><span class="s2">import os
</span><span class="s2">
</span><span class="s2">with open(r&#39;b.txt&#39;, &#39;r&#39;, encoding=&#39;utf-8&#39;) as read_f, \
</span><span class="s2">        open(r&#39;b_backend.txt&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as write_f:
</span><span class="s2">    for line in read_f:
</span><span class="s2">        write_f.write(line.replace(&#39;jason&#39;, &#39;jasonDSB&#39;))
</span><span class="s2">
</span><span class="s2">        
</span><span class="s2">os.remove (&#39;b.txt&#39;)   &gt;&gt;&gt;&gt;将原文件删除
</span><span class="s2">os.rename(&#39;b_backend.txt , &#39;b.txt)   &gt;&gt;&gt;&gt;&gt;重命名
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="作业">作业</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;1.基于做题作业的第二道题扩展新功能(思考)
</span><span class="s1">	当用户输错三次之后，提示用户是否继续尝试
</span><span class="s1">    (y/n),用户如果想继续尝试则再给用户三次机会
</span><span class="s1">    不想尝试则退出程序&#39;&#39;&#39;</span>
    
    <span class="n">user_name</span> <span class="o">=</span> <span class="s1">&#39;Eddy&#39;</span>
<span class="n">pass_word</span> <span class="o">=</span> <span class="s1">&#39;123&#39;</span>
<span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">num1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">user_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;user_name&gt;&gt;&gt;:&#39;</span><span class="p">)</span>
    <span class="n">pass_word</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;pass_word&gt;&gt;&gt;:&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">user_name</span> <span class="o">==</span> <span class="s1">&#39;Eddy&#39;</span> <span class="ow">and</span> <span class="n">pass_word</span> <span class="o">==</span> <span class="s1">&#39;123&#39;</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;登录成功&#39;</span><span class="p">)</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">break</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;用户名或密码错误&#34;</span><span class="p">)</span>
        <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;剩余输入次数&#39;</span><span class="p">,</span> <span class="mi">3</span> <span class="o">-</span> <span class="n">num</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s1">&#39;失败次数过多，是否继续尝试，三次机会！&#39;</span><span class="p">)</span>
            <span class="n">rest</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;失败次数过多，是否继续尝试:[y/n]&#39;</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">rest</span> <span class="ow">is</span> <span class="s1">&#39;y&#39;</span><span class="p">:</span>
                <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                    <span class="n">user_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;user_name&gt;&gt;&gt;:&#39;</span><span class="p">)</span>
                    <span class="n">pass_word</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;pass_word&gt;&gt;&gt;:&#39;</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">user_name</span> <span class="o">==</span> <span class="s1">&#39;Eddy&#39;</span> <span class="ow">and</span> <span class="n">pass_word</span> <span class="o">==</span> <span class="s1">&#39;123&#39;</span><span class="p">:</span>
                        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;登录成功&#39;</span><span class="p">)</span>
                        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                            <span class="k">break</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;用户名或密码错误&#34;</span><span class="p">)</span>
                        <span class="n">num1</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;剩余输入次数&#39;</span><span class="p">,</span> <span class="mi">3</span> <span class="o">-</span> <span class="n">num1</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">num1</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
                        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;死去吧&#39;</span><span class="p">)</span>
                        <span class="k">break</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">break</span>

    
    
<span class="s1">&#39;&#39;&#39;2.参考代码完善功能(拔高题)
</span><span class="s1">	# 拷贝数据
</span><span class="s1">	with open(r&#39;111.jpg&#39;,&#39;rb&#39;) as rf,open(r&#39;222.jpg&#39;,&#39;wb&#39;) as wf:
</span><span class="s1">    # 读取111.jpg数据写入222.jpg
</span><span class="s1">    for line in rf:
</span><span class="s1">        wf.write(line)
</span><span class="s1">   1.针对拷贝出来的文件存放位置，用户可以自定义
</span><span class="s1">   2.针对被拷贝文件也让用户自定义选择(思考即可)&#39;&#39;&#39;</span>

</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>While循环，for循环，嵌套，数据类型的内置</title>
			<link>https://Eddy-622.github.io/posts/while%E5%BE%AA%E7%8E%AFfor%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%86%85%E7%BD%AE/</link>
			<pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/while%E5%BE%AA%E7%8E%AFfor%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%86%85%E7%BD%AE/</guid>
			<description>上周内容回顾 数据类型 &amp;#39;&amp;#39;&amp;#39;布尔值 bool布尔值的命名传统前面加上is_eg: is_deleteis_status元组 tuplet = (1,2,3,4,5)当容器类型里面只有一个元素的时候也应该将逗号加上集合 sets = {1,2,3,4,5}&amp;#39;&amp;#39;&amp;#39;可变类型与不可变类型 &amp;#39;&amp;#39;&amp;#39; 查询数值的内存地址id()可变类型（列表，字典）值改变内存地址不变不可变类型（整型，浮点型，字符串）值改变内存地址一定变&amp;#39;&amp;#39;&amp;#39;用户交互 &amp;#39;&amp;#39;&amp;#39;获取用户输入inputinput获取到的数据都是字符串类型输出结果print可以一次性输出多个元素，逗号隔开即可&amp;#39;&amp;#39;&amp;#39;格式化输出 &amp;#39;&amp;#39;&amp;#39;占位符 ： %s(可以给任意的数据类型占位)。d%(只能给数字占位)&amp;#39;my name is %sand my age is s%&amp;#39; (Eddy, 18)字符串里有几个占位符，后面给数据的时候就要给出几个真实数据&amp;#39;&amp;#39;&amp;#39;运算符 &amp;#39;&amp;#39;&amp;#39;基本运算符+-*/%**增量赋值x += 1x -= 1x *= 1x /= 1链式赋值a = b = c = 666交叉赋值m = 10n = 999交换m 和 n 的数值方式一利用中间变量tum = mm = n n = tum方式二交叉赋值m,n = n,m解压赋值l = [11,22,33]默认情况下左右两边的个数一定要相等有多少个值就要给多少个变量名a ,b,c = l利用*打破变量名数量的限制a,*_,b = l*_常用来表达无用的数据逻辑运算and or notand连接多个条件，且必须成立，输出结果才为True，有一个条件不成立直接结束，输出Flaseor与and恰恰相反，链接的结果只要一个成立，结果都为True。有一个成立则直接输出结果Truenot取反 not True = Flase身份运算is判断地址是否相等==判断值是否想同值相同内存地址可能不同内存地址相同值一定相同&amp;#39;&amp;#39;&amp;#39;代码的缩进 &amp;#39;&amp;#39;&amp;#39;python中利用代码的缩进来表示代码的从属关系并不是所有的代码都可以又子代码的权限属于同一个代码的多个子代码，子代码之间的缩进必须是相同的遇到冒号说明接下来的代码需要缩进&amp;#39;&amp;#39;&amp;#39;流程控制值if判断 &amp;#39;&amp;#39;&amp;#39;if的固定句式if 条件1:代码1代码2elif 条件2:代码1代码2elif 条件3:代码1代码2else :代码1代码2那个条件成立就会执行哪个条件的子代码其他的都不会被执行所有条件代码中只会被执行一个&amp;#39;&amp;#39;&amp;#39;今日内容 if 判断结束 循环结构值while循环 循环结构之for循环 数据类型的内置方法 字符编码 今日内容详细 if判断 &amp;#39;&amp;#39;&amp;#39;if的嵌套(代码的缩进以及子代码的从属关系)eg:如果女人的年龄小于28岁且定义为漂亮的则上去要微信如果成功则邀请看电影吃饭逛街不成功则 打扰了&amp;#39;&amp;#39;&amp;#39;age = 26is_beautiful = Trueis_success = Trueif age &amp;lt; 28 and is_beautifulprint(&amp;#39;小姐姐加个微信&amp;#39;)#二次判断 if is_success:print(&amp;#39;我们去吃饭看电影逛街吧&amp;#39;)else:print(&amp;#39;打扰了&amp;#39;)else:print(&amp;#39;不好意思认错人了&amp;#39;)循环结构之while循环 break 用于结束离他最近的while循环</description>
			<content type="html"><![CDATA[<h1 id="上周内容回顾">上周内容回顾</h1>
<h4 id="数据类型">数据类型</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">布尔值  bool
</span><span class="s1">
</span><span class="s1">布尔值的命名传统前面加上is_
</span><span class="s1">eg:  is_delete
</span><span class="s1">     is_status
</span><span class="s1">
</span><span class="s1">元组  tuple
</span><span class="s1">	t = (1,2,3,4,5)
</span><span class="s1">    
</span><span class="s1">  当容器类型里面只有一个元素的时候也应该将逗号加上
</span><span class="s1">
</span><span class="s1">集合 set
</span><span class="s1">	s = {1,2,3,4,5}
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h4 id="可变类型与不可变类型">可变类型与不可变类型</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39; 查询数值的内存地址
</span><span class="s1">    	id()
</span><span class="s1">可变类型（列表，字典）
</span><span class="s1">	值改变内存地址不变
</span><span class="s1">
</span><span class="s1">不可变类型（整型，浮点型，字符串）
</span><span class="s1">	值改变内存地址一定变&#39;&#39;&#39;</span>
</code></pre></div><h4 id="用户交互">用户交互</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;获取用户输入
</span><span class="s1">	input
</span><span class="s1">		input获取到的数据都是字符串类型
</span><span class="s1">
</span><span class="s1">输出结果
</span><span class="s1">	print
</span><span class="s1">      可以一次性输出多个元素，逗号隔开即可
</span><span class="s1">       &#39;&#39;&#39;</span>
</code></pre></div><h4 id="格式化输出">格式化输出</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;占位符  ： </span><span class="si">%s</span><span class="s1">(可以给任意的数据类型占位)。d%(只能给数字占位)
</span><span class="s1">
</span><span class="s1">&#39;my name is </span><span class="si">%s</span><span class="s1"> and my age is s%&#39;  (Eddy, 18)
</span><span class="s1">字符串里有几个占位符，后面给数据的时候就要给出几个真实数据&#39;&#39;&#39;</span>
</code></pre></div><h4 id="运算符">运算符</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;基本运算符
</span><span class="s1">	+
</span><span class="s1">    -
</span><span class="s1">    *
</span><span class="s1">    /
</span><span class="s1">    %
</span><span class="s1">    **
</span><span class="s1">    
</span><span class="s1">增量赋值
</span><span class="s1">	x += 1
</span><span class="s1">    x -= 1
</span><span class="s1">    x *= 1
</span><span class="s1">    x /= 1
</span><span class="s1">    
</span><span class="s1">链式赋值
</span><span class="s1">	a = b = c = 666
</span><span class="s1">    
</span><span class="s1">交叉赋值
</span><span class="s1">	m = 10
</span><span class="s1">    n = 999
</span><span class="s1">交换m 和 n 的数值
</span><span class="s1">	方式一
</span><span class="s1">		利用中间变量
</span><span class="s1">        tum = m
</span><span class="s1">        m = n 
</span><span class="s1">        n = tum
</span><span class="s1">    方式二
</span><span class="s1">    	交叉赋值
</span><span class="s1">        m,n = n,m
</span><span class="s1">        
</span><span class="s1">解压赋值
</span><span class="s1">  l = [11,22,33]
</span><span class="s1">	默认情况下左右两边的个数一定要相等
</span><span class="s1">    有多少个值就要给多少个变量名
</span><span class="s1">  a ,b,c = l
</span><span class="s1">	
</span><span class="s1">    利用*打破变量名数量的限制
</span><span class="s1">    a,*_,b = l
</span><span class="s1">      *_常用来表达无用的数据
</span><span class="s1">       
</span><span class="s1">逻辑运算
</span><span class="s1">	and or not
</span><span class="s1">    
</span><span class="s1">and
</span><span class="s1">	连接多个条件，且必须成立，输出结果才为True，有一个条件不成立直接结束，输出Flase
</span><span class="s1">or
</span><span class="s1">	与and恰恰相反，链接的结果只要一个成立，结果都为True。有一个成立则直接输出结果True
</span><span class="s1">not
</span><span class="s1">	取反   not True = Flase
</span><span class="s1">    
</span><span class="s1">身份运算
</span><span class="s1">	is
</span><span class="s1">    	判断地址是否相等
</span><span class="s1">    ==
</span><span class="s1">    	判断值是否想同
</span><span class="s1">    值相同内存地址可能不同
</span><span class="s1">    内存地址相同值一定相同&#39;&#39;&#39;</span>
    
  
</code></pre></div><h4 id="代码的缩进">代码的缩进</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;python中利用代码的缩进来表示代码的从属关系
</span><span class="s1">并不是所有的代码都可以又子代码的权限
</span><span class="s1">
</span><span class="s1">属于同一个代码的多个子代码，子代码之间的缩进必须是相同的
</span><span class="s1">
</span><span class="s1">遇到冒号说明接下来的代码需要缩进&#39;&#39;&#39;</span>
</code></pre></div><h4 id="流程控制值if判断">流程控制值if判断</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;if的固定句式
</span><span class="s1">	if 条件1:
</span><span class="s1">        代码1
</span><span class="s1">        代码2
</span><span class="s1">    elif 条件2:
</span><span class="s1">        代码1
</span><span class="s1">        代码2
</span><span class="s1">    elif 条件3:
</span><span class="s1">        代码1
</span><span class="s1">        代码2
</span><span class="s1">    else :
</span><span class="s1">        代码1
</span><span class="s1">        代码2
</span><span class="s1">        
</span><span class="s1">那个条件成立就会执行哪个条件的子代码
</span><span class="s1">其他的都不会被执行
</span><span class="s1">所有条件代码中只会被执行一个&#39;&#39;&#39;</span>
</code></pre></div><h1 id="今日内容">今日内容</h1>
<h4 id="if-判断结束">if 判断结束</h4>
<h4 id="循环结构值while循环">循环结构值while循环</h4>
<h4 id="循环结构之for循环">循环结构之for循环</h4>
<h4 id="数据类型的内置方法">数据类型的内置方法</h4>
<h4 id="字符编码">字符编码</h4>
<h1 id="今日内容详细">今日内容详细</h1>
<h4 id="if判断">if判断</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;if的嵌套(代码的缩进以及子代码的从属关系)
</span><span class="s1">eg:
</span><span class="s1">    如果女人的年龄小于28岁且定义为漂亮的则上去要微信
</span><span class="s1">    如果成功则邀请看电影吃饭逛街
</span><span class="s1">    不成功则 打扰了&#39;&#39;&#39;</span>
    
<span class="n">age</span> <span class="o">=</span> <span class="mi">26</span>
<span class="n">is_beautiful</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">is_success</span> <span class="o">=</span> <span class="bp">True</span>
<span class="k">if</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">28</span> <span class="ow">and</span> <span class="n">is_beautiful</span>
	<span class="k">print</span><span class="p">(</span><span class="s1">&#39;小姐姐加个微信&#39;</span><span class="p">)</span>
	<span class="c1">#二次判断</span>
    <span class="k">if</span> <span class="n">is_success</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;我们去吃饭看电影逛街吧&#39;</span><span class="p">)</span>
	<span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;打扰了&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;不好意思认错人了&#39;</span><span class="p">)</span>
</code></pre></div><h4 id="循环结构之while循环">循环结构之while循环</h4>
<p><strong>break   用于结束离他最近的while循环</strong></p>
<p><strong>continue   结束离他最近的本次while循环，直接开始下一次循环</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">while True:
</span><span class="s1">    username = input(&#39;username&gt;&gt;&gt;:&#39;)
</span><span class="s1">    password = input(&#39;password&gt;&gt;&gt;:&#39;)
</span><span class="s1">    #判断用户名密码是否正确，不正确则重新输入
</span><span class="s1">    if username == &#39;Eddy&#39; and password = &#39;123&#39;:
</span><span class="s1">        print(&#39;登录成功&#39;)
</span><span class="s1">    else:
</span><span class="s1">        (&#39;用户名或者密码错误&#39;)
</span><span class="s1">
</span><span class="s1">固定句式
</span><span class="s1">while 条件：
</span><span class="s1">	代码1
</span><span class="s1">    代码2
</span><span class="s1">    ....
</span><span class="s1">    
</span><span class="s1">当条件成立的时候会执行while子代码，子代码运行完毕之后会再次回到条件哦按段除，
</span><span class="s1">判断条件是否成立
</span><span class="s1">如果成立则继续执行，直到条件判断为不成立，我while循环结束
</span><span class="s1">
</span><span class="s1">while + break
</span><span class="s1">当用户输入错误可以反复输入，但是一旦用户输入正确则立马结束while循环
</span><span class="s1">
</span><span class="s1">while True:
</span><span class="s1">    username = input(&#39;username&gt;&gt;&gt;:&#39;)
</span><span class="s1">    password = input(&#39;password&gt;&gt;&gt;:&#39;)
</span><span class="s1">#判断条件用户名和密码是否正确
</span><span class="s1">	if username == &#39;Eddy&#39; and password == &#39;123&#39;:
</span><span class="s1">        print(&#39;登陆成功&#39;)
</span><span class="s1">        #此处立马结束while循环
</span><span class="s1">        break
</span><span class="s1">    else:
</span><span class="s1">        print(&#39;用户名或者密码错误&#39;)
</span><span class="s1">        
</span><span class="s1">while + continue
</span><span class="s1">循环打印1——10
</span><span class="s1">count = 1
</span><span class="s1">while count &lt; 11:
</span><span class="s1">    print(count)
</span><span class="s1">    count += 1
</span><span class="s1">    
</span><span class="s1">循环打印1-10，但是不打印7
</span><span class="s1">count = 1
</span><span class="s1">while count &lt; 11:
</span><span class="s1">    if count == 7:
</span><span class="s1">        count += 1
</span><span class="s1">        不打印直接开始下一次循环
</span><span class="s1">        continue
</span><span class="s1">    print(count)
</span><span class="s1">	count += 1
</span><span class="s1">    
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">while  嵌套
</span><span class="s1">	
</span><span class="s1">while True:
</span><span class="s1">    username = input(&#39;username&gt;&gt;&gt;:&#39;)
</span><span class="s1">    password = input(&#39;password&gt;&gt;&gt;:&#39;)
</span><span class="s1">    # 判断用户名和密码是否正确
</span><span class="s1">    if username == &#39;jason&#39; and password == &#39;123&#39;:
</span><span class="s1">        print(&#39;登录成功&#39;)
</span><span class="s1">        # 进入内部循环
</span><span class="s1">        while True:
</span><span class="s1">            cmd = input(&#39;please input your command&gt;&gt;&gt;:&#39;)
</span><span class="s1">            print(&#39;正在执行您的命令:</span><span class="si">%s</span><span class="s1">&#39;</span><span class="si">%c</span><span class="s1">md)
</span><span class="s1">            if cmd == &#39;q&#39;:
</span><span class="s1">                print(&#39;欢迎下次使用&#39;)
</span><span class="s1">                break
</span><span class="s1">        break
</span><span class="s1">    else:
</span><span class="s1">        print(&#39;用户名或密码错误&#39;)
</span><span class="s1">        &#39;&#39;&#39;</span>
</code></pre></div><h4 id="for-循环">for 循环</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">for 循环能够做到的事情while循环都可以实现
</span><span class="s2">但是for循环比while循环语法更加简单
</span><span class="s2">
</span><span class="s2">while循环打印1-10
</span><span class="s2">count = 1
</span><span class="s2">while count &lt; 11:
</span><span class="s2">    print(count)
</span><span class="s2">    count += 1
</span><span class="s2">    
</span><span class="s2">for循环打印1-10
</span><span class="s2">for i in range(1, 11):
</span><span class="s2">    print(i)
</span><span class="s2">    
</span><span class="s2">for i in range(11):
</span><span class="s2">    print(i)
</span><span class="s2">    
</span><span class="s2">range(1, 11) 会产生一个范围序列  可以堪称为[1,2,3,4,5,6,7,8,9,10]  顾头不顾尾
</span><span class="s2">range(11)  括号里面如果之后一个数字，那么开头默认是从0开始
</span><span class="s2">
</span><span class="s2">l = [111, 222, 333, 444, 555, 666, 777, 888]
</span><span class="s2">依次挨个取出列表l中的值
</span><span class="s2"> while循环
</span><span class="s2"> count = 0
</span><span class="s2"> while count &lt; 8:
</span><span class="s2">     print(l[count])
</span><span class="s2">     count += 1
</span><span class="s2">
</span><span class="s2"> for循环
</span><span class="s2">for num in l:
</span><span class="s2">    print(num)
</span><span class="s2">    
</span><span class="s2">for循环不需要你自己给结束条件，for循环内部会自动结束
</span><span class="s2">
</span><span class="s2">使用for循环打印字符串中的字符
</span><span class="s2"> s = &#39;hello world&#39;
</span><span class="s2"> for i in s:
</span><span class="s2">     print(i)
</span><span class="s2">
</span><span class="s2">        
</span><span class="s2">d = {
</span><span class="s2">    &#39;username&#39;: &#39;jason&#39;,
</span><span class="s2">    &#39;password&#39;: 123,
</span><span class="s2">    &#39;hobby&#39;: [111, 222]
</span><span class="s2">}
</span><span class="s2"> for循环字典的时候只会拿到字典的key
</span><span class="s2">for i in d:
</span><span class="s2">    print(i)
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="数据类型的内置方法-1">数据类型的内置方法</h4>
<pre><code class="language-pythom" data-lang="pythom">&quot;&quot;&quot;
整型 int
	类型转换
    res = '123'  此处res为字符串类型
    res = int(res)  此处res则转换为整型
转换的时候需要注意 待转换的对象必须提前符合要转的数据类型格式    


浮点型 float
	res2 = '11.11' 此处为字符串
    res2 = float(res2)  此处则转为浮点型
    #res2 = int(res2)  不可转
    
字符串 str
s = 'hello world'
类型转换  所有的数据类型都可以转换为字符串
str(123)
str(11.11)
str([1,2,3,4,5])


索引取值
s = 'hello world'
print(s[0])   &gt;&gt;&gt;&gt;&gt;   h


切片取值
s = 'hello world'
print(s[0,3])    &gt;&gt;&gt;&gt;   h e l
从索引0取到索引2为止，顾头不顾尾
步长 (默认步长为1)
print(s[0,3,2])  &gt;&gt;&gt;&gt;&gt;  h l o  
步长为2 ，表示隔一个取一个值


统计长度   关键字 len
print (len(s)) &gt;&gt;&gt;&gt;&gt;  11



移除字符串中的首尾字符或空格   关键字 strip
username = input('username&gt;&gt;&gt;:').strip()
 if username == 'jason':
     print('登录')
 else:
     print('失败')
 name = '   jason   '
 print(len(name))

 name = name.strip()  # strip()  移除字符串首尾的空格
 print(len(name))
 name1 = '&amp;&amp;jas&amp;&amp;on&amp;&amp;'
 print(name1.strip('&amp;'))  # 括号内也可以自己指定移除首尾的字符
 print(name1.lstrip('&amp;'))  # jas&amp;&amp;on&amp;&amp;
 print(name1.rstrip('&amp;'))  # &amp;&amp;jas&amp;&amp;on
 
 
 按照指定的字符切割字符串  关键字 split
 name_info = 'jason|123|read|China'
 res = name_info.split('|')   split切割之后是一个列表数据类型
 print(res)   &gt;&gt;&gt;&gt;&gt;&gt;    ['jason', '123', 'read', 'China']
  
 
 res1 = name_info.lsplit('|', maxsplit=1)   #lsplit 从左往右切割指定个数的字符
 print(res1)  &gt;&gt;&gt;&gt;&gt;&gt;     ['jason', '123|read|China']
 
 
 res2 = name_info.rsplit('|',maxsplit=2)    #rsplit  从右往左切割指定个数的字符
 print(res2)  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    ['jason|123', 'read', 'China']
 
 
 
统计某个字符出现的个数     关键字  count
 info = 'name n a asd asdjklj a dsa dajd  dasd'
 print(info.count('a'))       &gt;&gt;&gt;&gt;&gt;   8
 
 
求索引值    关键字 index 
 info1 = 'jason' 求出字符o的索引值
 print(info1.index('o'))      &gt;&gt;&gt;&gt;&gt;&gt; 3
 
 
字符串转大小写         关键字 upper  lower
 info = 'My NAME iS JasOn'
 print(info.upper())  # MY NAME IS JASON
 print(info.lower())  # my name is jason


 字符串的格式化输出d    关键字 format
 方式1  跟占位符
 res = 'my name is {} my age is {}'
 print(res.format('jason',18))
 方式2  指定索引 并且前后个数可以不一致
 res = 'my name is {0} my age is {1} {0}{0}{0}'
 print(res.format('jason',18))
 方式3: 指名道姓 并且前后个数可以不一致
 res = 'my name is {name} my age is {age} {name}{name}{name}'
 print(res.format(name='jason', age=18))




 字典类型
 类型转换
 res = dict(([1,2],(111,222)))
 print(res)  # {1: 2, 111: 222}
d = {
    'username': 'jason',
    'password': 123,
    'hobby': [111, 222, 333]
}
 字典取值   关键字 get
 print(d['username'])
 print(d.get('username'))
 print(d['xxx'])  # 没有直接报错
 print(d.get('xxx'))  # None  不会报错 返回None提示信息

 字典k:v键值对的个数  一样使用关键字len进行统计
 print(len(d))  # 3

 修改字典  键存在则修改 键不存在则添加新的  关键字 updata
 d.update({'username': 'jasonDSB', 'age': 18})
 print(d)
 d['username'] = 'JasonNB'  # 值存在修改
 d['age'] = 18  # 键存在修改
 print(d)  # 无则添加


 获取字典所有key
d = {
    'username': 'jason',
    'password': 123,
    'hobby': [111, 222, 333]
}
 print(d.keys())  # dict_keys(['username', 'password', 'hobby'])
 获取字典所有value
 print(d.values())  # dict_values(['jason', 123, [111, 222, 333]])
 获取字典的键值对 组织成元组的形式返回
 print(d.items())  # dict_items([('username', 'jason'), ('password', 123), ('hobby', [111, 222, 333])])
 
 
 元组
t = (1, 2, 3, 4, 5, 6)
 print(len(t))
 
元组内元素不能被修改
 t[0] = 111  # 报错
 
 
拔高题
 t1 = (111, 222, 333, [11, 22])
 t1[-1].append(33)
 print(t1)  # (111, 222, 333, [11, 22, 33])

A 报错
B (111, 222, 333, [11, 22, 33]) &gt;&gt;&gt;&gt; 正确   元组内的数值不能直接被修改但是元组内的	C (111, 222, 333, [11, 22,], 33)			表的值是可以修改的



集合
 集合内元素必须是不可变类型
 s1 = {[111,222],1,2,3,4}
 print(s1)  # 报错 列表为可变类型 所以报错
 去重  集合内不可能出现相同的元素  自动去重
 s1 = {1,2,2,2,2,3,4,3,4,5,6,7,6,4,2,3,4,5,6,5,4}
 print(s1)  # {1, 2, 3, 4, 5, 6, 7}
 l = ['jason', 'jason', 'egon', 'tony', 'jason']

将列表转换成集合
 s1 = set(l)
 l = list(s1)
 print(l)


关系运算
f1 = {'jason', 'egon', 'tony', 'tank'}
f2 = {'jason', 'egon', 'kevin', 'tom'}
 求两者共同的好友
print(f1 &amp; f2)  # {'jason', 'egon'}
 求两者所有的好友
print(f1 | f2)  # {'tony', 'egon', 'tank', 'kevin', 'tom', 'jason'}\
 求用户1的独有好友
print(f1 - f2)  # {'tony', 'tank'}
 求用户2的独有好友
print(f2 - f1)  # {'kevin', 'tom'}&quot;&quot;&quot;
</code></pre><h4 id="作业">作业</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;1.根据用户输入的用户名的不同打印不同的身份信息
</span><span class="s2">
</span><span class="s2">jason --&gt; 超级管理员
</span><span class="s2">tom  --&gt; 普通管理员
</span><span class="s2">jack,rain --&gt; 业务主管
</span><span class="s2">egon --&gt; 保洁阿姨
</span><span class="s2">其他 --&gt; 普通用户
</span><span class="s2">解1&#34;&#34;&#34;</span>
<span class="n">user_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;用户名:&#39;</span><span class="p">)</span>
<span class="n">pass_word</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;密码: &#39;</span><span class="p">)</span>
<span class="k">if</span> <span class="n">user_name</span> <span class="o">==</span> <span class="s1">&#39;jason&#39;</span> <span class="ow">and</span> <span class="n">pass_word</span> <span class="o">==</span> <span class="s1">&#39;123&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;超级管理员&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">user_name</span> <span class="o">==</span> <span class="s1">&#39;tom&#39;</span> <span class="ow">and</span> <span class="n">pass_word</span> <span class="o">==</span> <span class="s1">&#39;123&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;普通管理员&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">user_name</span> <span class="o">==</span> <span class="s1">&#39;jack, rain&#39;</span> <span class="ow">and</span> <span class="n">pass_word</span> <span class="o">==</span> <span class="s1">&#39;123&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;业务主管&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">user_name</span> <span class="o">==</span> <span class="s1">&#39;egon&#39;</span> <span class="ow">and</span> <span class="n">pass_word</span> <span class="o">==</span> <span class="s1">&#39;123&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;保洁阿姨&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;普通用户&#39;</span><span class="p">)</span>

    
    
<span class="s1">&#39;&#39;&#39;2.编写用户登录功能成功直接退出程序，不成功只有三次尝试机会(尝试)&#39;&#39;&#39;</span>
<span class="n">user_name</span> <span class="o">=</span> <span class="s1">&#39;Eddy&#39;</span>
<span class="n">pass_word</span> <span class="o">=</span> <span class="s1">&#39;123&#39;</span>
<span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">user_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;user_name&gt;&gt;&gt;:&#39;</span><span class="p">)</span>
    <span class="n">pass_word</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;pass_word&gt;&gt;&gt;:&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">user_name</span> <span class="o">==</span> <span class="s1">&#39;Eddy&#39;</span> <span class="ow">and</span> <span class="n">pass_word</span> <span class="o">==</span> <span class="s1">&#39;123&#39;</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;登录成功&#39;</span><span class="p">)</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">break</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;用户名或密码错误&#34;</span><span class="p">)</span>
        <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
    	<span class="k">print</span><span class="p">(</span><span class="s1">&#39;剩余输入次数:&#39;</span><span class="p">,</span> <span class="mi">3</span> <span class="o">-</span> <span class="n">num</span><span class="p">)</span>
    	<span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;失败次数过多，稍后再试&#39;</span><span class="p">)</span>
        <span class="k">break</span>

        
<span class="s1">&#39;&#39;&#39;3.关系运算
</span><span class="s1">　　有如下两个集合，pythons是报名python课程的学员名字集合，linuxs是报名linux课程的学员名字集合
</span><span class="s1">　　pythons={&#39;jason&#39;,&#39;egon&#39;,&#39;kevin&#39;,&#39;ricky&#39;,&#39;gangdan&#39;,&#39;biubiu&#39;}
</span><span class="s1">　　linuxs={&#39;kermit&#39;,&#39;tony&#39;,&#39;gangdan&#39;}
</span><span class="s1">　　1. 求出即报名python又报名linux课程的学员名字集合
</span><span class="s1">　　2. 求出所有报名的学生名字集合
</span><span class="s1">　　3. 求出只报名python课程的学员名字
</span><span class="s1">　　4. 求出没有同时这两门课程的学员名字集合&#39;&#39;&#39;</span>

        <span class="n">common_student</span> <span class="o">=</span> <span class="p">(</span><span class="n">pythons</span> <span class="o">&amp;</span> <span class="n">linuxs</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">common_student</span><span class="p">)</span>

        <span class="n">all_student</span> <span class="o">=</span> <span class="p">(</span><span class="n">pythons</span> <span class="o">|</span> <span class="n">linuxs</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">all_student</span><span class="p">)</span>

        <span class="n">alone_pstudent</span> <span class="o">=</span> <span class="p">(</span><span class="n">pythons</span> <span class="o">-</span> <span class="n">linuxs</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">alone_pstudent</span><span class="p">)</span>

        <span class="n">alone_lstudent</span> <span class="o">=</span> <span class="p">(</span><span class="n">linuxs</span> <span class="o">^</span> <span class="n">pythons</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">alone_lstudent</span><span class="p">)</span>
<span class="s1">&#39;&#39;&#39;4.对列表去重并保留原来的顺序(思考)&#39;&#39;&#39;</span>
	<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">88</span><span class="p">,</span><span class="mi">99</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">22</span><span class="p">]</span>
    
    

</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>用户交互、格式化输出、运算符、流程控制</title>
			<link>https://Eddy-622.github.io/posts/%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E8%BF%90%E7%AE%97%E7%AC%A6%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-/</link>
			<pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E8%BF%90%E7%AE%97%E7%AC%A6%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-/</guid>
			<description>10.29内容回顾   代码的注释
&amp;#39;&amp;#39;&amp;#39;1.# 单行注释2.&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;,&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34; 多行注释在pycharm中的快捷键ctrl+? 注释快捷键，再次激活取消注释&amp;#39;&amp;#39;&amp;#39;  变量
&amp;#39;&amp;#39;&amp;#39;语法规范变量名 赋值符号 变量的值&amp;#39;&amp;#39;&amp;#39;name = &amp;#39;Eddy&amp;#39;&amp;#34;&amp;#34;&amp;#34;遇到赋值符号先看符号右边的再看符号左边的&amp;#34;&amp;#34;&amp;#34;# 情况1  name = &amp;#39;jason&amp;#39;name = &amp;#39;egon&amp;#39;name = &amp;#39;tony&amp;#39;&amp;#39;&amp;#39;&amp;#39;name依次被赋予 jason egon tony 三个值，但是最后只能指向一个值所有此时name对应的值为 tony&amp;#39;&amp;#39;&amp;#39;# 情况2 name = &amp;#39;jason&amp;#39;name1 = namename2 = name&amp;#39;&amp;#39;&amp;#39;name被赋予Jason，name1,name2 同时被赋予name的值所有 name1 = name2 = name = Jason&amp;#39;&amp;#39;&amp;#39;  变量的命名规范(必须遵守)
&amp;#39;&amp;#39;&amp;#39;1.只能包含数字、字母、下划线2.数字不能开头、下划线也尽量不要开头(隐藏变量)3.</description>
			<content type="html"><![CDATA[<h1 id="1029内容回顾">10.29内容回顾</h1>
<ul>
<li>
<p>代码的注释</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;1.#   单行注释
</span><span class="s1">2.&#39;&#39;&#39;&#39;&#39;&#39;,&#34;&#34;&#34;&#34;&#34;&#34;  多行注释
</span><span class="s1">在pycharm中的快捷键ctrl+?   注释快捷键，再次激活取消注释&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>变量</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;语法规范
</span><span class="s1">变量名 赋值符号 变量的值&#39;&#39;&#39;</span>
<span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Eddy&#39;</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">遇到赋值符号先看符号右边的
</span><span class="s2">再看符号左边的
</span><span class="s2">&#34;&#34;&#34;</span>
<span class="c1"># 情况1 </span>
<span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;jason&#39;</span>
<span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;egon&#39;</span>
<span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;tony&#39;</span>
<span class="s1">&#39;&#39;&#39;name依次被赋予 jason  egon tony 三个值，但是最后只能指向一个值
</span><span class="s1">所有此时name对应的值为 tony&#39;&#39;&#39;</span>
<span class="c1"># 情况2</span>
<span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;jason&#39;</span>
<span class="n">name1</span> <span class="o">=</span> <span class="n">name</span>
<span class="n">name2</span> <span class="o">=</span> <span class="n">name</span>
<span class="s1">&#39;&#39;&#39;name被赋予Jason，name1,name2 同时被赋予name的值
</span><span class="s1">所有 name1 = name2 = name = Jason&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>变量的命名规范(必须遵守)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;1.只能包含数字、字母、下划线
</span><span class="s1">2.数字不能开头、下划线也尽量不要开头(隐藏变量)
</span><span class="s1">3.变量名一定要做到见名知意
</span><span class="s1">4.变量名不能跟python里面的关键字冲突&#39;&#39;&#39;</span>
  
<span class="k">print</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
<span class="k">print</span> <span class="o">=</span> <span class="s1">&#39;hello world&#39;</span>  <span class="c1"># 不能使用关键字作为变量名</span>
<span class="k">print</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
<span class="s1">&#39;&#39;&#39;print被作为变量名赋值之后则他会失去原本打印的功能，所有
</span><span class="s1">变量名不可以是关键字字符&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>变量的命名风格</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;1.下划线
</span><span class="s1">  user_name = &#39;jason&#39;
</span><span class="s1">2.驼峰体
</span><span class="s1">  userName = &#39;jason&#39;
</span><span class="s1">    UserName = &#39;jason&#39;&#39;&#39;&#39;</span>
<span class="s1">&#39;&#39;&#39;python推荐使用下划线，Js推荐使用驼峰体&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>常量</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;在python中没有真正意义上的常量，我们墨守成规的将全大写的变量名看成是常量
</span><span class="s1">HOST = &#39;127.0.0.1&#39;
</span><span class="s1">PORT = 6379
</span><span class="s1">在其他编程语言中如js是有真正意义上的常量的(定义之后就无法修改了)&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>PEP8规范</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">1.赋值符号左右两边都应该有空格
</span><span class="s1">2.逗号后面应该有空格
</span><span class="s1">3.注释符号与文字之间应该有空格
</span><span class="s1">4.注释和代码在一行的情况下注释符号需要与代码之间空两格
</span><span class="s1">&#39;&#39;&#39;</span>
  
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">先在pycharm中书写代码，你可以不考虑规范
</span><span class="s2">然后利用pycharm自动格式化代码的功能，学习它帮你格式化了哪些地方
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div></li>
<li>
<p>查看数据类型</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="nb">type</span><span class="p">()</span>
</code></pre></div></li>
<li>
<p>数据类型</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">整型int
</span><span class="s1">age = 18
</span><span class="s1">  
</span><span class="s1">浮点型float
</span><span class="s1">salary = 11.11
</span><span class="s1">  
</span><span class="s1">字符串str
</span><span class="s1">&#39;&#39;&#39;</span>
<span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;jason&#39;</span>
<span class="n">name1</span> <span class="o">=</span> <span class="s2">&#34;jason1&#34;</span>
<span class="n">name2</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;jason2&#39;&#39;&#39;</span>
<span class="n">name3</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;jason3&#34;&#34;&#34;</span>
<span class="c1"># 小操作</span>
<span class="n">name</span> <span class="o">+</span> <span class="n">name1</span> 
<span class="n">name</span> <span class="o">*</span> <span class="mi">10</span>
<span class="s1">&#39;&#39;&#39;
</span><span class="s1">列表list
</span><span class="s1">l1 = [&#39;jason&#39;, 123, 11.11, [1, 2, 3]]
</span><span class="s1"># 索引(index)取值:在IT行业索引都是从0开始的
</span><span class="s1">l1[0]
</span><span class="s1"># 针对嵌套问题
</span><span class="s1">l1[0][2][1]
</span><span class="s1">  
</span><span class="s1">字典dict
</span><span class="s1">字典的key一般情况下都是字符串，字典的value可以是任意数据类型
</span><span class="s1">d = {
</span><span class="s1">    &#39;name&#39;:&#39;jason&#39;,
</span><span class="s1">    &#39;age&#39;:123,
</span><span class="s1">    &#39;hobby&#39;:[1, 2, 3]
</span><span class="s1">}
</span><span class="s1"># 字典的取值
</span><span class="s1">d[&#39;name&#39;]
</span><span class="s1">d.get(&#39;name&#39;)
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div></li>
</ul>
<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>数据类型之布尔值</li>
<li>数据类型之元组</li>
<li>数据类型之集合</li>
<li>与用户交互及运算符</li>
<li>数据类型的内置方法</li>
<li>流程控制</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h3 id="数据类型之布尔值bool">数据类型之布尔值bool</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">布尔值总共就两种情况
</span><span class="s1">True
</span><span class="s1">False
</span><span class="s1">在逻辑运算中用来判断事物的对错和是否可行
</span><span class="s1">(流程控制中会学习)
</span><span class="s1">&#39;&#39;&#39;</span>
<span class="s1">&#39;&#39;&#39;
</span><span class="s1">在python中，如果一个变量的值是布尔值
</span><span class="s1">那么我们会习惯性的将变量名起名为is开头
</span><span class="s1">is_right = True
</span><span class="s1">is_status = True
</span><span class="s1">is_delete = True
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h3 id="数据类型之元组tuple">数据类型之元组tuple</h3>
<p>符号：（）</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">元组与列表类似，也是可以存多个任意类型的元素，
</span><span class="s1">不同之处在于元组的元素不能修改，
</span><span class="s1">即元组相当于不可变的列表，
</span><span class="s1">用于记录多个固定不允许修改的值，单纯用于取
</span><span class="s1">目前你只需要知道元组就相当于不可变的列表
</span><span class="s1">元组的符号是()
</span><span class="s1">&#39;&#39;&#39;</span>
<span class="n">name</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">元组的小坑
</span><span class="s2">
</span><span class="s2"># t = (1)
</span><span class="s2"># print(type(t))  # &lt;class &#39;int&#39;&gt;
</span><span class="s2"># t1 = (&#39;jason&#39;)
</span><span class="s2"># print(type(t1))  # &lt;class &#39;str&#39;&gt;
</span><span class="s2"># 如果元组里面只有一个元素，那么你也需要将逗号加上
</span><span class="s2">t = (1,)
</span><span class="s2">print(type(t))  # &lt;class &#39;tuple&#39;&gt;
</span><span class="s2">t1 = (&#39;jason&#39;,)
</span><span class="s2">print(type(t1))  # &lt;class &#39;tuple&#39;&gt;
</span><span class="s2">&#39;&#39;&#39;
</span><span class="s2">容器类型:能够存储多个数据的数据类型,eg:list、tuple、dict
</span><span class="s2">针对容器类型，如果里面只有一个元素
</span><span class="s2">我们也推荐你将逗号加上
</span><span class="s2">&#39;&#39;&#39;
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h3 id="数据类型之集合set">数据类型之集合set</h3>
<p>符号：{}</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">集合主要是用来做以下两种需求
</span><span class="s1">1.去重
</span><span class="s1">	去掉重复的元素
</span><span class="s1">2.关系运算
</span><span class="s1">	共同好友、共同关注
</span><span class="s1">集合也可以存放多个数据，数据与数据之间逗号隔开，数据必须是不可变类型
</span><span class="s1">集合的符号也是{}
</span><span class="s1">s = {1, 2, 3, 4, 5, 6}
</span><span class="s1">print(type(s))
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h3 id="可变类型与不可变类型">可变类型与不可变类型</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">可变类型
</span><span class="s1">	值改变内存地址不变			列表
</span><span class="s1">
</span><span class="s1">不可变类型
</span><span class="s1">	值改变内存地址肯定变		   整型 浮点型 字符串
</span><span class="s1">&#39;&#39;&#39;</span>

<span class="c1"># 如何查看值的内存地址</span>

<span class="nb">id</span><span class="p">()</span> 
<span class="c1"># 返回一串数字，该数字你可以直接看成是内存地址</span>
<span class="c1"># name = &#39;jason&#39;</span>
<span class="c1"># print(id(name))  # 2134060606104</span>
<span class="c1"># name = &#39;jasonDSB&#39;</span>
<span class="c1"># print(id(name))  # 2134061440944</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">l</span><span class="p">))</span>
<span class="c1"># 修改列表元素数值的方式</span>
<span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">666</span>  <span class="c1"># 将列表索引0的位置的值修改为666</span>
<span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">===&gt;</span>  <span class="mi">666</span>
</code></pre></div><h3 id="与用户交互">与用户交互</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">输入信息
</span><span class="s1">输出信息
</span><span class="s1">
</span><span class="s1">获取用户输入
</span><span class="s1">	input()
</span><span class="s1">输出结果
</span><span class="s1">	print()
</span><span class="s1">    
</span><span class="s1">input(&#39;请输入您的用户名&gt;&gt;&gt;:&#39;)
</span><span class="s1">将input获取到的用户输入赋值给变量name
</span><span class="s1">
</span><span class="s1">name = input(&#39;请输入您的用户名&gt;&gt;&gt;:&#39;)
</span><span class="s1">
</span><span class="s1">print(type(name))  ===&gt; str&#39;&#39;&#39;</span>
<span class="s1">&#39;&#39;&#39;注意input获取到的用户输入都是字符串类型&#39;&#39;&#39;</span>


<span class="c1"># 输出单个数据</span>
<span class="k">print</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
<span class="c1"># 输出多个数据</span>
<span class="c1"># print(&#39;jason&#39;, &#39;egon&#39;, &#39;kevin&#39;)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;jason&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;egon&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;kevin&#39;</span><span class="p">)</span>
<span class="c1"># print(&#34;aaaa&#34;,end=&#39;&#39;)</span>
<span class="c1"># print(&#34;bbbb&#34;,end=&#39;&amp;&#39;)</span>
<span class="c1"># print(&#34;cccc&#34;,end=&#39;@&#39;)</span>
</code></pre></div><h3 id="格式化输出">格式化输出</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">一段文本当中，针对后续可能被替换的部分，我们在定义该字符串的时候需要提前先用占位符占位
</span><span class="s1">占位符:</span><span class="si">%s</span><span class="s1">(任意数据类型均可)、</span><span class="si">%d</span><span class="s1">(只能给数字占位)
</span><span class="s1">&#39;&#39;&#39;</span>

<span class="c1"># 字符串里面有几个%s就表示后续可以替换几个文本</span>
<span class="n">info</span> <span class="o">=</span> <span class="s1">&#39;亲爱的</span><span class="si">%s</span><span class="s1">你好！你</span><span class="si">%s</span><span class="s1">月的话费是</span><span class="si">%s</span><span class="s1">，余额是</span><span class="si">%s</span><span class="s1">&#39;</span>
<span class="c1"># 将字符串格式化之后的结果赋值给变量res</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">info</span> <span class="o">%</span> <span class="p">(</span><span class="s1">&#39;jason&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100000000000000</span><span class="p">)</span>
<span class="n">res1</span> <span class="o">=</span> <span class="n">info</span> <span class="o">%</span> <span class="p">(</span><span class="s1">&#39;egon&#39;</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="o">-</span><span class="mi">11110</span><span class="p">)</span>
<span class="s1">&#39;&#39;&#39;注意</span><span class="si">%s</span><span class="s1">的使用 字符串里面事先有几个</span><span class="si">%s</span><span class="s1">后续在替换的时候就需要给几个内容&#39;&#39;&#39;</span>
</code></pre></div><h3 id="运算符">运算符</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2"># 算数运算符
</span><span class="s2">	+
</span><span class="s2">    -
</span><span class="s2">    *
</span><span class="s2">    /
</span><span class="s2">    **
</span><span class="s2">    
</span><span class="s2"># 比较运算符
</span><span class="s2">	&gt;
</span><span class="s2">    &lt;
</span><span class="s2">    &gt;=
</span><span class="s2">    &lt;=
</span><span class="s2">    print(1 &lt;= 2)  # True  表示判断正确
</span><span class="s2">	print(1 &gt; 5)  # False  表示判断错误
</span><span class="s2"> 
</span><span class="s2"># 赋值运算符
</span><span class="s2">	name = &#39;jason&#39;
</span><span class="s2"> 
</span><span class="s2"># 增量赋值(掌握)
</span><span class="s2">	# 增量赋值
</span><span class="s2">    x += 1  # x = x + 1
</span><span class="s2">    x += 100  # x = x + 100
</span><span class="s2">    x -= 1  # x = x - 1
</span><span class="s2">    x *= 1  # x = x * 1
</span><span class="s2">    x /= 1  # x = x / 1
</span><span class="s2">  
</span><span class="s2"># 链式赋值(掌握)
</span><span class="s2">	# name = &#39;jason&#39;
</span><span class="s2">    # name1 = name
</span><span class="s2">    # name2 = name
</span><span class="s2">    # 链式赋值
</span><span class="s2">    name = name1 = name2 = &#39;jason&#39;
</span><span class="s2">    print(name,name1,name2)
</span><span class="s2">    
</span><span class="s2"># 交叉赋值(掌握)
</span><span class="s2">	m = 111
</span><span class="s2">    n = 999
</span><span class="s2">    # 将m和n互换
</span><span class="s2">    # m = n
</span><span class="s2">    # n = m
</span><span class="s2">    # print(m,n)  # 错误示范
</span><span class="s2">
</span><span class="s2">    # 方式1:通过中间变量
</span><span class="s2">    # tmp = m
</span><span class="s2">    # m = n
</span><span class="s2">    # n = tmp
</span><span class="s2">    # print(m,n)
</span><span class="s2">     &#39;&#39;&#39;交叉赋值
</span><span class="s2">    m, n = n, m
</span><span class="s2">    print(m, n)&#39;&#39;&#39;
</span><span class="s2">   
</span><span class="s2"># 解压赋值(重要)
</span><span class="s2">	name_list = [&#39;jason&#39;, &#39;egon&#39;, &#39;kevin&#39;, &#39;tony&#39;]
</span><span class="s2">    # 将列表中所有的名字取出分别赋值给不同的变量
</span><span class="s2">    # name1 = name_list[0]
</span><span class="s2">    # name2 = name_list[1]
</span><span class="s2">    # name3 = name_list[2]
</span><span class="s2">    # name4 = name_list[3]
</span><span class="s2">    # print(name1,name2,name3,name4)
</span><span class="s2">    # 解压赋值
</span><span class="s2">    # name1, name2, name3, name4 = name_list
</span><span class="s2">    # print(name1, name2, name3, name4)
</span><span class="s2">    # 扩展知识点 了解即可
</span><span class="s2">&#34;&#34;&#34;</span>    <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    注意事项
</span><span class="s1">    1.解压赋值默认情况下左右变量的变量名和变量的值个数要相等
</span><span class="s1">    2.可以借助于符号*来打破相等的限制
</span><span class="s1">    &#39;&#39;&#39;</span>
    <span class="c1"># *会将多余没有被解压的元素统一组织成列表的形式赋值给*后面的变量名</span>
   <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    eg： 
</span><span class="s1">     name, *arg = name_list
</span><span class="s1">     print(name, arg)  # jason [&#39;egon&#39;, &#39;kevin&#39;, &#39;tony&#39;]
</span><span class="s1">     name, *_, name1 = name_list
</span><span class="s1">     print(name, _, name1)  # jason [&#39;egon&#39;, &#39;kevin&#39;] tony
</span><span class="s1">    &#39;&#39;&#39;</span>


<span class="c1"># 逻辑运算符(重要)</span>
<span class="s1">&#39;&#39;&#39;
</span><span class="s1">and、or和not
</span><span class="s1">        and的意思为“而且”，所以and运算符会链接两个布尔值，如果两个布尔值
</span><span class="s1">        都是True，那么运算结果也为True；两边分布有一个False，那么结果就是false
</span><span class="s1">        所以当and表达式左边结果为FALSE的时候，右边的表达式不论是什么运算结果都
</span><span class="s1">        将是false，运算时右边的值将会被跳过，根本不会被执行（短路处理）。
</span><span class="s1">        or的意思为或者，所以or连接的的也会是两个布尔值，如果两个布尔值有任意一个是
</span><span class="s1">        true，那么运算结果就是true，当然or也有短路功能，当左边为true的情况下右边的
</span><span class="s1">        表达式根本不会被执行。
</span><span class="s1">        not运算符的右边会跟一个布尔值，他的作用是得到与该布尔值相反的值，
</span><span class="s1">        也就是说当not后面的布尔值是 TRUE,那么运算结果就是FALSE,相反同理。
</span><span class="s1"> &#39;&#39;&#39;</span>
        
    <span class="s1">&#39;&#39;&#39; 
</span><span class="s1">    !=  不等于
</span><span class="s1">    res = 2 &gt; 1 and 1 != 1 and True and 3 &gt; 2
</span><span class="s1">    print(res)  # False
</span><span class="s1">    如果一个判断语句里面都是and，那么判断起来其实很方便
</span><span class="s1">    你只需要从前往后一个个看，只要遇到一个不成立的后面就不用看了
</span><span class="s1">    &#39;&#39;&#39;</span>
    
    
    <span class="n">res</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="ow">or</span> <span class="mi">1</span> <span class="o">!=</span> <span class="mi">1</span> <span class="ow">or</span> <span class="bp">True</span> <span class="ow">or</span> <span class="mi">3</span> <span class="o">&gt;</span> <span class="mi">2</span> 
	<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>  <span class="c1"># True</span>
    
    <span class="k">print</span><span class="p">(</span><span class="ow">not</span> <span class="n">res</span><span class="p">)</span>  <span class="c1"># False</span>
    
    <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    注意上述三个运算符在混合使用的时候是有优先级的
</span><span class="s1">    但是我们不应该将优先级的判断交给用户，而应该使用括号的形式
</span><span class="s1">    将优先级在代码层面就区分开，这样的话我们在判断的时候也会更加的方便
</span><span class="s1">    &#39;&#39;&#39;</span>
    <span class="n">res</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="ow">and</span> <span class="mi">4</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="ow">or</span> <span class="p">((</span><span class="mi">1</span> <span class="o">==</span> <span class="mi">3</span> <span class="ow">and</span> <span class="s1">&#39;x&#39;</span> <span class="o">==</span> <span class="s1">&#39;x&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="mi">3</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>  <span class="c1"># False</span>
    
<span class="c1"># 成员运算  in</span>
	<span class="s1">&#39;&#39;&#39;
</span><span class="s1">	判断某个个体在不在某个整体内
</span><span class="s1">    eg:判断李强在不在我们班级学生名单中
</span><span class="s1">    name_list1 = [&#39;jason&#39;,&#39;egon&#39;,&#39;tony&#39;,&#39;kevin&#39;]
</span><span class="s1">    # 判断tom在不在列表内
</span><span class="s1">    print(&#39;tom&#39; in name_list1)  # False
</span><span class="s1">    # 取反
</span><span class="s1">    print(&#39;tom&#39; not in name_list1)  # True
</span><span class="s1">    s1 = &#39;hello world&#39;
</span><span class="s1">    print(&#39;h&#39; in s1)  # True
</span><span class="s1">    &#39;&#39;&#39;</span>
 
<span class="c1"># 身份运算</span>
	<span class="s1">&#39;&#39;&#39;
</span><span class="s1">	is	判断两者内存地址是否一样
</span><span class="s1">    ==  判断两者值是否一样
</span><span class="s1">   	值相同内存地址可能不同，内存地址相同值肯定相同
</span><span class="s1">    
</span><span class="s1">    l1 = [&#39;jason&#39;,&#39;egon&#39;,&#39;kevin&#39;]
</span><span class="s1">    l2 = [&#39;jason&#39;,&#39;egon&#39;,&#39;kevin&#39;]
</span><span class="s1">    # print(id(l1),id(l2))  # 2455183599432 2455183600136 值相同，地址不同
</span><span class="s1">    &#39;&#39;&#39;</span>
    
    
    <span class="c1"># 判断值是否相等</span>
    <span class="k">print</span><span class="p">(</span><span class="n">l1</span> <span class="o">==</span> <span class="n">l2</span><span class="p">)</span>  <span class="c1"># True</span>
    <span class="c1"># 判断地址是否相等</span>
    <span class="k">print</span><span class="p">(</span><span class="n">l1</span> <span class="ow">is</span> <span class="n">l2</span><span class="p">)</span>  <span class="c1"># False</span>
</code></pre></div><h3 id="流程控制">流程控制</h3>
<p><strong>关键字 ： if</strong>       判断条件是否满足</p>
<p>​				<strong>elif</strong>     当不满足if条件是流程进入elif</p>
<p>​				<strong>else</strong>   以上都不满足条件时就走else，兜底的</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">流程控制即控制流程，具体指控制程序的执行流程，而程序的执行流程分为三种结构：
</span><span class="s1">	顺序结构（之前我们写的代码都是顺序结构）
</span><span class="s1">    	从上到下执行你写的代码
</span><span class="s1">        
</span><span class="s1">    分支结构（用到if判断）
</span><span class="s1">    	根据条件的不同执行不同的操作
</span><span class="s1">        
</span><span class="s1">    循环结构（用到while与for）
</span><span class="s1">    	重复执行某一段代码(操作)
</span><span class="s1">        
</span><span class="s1">   
</span><span class="s1">分支结构（用到if判断）
</span><span class="s1">    	根据条件的不同执行不同的操作
</span><span class="s1">&#39;&#39;&#39;</span>
    
<span class="c1"># 如果女人的年龄大于40岁 叫阿姨</span>
<span class="c1"># age = 28</span>
<span class="c1"># if age &gt; 40:  # 遇到冒号 说明后面的代码需要缩进(默认是4格)</span>
<span class="c1">#     print(&#39;阿姨好&#39;)</span>
<span class="c1">#     # print子代码只有在if后面的条件成立的情况下才会执行</span>

<span class="c1"># 如果女人的年龄大于40岁叫阿姨否则叫小姐姐</span>
<span class="c1"># age = 45</span>
<span class="c1"># if age &gt; 40:</span>
<span class="c1">#     print(&#39;阿姨好&#39;)</span>
<span class="c1"># else:</span>
<span class="c1">#     print(&#39;小姐姐 加个微信吧&#39;)</span>
    <span class="c1"># 当if条件不成立的时候就会走else</span>
<span class="s1">&#39;&#39;&#39;if和else连用的情况下 两者只会执行一个
</span><span class="s1">走了if肯定不走else
</span><span class="s1">走了else说明if不成立
</span><span class="s1">&#39;&#39;&#39;</span>


<span class="c1"># 如果：成绩&gt;=90，那么：优秀</span>
<span class="c1"># 如果成绩&gt;=80且&lt;90,那么：良好</span>
<span class="c1"># 如果成绩&gt;=70且&lt;80,那么：普通</span>
<span class="c1"># 其他情况：很差</span>
<span class="n">score</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;score&gt;&gt;&gt;:&#39;</span><span class="p">)</span>
<span class="n">score</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">score</span><span class="p">)</span>  <span class="c1"># 忽略</span>
<span class="k">if</span> <span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">90</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;优秀&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">80</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;良好&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">70</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;普通&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;你不行！！！&#39;</span><span class="p">)</span>
<span class="s1">&#39;&#39;&#39;
</span><span class="s1">if...elif...else
</span><span class="s1">三者连用 也是只会走一个
</span><span class="s1">&#39;&#39;&#39;</span>
<span class="s1">&#39;&#39;&#39;
</span><span class="s1">语法结构
</span><span class="s1">if 条件1:   # 如果条件1的结果为True，就依次执行：代码1、代码2，......
</span><span class="s1">  　代码1
</span><span class="s1">    代码2
</span><span class="s1">    ......
</span><span class="s1">elif 条件2: # 如果条件2的结果为True，就依次执行：代码3、代码4，......
</span><span class="s1">  　代码3
</span><span class="s1">    代码4
</span><span class="s1">    ......
</span><span class="s1">elif 条件3: # 如果条件3的结果为True，就依次执行：代码5、代码6，......
</span><span class="s1">  　代码5
</span><span class="s1">    代码6
</span><span class="s1">    ......
</span><span class="s1">else:　　   # 其它情况，就依次执行：代码7、代码8，......
</span><span class="s1">    代码7
</span><span class="s1">    代码8
</span><span class="s1">    ......
</span><span class="s1">&#39;&#39;&#39;</span>

</code></pre></div><h3 id="python中的缩进">python中的缩进</h3>
<p><strong>遇到冒号就缩进！</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;在python中用缩进来表示代码的从属关系
</span><span class="s1">如果一行代码下面的代码缩进了说明下面的代码属于上面的代码&#39;&#39;&#39;</span>
<span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">40</span><span class="p">:</span>  <span class="c1"># 遇到冒号 说明后面的代码需要缩进(默认是4格)</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;阿姨好&#39;</span><span class="p">)</span>
    <span class="c1"># 此处print就属于if的子代码</span>
 
<span class="s1">&#39;&#39;&#39;并不是所有的代码都可以有子代码的权限
</span><span class="s1">截止目前为止 唯一可以有子代码的关键字就是if
</span><span class="s1">
</span><span class="s1">属于同一个的代码的多个子代码一定要保证相同的缩进量，python中推荐缩进4个空格(在windows中tab键刚好就是4个空格)
</span><span class="s1">
</span><span class="s1">小技巧:你可以看代码后面有没有冒号 如果有 下面的代码肯定要缩进  &#39;&#39;&#39;</span>
</code></pre></div><h3 id="作业">作业</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 练习1：接收用户输入的用户名密码，打印成指定格式</span>

<span class="n">info</span> <span class="o">=</span> <span class="s1">&#39;亲爱的用户</span><span class="si">%s</span><span class="s1">!您的账户密码已设置为</span><span class="si">%s</span><span class="s1">&#39;</span>
<span class="n">user1</span> <span class="o">=</span> <span class="n">info</span> <span class="o">%</span> <span class="p">(</span><span class="s1">&#39;Eddy&#39;</span><span class="p">,</span> <span class="mi">521</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">user1</span><span class="p">)</span>

        
    
<span class="s1">&#39;&#39;&#39;# 练习2：用户输入姓名、年龄、工作、爱好 ，然后打印成以下格式
</span><span class="s1">------------ info of Tony -----------
</span><span class="s1">Name  : Tony
</span><span class="s1">Age   : 22
</span><span class="s1">Sex   : male
</span><span class="s1">Job   : Teacher 
</span><span class="s1">------------- end -----------------&#39;&#39;&#39;</span>

<span class="c1">#解2：</span>
<span class="n">name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;姓名:&#39;</span><span class="p">)</span>
<span class="n">age</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;年龄:&#39;</span><span class="p">)</span>
<span class="n">sex</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;性别:&#39;</span><span class="p">)</span>
<span class="n">job</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;工作:&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;--------info of&#39;</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="s1">&#39;--------&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;Name: &#39;</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;Age: &#39;</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;Sex: &#39;</span><span class="p">,</span> <span class="n">sex</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;Job: &#39;</span><span class="p">,</span> <span class="n">job</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;---------end------------------&#39;</span><span class="p">)</span>



<span class="c1"># 练习3:使用if判断尝试着编写一个用户登录功能</span>
<span class="c1">#思路:获取用户的用户名和密码 然后判断是否正确(jason 123)</span>
    
<span class="c1">#解3</span>
<span class="c1">#用户名密码校验题目  校验输入的用户名密码为(Eddy,521)</span>
<span class="n">username</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;用户名:  &#39;</span><span class="p">)</span>
<span class="n">password</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;密码: &#39;</span><span class="p">)</span>
<span class="k">if</span> <span class="n">username</span> <span class="o">==</span> <span class="s1">&#39;Eddy&#39;</span> <span class="ow">and</span> <span class="n">password</span> <span class="o">==</span> <span class="s1">&#39;521&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;欢迎帅哥~&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;你个冒牌货!&#39;</span><span class="p">)</span>
    
    
<span class="s1">&#39;&#39;&#39; 练习4:成绩评判系统(照着我写的好好理解)
</span><span class="s1">评判规则：&gt;=95 S
</span><span class="s1">		&gt;=90 A+
</span><span class="s1">    	&gt;=85 A
</span><span class="s1">        &gt;=80 A
</span><span class="s1">        &gt;=75 B
</span><span class="s1">        &gt;=70 C
</span><span class="s1">        &lt;70  D
</span><span class="s1">解4               &#39;&#39;&#39;</span>
<span class="n">grade</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;您的学分:&#39;</span><span class="p">)</span>
<span class="n">grade</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">grade</span><span class="p">)</span>
<span class="k">if</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">95</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;S&#39;</span><span class="p">,</span> <span class="n">grade</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">90</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;A+&#39;</span><span class="p">,</span> <span class="n">grade</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">85</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">grade</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">80</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">grade</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">75</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">grade</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">grade</span><span class="p">)</span>


</code></pre></div><h3 id="jason老湿送的一句话">Jason老湿送的一句话</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;我们每一次的进步都是一次赶鸭子上架的过程&#39;&#39;&#39;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>初识Python</title>
			<link>https://Eddy-622.github.io/posts/python%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
			<pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/python%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
			<description>10.28回顾   简单的cmd操作 选择盘符E: ， cd 切换目录，dir显示当前列表
  路径的概念
​	相对路径
​	绝对路径
  环境变量的设置
win7 大同小异，win7注意单行地址栏操作各路径之间用；隔开
win10
  解释器的多版本共存
配置不同的环境变量以及拷贝exe文件修改文件名以达到共存的目的
  执行python程序
cmd窗口中输入代码
txt，word等文件中输入代码，用解释器执行
专业的python编辑器
  python编辑器推荐
vscode 凑合用，适合老手
anaconda 主要用途为数据分析、
pycharm 好东西，要钱，破解
  pycharm的使用
&amp;#39;&amp;#39;&amp;#39;安装好设置好文件存放路径已经选择好解释器版本后启动新建py文件，写入代码，运行文件&amp;#39;&amp;#39;&amp;#39;  文件后缀名
&amp;#39;&amp;#39;&amp;#39;明确对文件的分类，使人一眼就能看懂文件的类型&amp;#39;&amp;#39;&amp;#39;  今日内容   python中的注释 &amp;#39;&amp;#39;&amp;#39;注释就是对于一段代码的文字解释。python中的注释是用来给人看，给自己看，帮助理解代码使用的方便后期更新维护方式1（单行注释）#或选中注释区域后使用 快捷键 CTRL + /再次激活快捷键为解开注释&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;方式2（多行注释）&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;三个单引号&amp;#39;&amp;#39;&amp;#39;&amp;#34;&amp;#34;&amp;#34;三个双引号&amp;#34;&amp;#34;&amp;#34;  python中的变量 &amp;#39;&amp;#39;&amp;#39;1.</description>
			<content type="html"><![CDATA[<h1 id="1028回顾">10.28回顾</h1>
<ul>
<li>
<p>简单的cmd操作     选择盘符E: ， cd 切换目录，dir显示当前列表</p>
</li>
<li>
<p>路径的概念</p>
<p>​	相对路径</p>
<p>​	绝对路径</p>
</li>
<li>
<p>环境变量的设置</p>
<p>win7    大同小异，win7注意单行地址栏操作各路径之间用；隔开</p>
<p>win10</p>
</li>
<li>
<p>解释器的多版本共存</p>
<p>配置不同的环境变量以及拷贝exe文件修改文件名以达到共存的目的</p>
</li>
<li>
<p>执行python程序</p>
<p>cmd窗口中输入代码</p>
<p>txt，word等文件中输入代码，用解释器执行</p>
<p>专业的python编辑器</p>
</li>
<li>
<p>python编辑器推荐</p>
<p>vscode  凑合用，适合老手</p>
<p>anaconda   主要用途为数据分析、</p>
<p>pycharm  好东西，要钱，破解</p>
</li>
<li>
<p>pycharm的使用</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;安装好设置好文件存放路径已经选择好解释器版本后启动
</span><span class="s1">新建py文件，写入代码，运行文件&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>文件后缀名</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;明确对文件的分类，使人一眼就能看懂文件的类型&#39;&#39;&#39;</span>
</code></pre></div></li>
</ul>
<h1 id="今日内容">今日内容</h1>
<ul>
<li>
<h4 id="python中的注释">python中的注释</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;注释就是对于一段代码的文字解释。
</span><span class="s1">  
</span><span class="s1">python中的注释是用来给人看，给自己看，帮助理解代码使用的
</span><span class="s1">方便后期更新维护
</span><span class="s1">  方式1（单行注释）
</span><span class="s1">      #
</span><span class="s1">   或选中注释区域后使用  快捷键 CTRL + /
</span><span class="s1">    再次激活快捷键为解开注释&#39;&#39;&#39;</span>
      
    <span class="s1">&#39;&#39;&#39;方式2（多行注释）&#39;&#39;&#39;</span>
    <span class="s1">&#39;&#39;&#39;三个单引号&#39;&#39;&#39;</span>
    <span class="s2">&#34;&#34;&#34;三个双引号&#34;&#34;&#34;</span>
</code></pre></div></li>
<li>
<h4 id="python中的变量">python中的变量</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;1.什么是变量？
</span><span class="s1">  即变化的量，用来描述事物状态的变化
</span><span class="s1">      
</span><span class="s1">2.为什么有变量?
</span><span class="s1">   用来记录事物状态&#39;&#39;&#39;</span>
    <span class="c1">#为了让计算机能够像人一样去记忆事物的某种状态，并且状态是可以发生变化的</span>
  <span class="c1"># 详细地说：</span>
  <span class="c1"># 程序执行的本质就是一系列状态的变化，变是程序执行的直接体现，所以我们需要有一种机制能够反映或者说是保存下来程序执行时状态，以及状态的变化。</span>
      
   <span class="s1">&#39;&#39;&#39; 思考问题，对一个只是点的掌握从三个方面思考
</span><span class="s1">     这玩意是什么
</span><span class="s1">     为什么需要这个玩意
</span><span class="s1">     这玩意如何使用&#39;&#39;&#39;</span>
          
<span class="s1">&#39;&#39;&#39;3.如何使用变量
</span><span class="s1">  name = &#39;Eddy&#39;
</span><span class="s1">    age = 18
</span><span class="s1">    
</span><span class="s1">变量名   赋值符号   变量的值
</span><span class="s1">  
</span><span class="s1">通过赋值符号将变量值赋值给变量名
</span><span class="s1">以后就可以通过变量名来访问变量值&#39;&#39;&#39;</span>
<span class="c1">#pycharm中 快速复制一行代码   CTRL +  D</span>
  
</code></pre></div><h4 id="变量的命名规则必须遵守">变量的命名规则：必须遵守</h4>
<p>1.变量名只能是数字、字母、下划线三者的组合</p>
<p>2.不能以数字开头，也不推荐下划线开头</p>
<p>3.变量名不能与关键字冲突。</p>
</li>
<li>
<p>变量名的命名风格：可以不遵守</p>
<p>1.下划线  python中推荐使用</p>
<p>Age_of_eddy = 18</p>
<p>2.小驼峰  Javascript中推荐使用</p>
<p>ageOfEddy = 18</p>
<p>3.大驼峰</p>
<p>AgeOFeddy = 18</p>
<h4 id="常量">常量</h4>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="s1">&#39;&#39;&#39;即不变的量或很少变的量
</span><span class="s1">python中没有绝对的常量，即所有的量都可以修改
</span><span class="s1">但是作为python程序员我们会约定俗称的将常量的变量名全部大写来表示常量
</span><span class="s1">修改之前提醒校验是否可以修改
</span><span class="s1">例如：
</span><span class="s1">   HOST = &#39;127.0.0.1&#39;&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<h4 id="数据类型">数据类型</h4>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="s1">&#39;&#39;&#39;查看数据类型  type()&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<h4 id="整型-int">整型 int</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;整型就是整数
</span><span class="s1">作用：用来记录人的年龄，出生年份等整数相关的状态
</span><span class="s1">age = 18
</span><span class="s1">  
</span><span class="s1">python中表示整型的关键字是int&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<h4 id="浮点型float">浮点型float</h4>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="s1">&#39;&#39;&#39;浮点型可以看作是带有小数点的小数
</span><span class="s1">作用，用来记录薪资，身高，体重等多伴随小数相关的状态
</span><span class="s1">salary = 3.1
</span><span class="s1">weight = 55.5
</span><span class="s1">  
</span><span class="s1">python  中浮点型关键字为float&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<h4 id="字符串str">字符串str</h4>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="s1">&#39;&#39;&#39;本质就是文本信息
</span><span class="s1">用来记录姓名，住址等描述性信息的状态
</span><span class="s1">字符串的左右两边要用引号引起来&#39;&#39;&#39;</span>
  
<span class="s1">&#39;&#39;&#39;第一种 单个单引号
</span><span class="s1">name = &#39;Eddy&#39;
</span><span class="s1">第二章 单组双引号
</span><span class="s1">name = &#34;Eddy&#34;&#39;&#39;&#39;</span>
<span class="s2">&#34;&#34;&#34;第三种
</span><span class="s2">  1.三组单引号
</span><span class="s2">  name = &#39;&#39;&#39;eddy&#39;&#39;&#39;
</span><span class="s2">  2.三组双引号&#34;&#34;&#34;</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;eddy&#34;&#34;&#34;</span>
<span class="s1">&#39;&#39;&#39;1.为什么三引号既可以是注释又可以是字符串，两个如何区分？
</span><span class="s1">    当三引号左边没有出现赋值符号和变量名的时候那么它就是注释
</span><span class="s1">    如果左边出现了赋值符号和变量名那么它就是字符串
</span><span class="s1">  
</span><span class="s1">  
</span><span class="s1">2.为什么定义字符串需要用到这么多方式？
</span><span class="s1">  为了防止字符串内部可能也需要用到引号&#39;&#39;&#39;</span>
  
<span class="c1"># 外层用单引号内层就用双引号</span>
<span class="n">info</span> <span class="o">=</span> <span class="s1">&#39;jason老师说:&#34;我们要好好学习,衣锦还乡&#34;&#39;</span>
<span class="c1"># 外层用双引号内层就用单引号</span>
<span class="n">info1</span> <span class="o">=</span> <span class="s2">&#34;jason老师说:&#39;我们要好好学习,衣锦还乡&#39;&#34;</span>
<span class="c1"># 总之一句话:内外层不要出现引号的冲突即可</span>
  
<span class="s1">&#39;字符串的操作&#39;</span>
<span class="n">str1</span> <span class="o">=</span> <span class="s1">&#39;Eddy&#39;</span>
<span class="n">str2</span> <span class="o">=</span> <span class="s1">&#39;NB&#39;</span>
<span class="k">print</span><span class="p">(</span><span class="n">str1</span> <span class="o">+</span> <span class="n">str2</span><span class="p">)</span> <span class="c1">#字符串的拼接操作  EddyNB</span>
  
<span class="n">str3</span> <span class="o">=</span> <span class="n">str1</span> <span class="o">+</span> <span class="n">str2</span>
<span class="k">print</span><span class="p">(</span><span class="n">str3</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="c1">#EddyNB 重复100次</span>
  
</code></pre></div></li>
<li>
<h4 id="列表list">列表list</h4>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="s1">&#39;&#39;&#39;列表的内部可以储存多个元素，并且可以是任意数据类型
</span><span class="s1">元素于元素之间逗号分隔，符号为[]
</span><span class="s1">存取数据，为了将来更方便的取&#39;&#39;&#39;</span>
  
<span class="n">students_name</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;jason&#39;</span><span class="p">,</span> <span class="s1">&#39;egon&#39;</span><span class="p">,</span> <span class="s1">&#39;kevin&#39;</span><span class="p">,</span> <span class="s1">&#39;tony&#39;</span><span class="p">]</span>
<span class="n">l1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">123</span><span class="p">,</span> <span class="mf">1.11</span><span class="p">,</span> <span class="s1">&#39;jason&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">students_name</span><span class="p">),</span> <span class="nb">type</span><span class="p">(</span><span class="n">l1</span><span class="p">))</span>
  
<span class="c1"># 索引取值:索引是从0开始的</span>
<span class="c1"># print(students_name[0])</span>
<span class="c1"># print(students_name[1])</span>
<span class="c1"># 索引取值练习题</span>
<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;jason&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;egon&#39;</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;jasonNB&#39;</span><span class="p">,</span> <span class="s1">&#39;egonDSB&#39;</span><span class="p">]]]]</span>
<span class="c1"># 遇到嵌套问题 先看最外层到底有几个元素</span>
<span class="n">l1</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># 将索引取值获取到的元素赋值给l1</span>
<span class="c1"># print(l1)  # [&#39;jason&#39;, [&#39;egon&#39;, 123, [&#39;jasonNB&#39;, &#39;egonDSB&#39;]]]</span>
<span class="c1"># l1其实就两个元素</span>
<span class="n">l2</span> <span class="o">=</span> <span class="n">l1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="c1"># print(l2)  # [&#39;egon&#39;, 123, [&#39;jasonNB&#39;, &#39;egonDSB&#39;]]</span>
<span class="n">l3</span> <span class="o">=</span> <span class="n">l2</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="c1"># print(l3)  # [&#39;jasonNB&#39;, &#39;egonDSB&#39;]</span>
<span class="c1"># print(l3[1])</span>
<span class="s1">&#39;&#39;&#39;基于上述的分步思想 其实我们可以写出下面一行代码&#39;&#39;&#39;</span>
<span class="n">name</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></li>
<li>
<h4 id="字典dict">字典dict</h4>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="s1">&#39;&#39;&#39;字典的符号是{}
</span><span class="s1">它是以key:value键值对的形式存储数据
</span><span class="s1">  key是对value的描述性信息(key一般情况下都是字符串)
</span><span class="s1">  value是真正的数据(value可以是任意数据类型)
</span><span class="s1">字典也可以存储多个元素，元素是key:value键值对的形式
</span><span class="s1">键值对之间用逗号隔开
</span><span class="s1">&#39;&#39;&#39;</span>
<span class="n">jason_dict</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;username&#39;</span><span class="p">:</span> <span class="s1">&#39;jason&#39;</span><span class="p">,</span>
    <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="s1">&#39;password&#39;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
    <span class="s1">&#39;province&#39;</span><span class="p">:</span> <span class="s1">&#39;安徽&#39;</span>
<span class="p">}</span>
  
  
<span class="c1"># 字典的取值  字典内部其实是无序的 无法使用索引的方式取值</span>
<span class="c1"># 取值方式1</span>
<span class="k">print</span><span class="p">(</span><span class="n">jason_dict</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">])</span>  <span class="c1"># jason  将字典中key为username对于的value值取出</span>
<span class="c1"># 取值方式2</span>
<span class="k">print</span><span class="p">(</span><span class="n">jason_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;hobby&#39;</span><span class="p">))</span>  <span class="c1"># [&#39;read&#39;, &#39;run&#39;, &#39;JDB&#39;]</span>
  
  
<span class="s1">&#39;小练习&#39;</span>
<span class="n">jason_dict</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;username&#39;</span><span class="p">:</span> <span class="s1">&#39;jason&#39;</span><span class="p">,</span>
    <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="s1">&#39;password&#39;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
    <span class="s1">&#39;province&#39;</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">&#39;北京&#39;</span><span class="p">:[</span><span class="s1">&#39;沙河&#39;</span><span class="p">,</span><span class="s1">&#39;朝阳&#39;</span><span class="p">,</span><span class="s1">&#39;昌平&#39;</span><span class="p">],</span>
        <span class="s1">&#39;上海&#39;</span><span class="p">:[</span><span class="s1">&#39;静安&#39;</span><span class="p">,</span><span class="s1">&#39;金山&#39;</span><span class="p">,</span><span class="s1">&#39;嘉定&#39;</span><span class="p">],</span>
        <span class="s1">&#39;安徽&#39;</span><span class="p">:[</span><span class="s1">&#39;黄山&#39;</span><span class="p">,</span><span class="s1">&#39;芜湖&#39;</span><span class="p">,</span><span class="s1">&#39;合肥&#39;</span><span class="p">]</span>
    <span class="p">},</span>
    <span class="s1">&#39;hobby&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;read&#39;</span><span class="p">,</span> <span class="s1">&#39;run&#39;</span><span class="p">,</span> <span class="s1">&#39;JDB&#39;</span><span class="p">]</span>
<span class="p">}</span>
<span class="s1">&#39;&#39;&#39;获取jason的老巢 &#34;芜湖&#34;&#39;&#39;&#39;</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;province&#39;</span><span class="p">)(</span><span class="s1">&#39;安徽&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
  
  
  
<span class="n">place</span> <span class="o">=</span> <span class="p">(</span><span class="n">jason_dict</span><span class="p">[</span><span class="s1">&#39;province&#39;</span><span class="p">])</span>
<span class="n">jason_home</span> <span class="o">=</span> <span class="p">(</span><span class="n">place</span><span class="p">[</span><span class="s1">&#39;安徽&#39;</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">jason_home</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
  
</code></pre></div></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>计算机基础知识</title>
			<link>https://Eddy-622.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
			<pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
			<description>10.27回顾 1.计算机的由来  1623年：德国科学家契克卡德（W. Schickard）制造了人类有史以来第一台机械计算机，这台机器能够 进行六位数的加减乘除运算。 1642年：法国科学家帕斯卡（B.Pascal）发明了著名的帕斯卡机械计算机，首次确立了计算机器的概念。 1674年：莱布尼茨改进了帕斯卡的计算机，使之成为一种能够进行连续运算的机器，并且提出了“二进制”数的概念。（据说这个概念来源于中国的八卦） 此后发展了两百多年于 1895年： 英国青年工程师弗莱明（J.Fleming）通过“爱迪生效应”发明了人类第一只电子管。 从此进入电子管时代 1943年：10月，绰号为“巨人”的用来破译德军密码的计算机在英国布雷契莱庄园制造成功，此后又制造多台，为第二次世界大战的胜利立下了汗马功劳。  2.计算机的工作原理  计算机通过识别0101的二进制数值进行工作  3.计算机的硬件组成  控制器 （控制计算机各部分的运行，下达指令） 运算器 （进行逻辑运算，判断对错） 储存器 (数据的短期长期储存) 输入设备 (键盘鼠标等人机交互设备) 输出设备(显示器，扬声器等)  4.计算机三大核心硬件  CPU	中央运算处理器 (计算机的大脑，集成了控制器运算器，以及最新的AR模块和集成显卡） 内存	与cpu直接进行沟通，进行数据吞吐，读写速度快，但是断电后会清空所有数据 硬盘	负责数据的长期的储存，虽然读写速度想对慢的多，但是理论情况下可以实现对数据的完整保 存  5.操作系统   windows 、MacOS 、Linux、ubuntu
操作系统就是充当人与计算机之间沟通的桥梁，因为计算机只认识01二进制数值，返回的	数值也生涩僵硬难懂，操作系统可以高效率的将指令传达给计算机，并且返回的指令进行	可视化处理，人类看起来更加方便，易懂。
  6.三层架构  应用程序	我们所使用的所有软件即是应用程序层面的，侧重与用户的使用体验 操作系统	基于底层架构起来的系统，也属于应用层序，不过侧重于与计算的交互 计算机硬件	即计算机本身的实体化部分，CPU内存等，随着迭代，性能不断增强  7.编程语言  人和计算机沟通的语言，把人类的语言编写成计算机可以听懂看懂的语言，已达到为计算机下达工作指令的目的  8.编程  将编程语言编写下来的过程就是编程  9.编程语言的发展史  机器语言	计算机的原生语言，0101的二进制字符 晦涩难懂，难学难用 汇编语言	使用特定的英文字母代替二进制字符，语言进化迭代的产物 高级语言	使用人类的语言单词，简单易懂，目前的主流语言python，Java，C++等  10.</description>
			<content type="html"><![CDATA[<h1 id="1027回顾">10.27回顾</h1>
<h4 id="1计算机的由来">1.计算机的由来</h4>
<ul>
<li>1623年：德国科学家契克卡德（W. Schickard）制造了人类有史以来第一台机械计算机，这台机器能够  进行六位数的加减乘除运算。
1642年：法国科学家帕斯卡（B.Pascal）发明了著名的帕斯卡机械计算机，首次确立了计算机器的概念。
1674年：莱布尼茨改进了帕斯卡的计算机，使之成为一种能够进行连续运算的机器，并且提出了“二进制”数的概念。（据说这个概念来源于中国的八卦）
此后发展了两百多年于
1895年： 英国青年工程师弗莱明（J.Fleming）通过“爱迪生效应”发明了人类第一只电子管。
从此进入电子管时代
1943年：10月，绰号为“巨人”的用来破译德军密码的计算机在英国布雷契莱庄园制造成功，此后又制造多台，为第二次世界大战的胜利立下了汗马功劳。</li>
</ul>
<h4 id="2计算机的工作原理">2.计算机的工作原理</h4>
<ul>
<li>计算机通过识别0101的二进制数值进行工作</li>
</ul>
<h4 id="3计算机的硬件组成">3.计算机的硬件组成</h4>
<ul>
<li>控制器 （控制计算机各部分的运行，下达指令）
运算器 （进行逻辑运算，判断对错）
储存器 (数据的短期长期储存)
输入设备 (键盘鼠标等人机交互设备)
输出设备(显示器，扬声器等)</li>
</ul>
<h4 id="4计算机三大核心硬件">4.计算机三大核心硬件</h4>
<ul>
<li>CPU		中央运算处理器 (计算机的大脑，集成了控制器运算器，以及最新的AR模块和集成显卡）
内存	与cpu直接进行沟通，进行数据吞吐，读写速度快，但是断电后会清空所有数据
硬盘	负责数据的长期的储存，虽然读写速度想对慢的多，但是理论情况下可以实现对数据的完整保   存</li>
</ul>
<h4 id="5操作系统">5.操作系统</h4>
<ul>
<li>
<p>windows 、MacOS 、Linux、ubuntu</p>
<p>操作系统就是充当人与计算机之间沟通的桥梁，因为计算机只认识01二进制数值，返回的				数值也生涩僵硬难懂，操作系统可以高效率的将指令传达给计算机，并且返回的指令进行					可视化处理，人类看起来更加方便，易懂。</p>
</li>
</ul>
<h4 id="6三层架构">6.三层架构</h4>
<ul>
<li>应用程序		我们所使用的所有软件即是应用程序层面的，侧重与用户的使用体验
操作系统		基于底层架构起来的系统，也属于应用层序，不过侧重于与计算的交互
计算机硬件		即计算机本身的实体化部分，CPU内存等，随着迭代，性能不断增强</li>
</ul>
<h4 id="7编程语言">7.编程语言</h4>
<ul>
<li>人和计算机沟通的语言，把人类的语言编写成计算机可以听懂看懂的语言，已达到为计算机下达工作指令的目的</li>
</ul>
<h4 id="8编程">8.编程</h4>
<ul>
<li>将编程语言编写下来的过程就是编程</li>
</ul>
<h4 id="9编程语言的发展史">9.编程语言的发展史</h4>
<ul>
<li>机器语言	计算机的原生语言，0101的二进制字符  晦涩难懂，难学难用
汇编语言	使用特定的英文字母代替二进制字符，语言进化迭代的产物
高级语言	使用人类的语言单词，简单易懂，目前的主流语言python，Java，C++等</li>
</ul>
<h4 id="10编程语言分类">10.编程语言分类</h4>
<ul>
<li>编译型：将编程下来的语言一次性编译给操作系统，跨平台性不高
解释型：真的不同的平台有不同的解释器，只需要写一遍代码即可解释成不同操作系统可识别的语言，通用性高，跨平台语言。</li>
</ul>
<h4 id="11解释器下载安装与启动">11.解释器下载安装与启动</h4>
<ul>
<li>再装不好吃屎去吧</li>
</ul>
<h1 id="今日内容">今日内容</h1>
<h4 id="1环境变量">1.环境变量</h4>
<ul>
<li>
<p>通过设置系统的环境变量可以达成在CMD命令窗口不进入软件路径下直接启动软件的目的。
原理是在CMD窗口下运行命令时，计算机会读取设置的各项环境变量路径寻找符合条件的命令，
如果没有，所处路径又不对，则报错
·计算机右键属性==&gt;高级系统设置==&gt;环境变量
在下面系统变量中找到path，双击打开
新建==&gt;将软件路径添加到里面即可。
如果添加完成后还不能在CMD窗口中正常启动则
· 设置变量后CMD窗口需重启才能生效
· 校验变量路径，是否存储在用户变量上
· 软件过多时path的变量路径过多，则可能有名称相同的变量文件，但是软件只有部分功能不能使用
需要把python的路径添加值path变量的最上方，CMD查找使从上往下一次查找，这样就能解决问题。</p>
<p>CMD中查看当前路径下的文件   dir
实现多版本共存
1.将两个版本的python.exe文件所在的路径都添加到环境变量中
2.将两个版本下的python.exe文件拷贝一份修改名字(不要直接修改原文件)</p>
</li>
</ul>
<h4 id="2python的第一个程序">2.python的第一个程序</h4>
<ul>
<li>CMD 窗口下编写程序困难多多，想要挑战自我，没事去玩玩
用处为大多时候的短命令运行
python可以在任意文件中进行编写，txt，word等，但是这些文档仅限于记录的基本功能，没有编程相关的功能提示等。
推荐使用代码编辑器
vscode      ===&gt;新手入门不建议
Anaconda    ===&gt;侧重于数据分析，不在编程
pycharm     ===&gt;专业软件，好用，要钱，贵，破解！
建议安装2020.1版本进行破解
激活码下载网站：http://idea.medeming.com/jets/</li>
</ul>
<h4 id="3pycharm的使用">3.pycharm的使用</h4>
<ul>
<li>1.创建文件夹  ==&gt;文件保存路径，设置于除c盘外的其他盘
2.创建py文件 ==&gt; NEW Python File
3.修改字体大小  ==&gt;File==&gt;setting==&gt;Editor==&gt;General</li>
</ul>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201029021741038.png" alt="image-20201029021741038"></p>
<ul>
<li>​                                          意为使用CTRL+鼠标滚轮进行放大缩小操作，勾上即可
4.设置风格   个人随意
5.切换解释器  ==&gt;File==&gt;setting==&gt;project:py==&gt;python interperter</li>
</ul>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201029022215906.png" alt="image-20201029022215906"></p>
<ul>
<li>
<p>此处进行添加不同版本的解释器，也可以实现多版本解释器共存及解释器切换
另外
路径类似于坐标，即目标所在的位置</p>
</li>
<li>
<p>1.相对路径
有一个参考点，基于该参考点所描绘出来的路径
这个路径并不是通用的 
2.绝对路径
不需要有参考点，描绘出来的路径给任何人都可以
明确的找到目标位置</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Eddy&#39;s Boke</title>
			<link>https://Eddy-622.github.io/posts/eddys-boke/</link>
			<pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/eddys-boke/</guid>
			<description>这是我创建的第一个个人网站
刚刚开始摸索其中的乐趣
做的的不好的地方以后会尽量优化
今天也是充满希望的一天Fighting！打工人
当然我知道这个网站是没有几个人会看的~</description>
			<content type="html"><![CDATA[<p><strong>这是我创建的第一个个人网站</strong></p>
<p><strong>刚刚开始摸索其中的乐趣</strong></p>
<p><strong>做的的不好的地方以后会尽量优化</strong></p>
<p><strong>今天也是充满希望的一天Fighting！打工人</strong></p>
<p><strong>当然我知道这个网站是没有几个人会看的~</strong></p>
]]></content>
		</item>
		
	</channel>
</rss>
