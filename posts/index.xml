<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Eddy&#39;s Boke</title>
		<link>https://Eddy-622.github.io/posts/</link>
		<description>Recent content in Posts on Eddy&#39;s Boke</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-CN</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Thu, 10 Dec 2020 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://Eddy-622.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Matplotlib之多表绘制</title>
			<link>https://Eddy-622.github.io/posts/matplotlib%E4%B9%8B%E5%A4%9A%E8%A1%A8%E7%BB%98%E5%88%B6/</link>
			<pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/matplotlib%E4%B9%8B%E5%A4%9A%E8%A1%A8%E7%BB%98%E5%88%B6/</guid>
			<description>箱线图
可以反映出很多特征量上下须值四分之一、三位数中位数平均值等并且还可以非常直观的识别出数据中的异常值代码你可以不记忆，但是最起码也要自己手动敲个两三遍熟悉过程  折线图
最常用于跟时间序列相关的数据统计x轴是时间y轴是随时间变化的量# 单条折线图 eg:公司历年(月)业绩# 多条折线图 eg:员工绩效考核(设定的业绩与实际业绩关系)  散点图
主要是用来寻找两个变量之间是否有线性关系(正相关、负相关)  气泡图
其实就是散点图的演变将点的大小根据第三个变量的不同设置成不同的大小eg:x轴时间y轴人口数气泡大小国家面积  热力图
研究变量之间的组合关系(交叉填充表)热力图我们使用的是seaborn模块来绘制参考资料:http://seaborn.pydata.org/tutorial/axis_grids.html  昨日表处理重点
数据透视表制作(热力图知识点)日期字段的拆分(热力图知识点)  今日内容概要   组合图形的绘制
  数据清洗理论
  数据清洗案例
  操作excel表格的python模块(openpyxl)
  MongoDB数据库
数据库只有两大类关系型MySQL(必会)非关系型MongoDB每一类学一个，就可以做到之后所有的数据库都能够非常快速的上手  今日内容详细 组合图形的绘制 # 读取数据 Prod_Trade = pd.</description>
			<content type="html"><![CDATA[<ul>
<li>
<p>箱线图</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="err">可以反映出很多特征量</span>
  <span class="err">上下须值</span>
    <span class="err">四分之一、三位数</span>
    <span class="err">中位数</span>
    <span class="err">平均值等</span>
<span class="err">并且还可以非常直观的识别出数据中的异常值</span>
  
<span class="err">代码你可以不记忆，但是最起码也要自己手动敲个两三遍熟悉过程</span>
</code></pre></div></li>
<li>
<p>折线图</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="err">最常用于跟时间序列相关的数据统计</span>
  <span class="n">x轴是时间</span>
    <span class="n">y轴是随时间变化的量</span>
   
<span class="c1"># 单条折线图</span>
  <span class="n">eg</span><span class="p">:</span><span class="err">公司历年</span><span class="p">(</span><span class="err">月</span><span class="p">)</span><span class="err">业绩</span>
<span class="c1"># 多条折线图</span>
  <span class="n">eg</span><span class="p">:</span><span class="err">员工绩效考核</span><span class="p">(</span><span class="err">设定的业绩与实际业绩关系</span><span class="p">)</span>
</code></pre></div></li>
<li>
<p>散点图</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="err">主要是用来寻找两个变量之间是否有线性关系</span><span class="p">(</span><span class="err">正相关、负相关</span><span class="p">)</span>
</code></pre></div></li>
<li>
<p>气泡图</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="err">其实就是散点图的演变</span>
  <span class="err">将点的大小根据第三个变量的不同设置成不同的大小</span>
<span class="n">eg</span><span class="p">:</span>
    <span class="n">x轴时间</span>
    <span class="n">y轴人口数</span>
    <span class="err">气泡大小国家面积</span>
</code></pre></div></li>
<li>
<p>热力图</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="err">研究变量之间的组合关系</span><span class="p">(</span><span class="err">交叉填充表</span><span class="p">)</span>
  
<span class="err">热力图我们使用的是</span><span class="n">seaborn模块来绘制</span>
  
<span class="err">参考资料</span><span class="p">:</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">seaborn</span><span class="o">.</span><span class="n">pydata</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">tutorial</span><span class="o">/</span><span class="n">axis_grids</span><span class="o">.</span><span class="n">html</span>
</code></pre></div></li>
<li>
<p>昨日表处理重点</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="err">数据透视表制作</span><span class="p">(</span><span class="err">热力图知识点</span><span class="p">)</span>
<span class="err">日期字段的拆分</span><span class="p">(</span><span class="err">热力图知识点</span><span class="p">)</span>
</code></pre></div></li>
</ul>
<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>
<p>组合图形的绘制</p>
</li>
<li>
<p>数据清洗理论</p>
</li>
<li>
<p>数据清洗案例</p>
</li>
<li>
<p>操作excel表格的python模块(openpyxl)</p>
</li>
<li>
<p>MongoDB数据库</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="err">数据库只有两大类</span>
  <span class="err">关系型</span>
      <span class="n">MySQL</span><span class="p">(</span><span class="err">必会</span><span class="p">)</span>
    <span class="err">非关系型</span>
      <span class="n">MongoDB</span>
    <span class="err">每一类学一个，就可以做到之后所有的数据库都能够非常快速的上手</span>
</code></pre></div></li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h3 id="组合图形的绘制">组合图形的绘制</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 读取数据</span>
<span class="n">Prod_Trade</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;Prod_Trade.xlsx&#39;</span><span class="p">)</span>
<span class="c1"># 衍生出交易年份和月份字段</span>
<span class="n">Prod_Trade</span><span class="p">[</span><span class="s1">&#39;year&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">Prod_Trade</span><span class="o">.</span><span class="n">Date</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">year</span>
<span class="n">Prod_Trade</span><span class="p">[</span><span class="s1">&#39;month&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">Prod_Trade</span><span class="o">.</span><span class="n">Date</span><span class="o">.</span><span class="n">dt</span><span class="o">.</span><span class="n">month</span>

<span class="c1"># 设置大图框的长和高</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="c1"># 设置第一个子图的布局</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot2grid</span><span class="p">(</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">loc</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># 统计2012年各订单等级的数量</span>
<span class="n">Class_Counts</span> <span class="o">=</span> <span class="n">Prod_Trade</span><span class="o">.</span><span class="n">Order_Class</span><span class="p">[</span><span class="n">Prod_Trade</span><span class="o">.</span><span class="n">year</span> <span class="o">==</span> <span class="mi">2012</span><span class="p">]</span><span class="o">.</span><span class="n">value_counts</span><span class="p">()</span>
<span class="n">Class_Percent</span> <span class="o">=</span> <span class="n">Class_Counts</span><span class="o">/</span><span class="n">Class_Counts</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
<span class="c1"># 将饼图设置为圆形（否则有点像椭圆）</span>
<span class="n">ax1</span><span class="o">.</span><span class="n">set_aspect</span><span class="p">(</span><span class="n">aspect</span> <span class="o">=</span> <span class="s1">&#39;equal&#39;</span><span class="p">)</span>
<span class="c1"># 绘制订单等级饼图</span>
<span class="n">ax1</span><span class="o">.</span><span class="n">pie</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="n">Class_Percent</span><span class="o">.</span><span class="n">values</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">Class_Percent</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">autopct</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="si">%.1f%%</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1"># 添加标题</span>
<span class="n">ax1</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;各等级订单比例&#39;</span><span class="p">)</span>

<span class="c1"># 设置第二个子图的布局</span>
<span class="n">ax2</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot2grid</span><span class="p">(</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">loc</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">))</span>
<span class="c1"># 统计2012年每月销售额</span>
<span class="n">Month_Sales</span> <span class="o">=</span> <span class="n">Prod_Trade</span><span class="p">[</span><span class="n">Prod_Trade</span><span class="o">.</span><span class="n">year</span> <span class="o">==</span> <span class="mi">2012</span><span class="p">]</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s1">&#39;month&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">aggregate</span><span class="p">({</span><span class="s1">&#39;Sales&#39;</span><span class="p">:</span><span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">})</span>
<span class="c1"># 绘制销售额趋势图</span>
<span class="n">Month_Sales</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">title</span> <span class="o">=</span> <span class="s1">&#39;2012年各月销售趋势&#39;</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax2</span><span class="p">,</span> <span class="n">legend</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span>
<span class="c1"># 删除x轴标签</span>
<span class="n">ax2</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>

<span class="c1"># 设置第三个子图的布局</span>
<span class="n">ax3</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot2grid</span><span class="p">(</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">loc</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">rowspan</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span>
<span class="c1"># 绘制各运输方式的成本箱线图</span>
<span class="n">sns</span><span class="o">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s1">&#39;Transport&#39;</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="s1">&#39;Trans_Cost&#39;</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">Prod_Trade</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax3</span><span class="p">)</span>
<span class="c1"># 添加标题</span>
<span class="n">ax3</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;各运输方式成本分布&#39;</span><span class="p">)</span>
<span class="c1"># 删除x轴标签</span>
<span class="n">ax3</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
<span class="c1"># 修改y轴标签</span>
<span class="n">ax3</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s1">&#39;运输成本&#39;</span><span class="p">)</span>

<span class="c1"># 设置第四个子图的布局</span>
<span class="n">ax4</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplot2grid</span><span class="p">(</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">loc</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">colspan</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span>
<span class="c1"># 2012年客单价分布直方图</span>
<span class="n">sns</span><span class="o">.</span><span class="n">distplot</span><span class="p">(</span><span class="n">Prod_Trade</span><span class="o">.</span><span class="n">Sales</span><span class="p">[</span><span class="n">Prod_Trade</span><span class="o">.</span><span class="n">year</span> <span class="o">==</span> <span class="mi">2012</span><span class="p">],</span> <span class="n">bins</span> <span class="o">=</span> <span class="mi">40</span><span class="p">,</span> <span class="n">norm_hist</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax4</span><span class="p">,</span> <span class="n">hist_kws</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;color&#39;</span><span class="p">:</span><span class="s1">&#39;steelblue&#39;</span><span class="p">},</span> <span class="n">kde_kws</span><span class="o">=</span><span class="p">({</span><span class="s1">&#39;linestyle&#39;</span><span class="p">:</span><span class="s1">&#39;--&#39;</span><span class="p">,</span> <span class="s1">&#39;color&#39;</span><span class="p">:</span><span class="s1">&#39;red&#39;</span><span class="p">}))</span>
<span class="c1"># 添加标题</span>
<span class="n">ax4</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="s1">&#39;2012年客单价分布图&#39;</span><span class="p">)</span>
<span class="c1"># 修改x轴标签</span>
<span class="n">ax4</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s1">&#39;销售额&#39;</span><span class="p">)</span>

<span class="c1"># 调整子图之间的水平间距和高度间距</span>
<span class="n">plt</span><span class="o">.</span><span class="n">subplots_adjust</span><span class="p">(</span><span class="n">hspace</span><span class="o">=</span><span class="mf">0.6</span><span class="p">,</span> <span class="n">wspace</span><span class="o">=</span><span class="mf">0.3</span><span class="p">)</span>
<span class="c1"># 图形显示</span>
<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><h3 id="补充">补充</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#在展示图形的时候出现乱码不同的系统有不同的解决方法</span>
<span class="c1"># 解决中文乱码情况</span>
<span class="c1"># 针对windows</span>
<span class="n">plt</span><span class="o">.</span><span class="n">rcParams</span><span class="p">[</span><span class="s1">&#39;font.sans-serif&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;SimHei&#39;</span><span class="p">]</span>

<span class="c1"># 针对mac</span>
<span class="c1"># 配置</span>
<span class="kn">from</span> <span class="nn">matplotlib.font_manager</span> <span class="kn">import</span> <span class="n">FontProperties</span>
<span class="n">font</span> <span class="o">=</span> <span class="n">FontProperties</span><span class="p">(</span><span class="n">fname</span><span class="o">=</span><span class="s1">&#39;/Users/jason/Downloads/font/Hanzipen.ttc&#39;</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">font2</span> <span class="o">=</span> <span class="n">FontProperties</span><span class="p">(</span><span class="n">fname</span><span class="o">=</span><span class="s1">&#39;/Users/jason/Downloads/font/Hanzipen.ttc&#39;</span><span class="p">,</span><span class="n">size</span><span class="o">=</span><span class="mi">13</span><span class="p">)</span>
<span class="c1"># 字体的选择可以有多个文件类型</span>
<span class="c1"># 使用</span>
<span class="n">plt</span><span class="o">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s1">&#39;哈哈哈&#39;</span><span class="p">,</span><span class="n">FontProperties</span><span class="o">=</span><span class="n">font</span><span class="p">)</span>
</code></pre></div><h3 id="总结">总结</h3>
<pre><code>数据可视化方式有很多，我们学习的目前来说是代码层面的可能并不是最简单的
但是这块知识点你得知道

后续还会学习可视化软件的使用，画图更加的简单

可视化模块
	matplotlib
    seaborn
可视化包(前端)
	echarts
    highcharts
</code></pre><h3 id="pyecharts模块">pyecharts模块</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 下载</span>
<span class="n">pip3</span> <span class="n">install</span> <span class="n">pyecharts</span> <span class="o">-</span><span class="n">i</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">pypi</span><span class="o">.</span><span class="n">tuna</span><span class="o">.</span><span class="n">tsinghua</span><span class="o">.</span><span class="n">edu</span><span class="o">.</span><span class="n">cn</span><span class="o">/</span><span class="n">simple</span><span class="o">/</span>

    
<span class="c1"># 参考</span>
<span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">pyecharts</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="c1">#/zh-cn/intro</span>
</code></pre></div><h3 id="数据清洗概念">数据清洗概念</h3>
<pre><code>数据分析工作流程
1.提出需求

2.收集数据

3.整理数据
	数据清洗环节
    是我们数据分析流程中必不可少的环境
 
4.数据分析

5.数据可视化

6.数据分析报告

# 其实可以将整个数据分析环境比喻成做菜的过程

数据清洗环节就类似于炒菜之前的菜品准备过程

专业术语
	脏数据
    	缺失数据
        异常数据
        重复数据
        ...
    干净的数据
    	可以直接拿来使用的数据
     
查看数据
	shape
    describle
    info
   
常见的坑
	1.列名称首位有空格
   		不容易察觉，但是却非常有可能出现
        
</code></pre>]]></content>
		</item>
		
		<item>
			<title>Matplotlib之箱线图、折线图、散点图、热力图</title>
			<link>https://Eddy-622.github.io/posts/matplotlib%E4%B9%8B%E7%AE%B1%E7%BA%BF%E5%9B%BE%E6%8A%98%E7%BA%BF%E5%9B%BE%E6%95%A3%E7%82%B9%E5%9B%BE%E7%83%AD%E5%8A%9B%E5%9B%BE/</link>
			<pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/matplotlib%E4%B9%8B%E7%AE%B1%E7%BA%BF%E5%9B%BE%E6%8A%98%E7%BA%BF%E5%9B%BE%E6%95%A3%E7%82%B9%E5%9B%BE%E7%83%AD%E5%8A%9B%E5%9B%BE/</guid>
			<description>今日内容概要  箱线图 折线图 散点图 气泡图 热力图 组合图(掌握)  今日内容详细 箱线图 箱线图是另一种体现数据分布的图形，通过该图可以得知数据的下须值(Q1-1.5IQR)、下四分位数(Q1)、中位数(Q2)、均值、上四分位(Q3)数和上须值(Q3+1.5IQR)，更重要的是，箱线图还可以发现数据中的异常点;plt.boxplot(x, vert=None, whis=None, patch_artist=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None)x:指定要绘制箱线图的数据 vert:是否需要将箱线图垂直摆放，默认垂直摆放whis:指定上下须与上下四分位的距离，默认为1.5倍的四分位差 patch_artist:bool类型参数，是否填充箱体的颜色;默认为False meanline:bool类型参数，是否用线的形式表示均值，默认为False showmeans:bool类型参数，是否显示均值，默认为False showcaps:bool类型参数，是否显示箱线图顶端和末端的两条线(即上下须)，默认为True showbox:bool类型参数，是否显示箱线图的箱体，默认为Trueshowfliers:是否显示异常值，默认为True boxprops:设置箱体的属性，如边框色，填充色等labels:为箱线图添加标签，类似于图例的作用 filerprops:设置异常值的属性，如异常点的形状、大小、填充色等 medianprops:设置中位数的属性，如线的类型、粗细等 meanprops:设置均值的属性，如点的大小、颜色等 capprops:设置箱线图顶端和末端线条的属性，如颜色、粗细等 whiskerprops:设置须的属性，如颜色、粗细、线的类型等Sec_Buildings = pd.read_excel(&#39;sec_buildings.xlsx&#39;)# 绘制箱线图plt.boxplot(x = Sec_Buildings.price_unit, # 指定绘图数据patch_artist=True, # 要求用自定义颜色填充盒形图，默认白色填充showmeans=True, # 以点的形式显示均值boxprops = {&#39;color&#39;:&#39;black&#39;,&#39;facecolor&#39;:&#39;steelblue&#39;},# 设置箱体属性，如边框色和填充色# 设置异常点属性，如点的形状、填充色和点的大小flierprops = {&#39;marker&#39;:&#39;o&#39;,&#39;markerfacecolor&#39;:&#39;red&#39;, &#39;markersize&#39;:3,&#39;markeredgecolor&#39;:&#39;red&#39;}, # 设置均值点的属性，如点的形状、填充色和点的大小meanprops = {&#39;marker&#39;:&#39;D&#39;,&#39;markerfacecolor&#39;:&#39;indianred&#39;, &#39;markersize&#39;:4}, # 设置中位数线的属性，如线的类型和颜色medianprops = {&#39;linestyle&#39;:&#39;--&#39;,&#39;color&#39;:&#39;orange&#39;}, labels = [&#39;&#39;] # 删除x轴的刻度标签，否则图形显示刻度标签为1)# 添加图形标题plt.</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>箱线图</li>
<li>折线图</li>
<li>散点图</li>
<li>气泡图</li>
<li>热力图</li>
<li>组合图(掌握)</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h3 id="箱线图">箱线图</h3>
<pre><code>箱线图是另一种体现数据分布的图形，通过该图可以得知数据的下须值(Q1-1.5IQR)、下四分位数(Q1)、中位数(Q2)、均值、上四分位(Q3)数和上须值(Q3+1.5IQR)，更重要的是，箱线图还可以发现数据中的异常点;

plt.boxplot(x, vert=None, whis=None, patch_artist=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None)

x:指定要绘制箱线图的数据 
vert:是否需要将箱线图垂直摆放，默认垂直摆放
whis:指定上下须与上下四分位的距离，默认为1.5倍的四分位差 
patch_artist:bool类型参数，是否填充箱体的颜色;默认为False 
meanline:bool类型参数，是否用线的形式表示均值，默认为False 
showmeans:bool类型参数，是否显示均值，默认为False 
showcaps:bool类型参数，是否显示箱线图顶端和末端的两条线(即上下须)，默认为True 
showbox:bool类型参数，是否显示箱线图的箱体，默认为True
showfliers:是否显示异常值，默认为True 
boxprops:设置箱体的属性，如边框色，填充色等
labels:为箱线图添加标签，类似于图例的作用 
filerprops:设置异常值的属性，如异常点的形状、大小、填充色等 
medianprops:设置中位数的属性，如线的类型、粗细等 
meanprops:设置均值的属性，如点的大小、颜色等 
capprops:设置箱线图顶端和末端线条的属性，如颜色、粗细等 
whiskerprops:设置须的属性，如颜色、粗细、线的类型等
  
  
Sec_Buildings = pd.read_excel('sec_buildings.xlsx')
# 绘制箱线图
plt.boxplot(x = Sec_Buildings.price_unit, # 指定绘图数据
            patch_artist=True, # 要求用自定义颜色填充盒形图，默认白色填充
            showmeans=True, # 以点的形式显示均值
            boxprops = {'color':'black','facecolor':'steelblue'},# 设置箱体属性，如边框色和填充色
            # 设置异常点属性，如点的形状、填充色和点的大小
            flierprops = {'marker':'o','markerfacecolor':'red', 'markersize':3,'markeredgecolor':'red'}, 
            # 设置均值点的属性，如点的形状、填充色和点的大小
            meanprops = {'marker':'D','markerfacecolor':'indianred', 'markersize':4}, 
            # 设置中位数线的属性，如线的类型和颜色
            medianprops = {'linestyle':'--','color':'orange'}, 
            labels = [''] # 删除x轴的刻度标签，否则图形显示刻度标签为1
           )
# 添加图形标题
plt.title('二手房单价分布的箱线图')
# 显示图形
plt.show()
</code></pre><h3 id="折线图">折线图</h3>
<pre><code>对于时间序列数据而言，一般都会使用折线图反映数据背后的趋势。通常折线图的横坐标指代日期数据，纵坐标代表某个数值型变量，当然还可以使用第三个离散变量对折线图进行分组处理;

plt.plot(x, y, linestyle, linewidth, color, marker,markersize, markeredgecolor, markerfactcolor,markeredgewidth, label, alpha)

x:指定折线图的x轴数据 
y:指定折线图的y轴数据
linestyle:指定折线的类型，可以是实线、虚线、点虚线、点点线等，默认为实线 linewidth:指定折线的宽度 
marker:可以为折线图添加点，该参数是设置点的形状 
markersize:设置点的大小
markeredgecolor:设置点的边框色 
markerfactcolor:设置点的填充色 
markeredgewidth:设置点的边框宽度 
label:为折线图添加标签，类似于图例的作用
  
  
%matplotlib  # 以弹框的形式显示图形
# 数据读取
wechat = pd.read_excel(r'wechat.xlsx')
# 绘制单条折线图
plt.plot(wechat.Date, # x轴数据
         wechat.Counts, # y轴数据
         linestyle = '-', # 折线类型
         linewidth = 2, # 折线宽度
         color = 'steelblue', # 折线颜色
         marker = 'o', # 折线图中添加圆点
         markersize = 6, # 点的大小
         markeredgecolor='black', # 点的边框色
         markerfacecolor='brown') # 点的填充色
# 获取图的坐标信息
ax = plt.gca()
# 设置日期的显示格式  
date_format = mpl.dates.DateFormatter(&quot;%m-%d&quot;)  
ax.xaxis.set_major_formatter(date_format) 
# 设置x轴每个刻度的间隔天数
xlocator = mpl.ticker.MultipleLocator(7)
ax.xaxis.set_major_locator(xlocator)
# 添加y轴标签
plt.ylabel('人数')
# 添加图形标题
plt.title('每天微信文章阅读人数趋势')
# 显示图形
plt.show()

</code></pre><h3 id="多条折线图">多条折线图</h3>
<pre><code># 绘制两条折线图
# 导入模块，用于日期刻度的修改
import matplotlib as mpl
# 绘制阅读人数折线图
plt.plot(wechat.Date, # x轴数据
         wechat.Counts, # y轴数据
         linestyle = '-', # 折线类型，实心线
         color = 'steelblue', # 折线颜色
         label = '阅读人数'
         )
# 绘制阅读人次折线图
plt.plot(wechat.Date, # x轴数据
         wechat.Times, # y轴数据
         linestyle = '--', # 折线类型，虚线
         color = 'indianred', # 折线颜色
         label = '阅读人次'
         )
# 获取图的坐标信息
ax = plt.gca()
# 设置日期的显示格式  
date_format = mpl.dates.DateFormatter(&quot;%m-%d&quot;)  
ax.xaxis.set_major_formatter(date_format) 
# 设置x轴显示多少个日期刻度
# xlocator = mpl.ticker.LinearLocator(10)
# 设置x轴每个刻度的间隔天数
xlocator = mpl.ticker.MultipleLocator(7)
ax.xaxis.set_major_locator(xlocator)
# 为了避免x轴刻度标签的紧凑，将刻度标签旋转45度
plt.xticks(rotation=45)

# 添加y轴标签
plt.ylabel('人数')
# 添加图形标题
plt.title('每天微信文章阅读人数与人次趋势')
# 添加图例
plt.legend()
# 显示图形
plt.show()
</code></pre><h3 id="散点图的绘制">散点图的绘制</h3>
<pre><code>如果需要研究两个数值型变量之间是否存在某种关系，例如正向的线性关系，或者是趋势性的非线性关系，那么散点图将是最佳的选择;

scatter(x, y, s=20, c=None, marker='o', alpha=None, linewidths=None, edgecolors=None) 
x:指定散点图的x轴数据
y:指定散点图的y轴数据 
s:指定散点图点的大小，默认为20，通过传入其他数值型变量，可以实现气泡图的绘制 
c:指定散点图点的颜色，默认为蓝色，也可以传递其他数值型变量，通过cmap参数的色阶表示数值大小
marker:指定散点图点的形状，默认为空心圆
alpha:设置散点的透明度
linewidths:设置散点边界线的宽度
edgecolors:设置散点边界线的颜色
  
# 读入数据
iris = pd.read_csv(r'iris.csv')
# 绘制散点图
plt.scatter(x = iris.Petal_Width, # 指定散点图的x轴数据
            y = iris.Petal_Length, # 指定散点图的y轴数据
            color = 'steelblue' # 指定散点图中点的颜色
           )
# 添加x轴和y轴标签
plt.xlabel('花瓣宽度')
plt.ylabel('花瓣长度')
# 添加标题
plt.title('鸢尾花的花瓣宽度与长度关系')
# 显示图形
plt.show()
</code></pre><h3 id="气泡图的绘制">气泡图的绘制</h3>
<pre><code>气泡图的实质就是通过第三个数值型变量控制每个散点的大小，点越大，代表的第三维数值越高，反之亦然;
气泡图的绘制，使用的仍然是scatter函数，区别在于函数的s参数被赋予了具体的数值型变量;
</code></pre><h3 id="热力图的绘制">热力图的绘制</h3>
<pre><code>热力图也称为交叉填充表，图形最典型的用法就是实现列联表的可视化，即通过图形的方式展现两个离散变量之间的组合关系;

# matplotlib绘制热力图不太方便需要借助于seaborn模块
sns.heatmap(data, cmap=None, annot=None, fmt='.2g', annot_kws=None, linewidths=0, linecolor ='white)
            
data:指定绘制热力图的数据集 
cmap:指定一个colormap对象，用于热力图的填充色
annot:指定一个bool类型的值或与data参数形状一样的数组，如果为True，就在热力图的每个单元上显示数值 
fmt:指定单元格中数据的显示格式
annot_kws:有关单元格中数值标签的其他属性描述，如颜色、大小等 
linewidths:指定每个单元格的边框宽度 
linecolor:指定每个单元格的边框颜色
            
import numpy as np
import seaborn as sns
# 读取数据
Sales = pd.read_excel(r'Sales.xlsx')
# 根据交易日期，衍生出年份和月份字段
Sales['year'] = Sales.Date.dt.year
Sales['month'] = Sales.Date.dt.month
# 统计每年各月份的销售总额（绘制热力图之前，必须将数据转换为交叉表形式）
Summary = Sales.pivot_table(index = 'month', columns = 'year', values = 'Sales', aggfunc = np.sum)
Summary
# 绘制热力图
sns.heatmap(data = Summary, # 指定绘图数据
            cmap = 'PuBuGn', # 指定填充色
            linewidths = .1, # 设置每个单元格边框的宽度
            annot = True, # 显示数值
            fmt = '.1e' # 以科学计算法显示数据
            )
#添加标题
plt.title('每年各月份销售总额热力图')
# 显示图形
plt.show()
</code></pre><h3 id="强调">强调</h3>
<pre><code>平时一定要做到自我思考，自我提升
	由已知去推未知，不要仅仅只局限于老师讲了什么才会什么
    
爬虫对一名数据分析师来说是一门必须掌握的技能

# 爬取房产信息理想化程序
	1.用户可以指定爬取哪个城市
    	1.中文		转成		拼音(借助于第三方模块)
        2.直接规定用户必须按照你设置好的输入方式输入
    2.之后用户输入指定城市里面的区域
    3.然后一键爬取所有房产信息
    
    
    
    
1.当你写的代码运行之后报错，不要慌张一定要学会看错误提示
	最重要的就是最后一行错误提示，前面的你都可以不看
    NameError: name 'sec_Buildings' is not defined
	变量名写错了
	IndexError: list index out of range
</code></pre><h3 id="补充">补充</h3>
<pre><code>利用爬虫程序爬取到的数据可以保存到三个地方
	1.普通的文本文件
    2.excel表格
    3.数据库中
    	关系型数据库:MySQL
            将excel数据直接同步到MySQL的表中(自己研究一下试试)
        非关系型数据库:MongoDB
            
 针对表格数据的读取
	如果文件后缀名是.csv或者普通的.txt
    	那么使用read_csv
    如果文件后缀名是.xlsx
    	那么使用read_excel
</code></pre><h3 id="作业">作业</h3>
<pre><code>熟练掌握不下于十五种图形
1.echarts
网址:https://echarts.apache.org/examples/zh/index.html#chart-type-line
尽量将该网站左侧图形及对应的结构掌握


2.highcharts
网址：https://www.highcharts.com.cn/demo/highcharts
尽量将该网站左侧图形及对应的结构掌握  


</code></pre>]]></content>
		</item>
		
		<item>
			<title>Matplotlib之饼图、条形图、直方图</title>
			<link>https://Eddy-622.github.io/posts/matplotlib%E4%B9%8B%E9%A5%BC%E5%9B%BE%E6%9D%A1%E5%BD%A2%E5%9B%BE%E7%9B%B4%E6%96%B9%E5%9B%BE/</link>
			<pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/matplotlib%E4%B9%8B%E9%A5%BC%E5%9B%BE%E6%9D%A1%E5%BD%A2%E5%9B%BE%E7%9B%B4%E6%96%B9%E5%9B%BE/</guid>
			<description>今日内容 数据可视化 大白话其实就是画图画图的工具有很多我们先学习一个用python代码画图的方式之后我们还会学习画图软件Teableau、PowerBI可视化模块 matplotlib# 数据分析三剑客之一numpypandasmatplotlib是一个强大的python绘图和数据可视化工具包，数据可视化也是我们数据分析重要环节之一，可以帮助我们分析出很多价值信息，也是数据分析的最后一个可视化阶段# 下载模块python开发环境pip3 install matplotlibconda环境conda install matplotlib# 在notebook环境下直接执行下载命令需要在前面加一个感叹号# 在anaconda提供的环境下数据分析相关的模块都已经提前下载好了# 基本使用(也需要起别名)import numpy as npimport pandas as pdimport matplotlib.pyplot as plt&#39;&#39;&#39;以后在使用notebook环境的时候，可以直接先将上面的三个模块全部导入&#39;&#39;&#39;基本使用 &amp;#34;&amp;#34;&amp;#34;一定要知道每个图形擅长领域并且尽量记忆图形的大致轮廓&amp;#34;&amp;#34;&amp;#34;# 如果想让你绘制的图形弹窗展示 %matplotlib # 执行一遍之后删除即可 饼图的绘制 饼图属于最传统的统计图形之一，几乎随处可见，例如大型公司的屏幕墙、各种年度论坛的演示稿以及各大媒体发布的数据统计报告等;饼图是将一个圆分割成不同大小的楔(扇)形，而圆中的每一个楔形代表了不同的类别值，通常根据楔形的面积大小来判断类别值的差异;pie(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, labeldistance=1.1)x:指定绘图的数据 explode:指定饼图某些部分的突出显示，即呈现爆炸式labels:为饼图添加标签说明，类似于图例说明 colors:指定饼图的填充色 autopct:自动添加百分比显示，可以采用格式化的方法显示 pctdistance:设置百分比标签与圆心的距离 labeldistance:设置各扇形标签(图例)与圆心的距离# 导入第三方模块import matplotlib.</description>
			<content type="html"><![CDATA[<h1 id="今日内容">今日内容</h1>
<h3 id="数据可视化">数据可视化</h3>
<pre><code>大白话其实就是画图
	画图的工具有很多
    我们先学习一个用python代码画图的方式
    之后我们还会学习画图软件Teableau、PowerBI
</code></pre><h3 id="可视化模块">可视化模块</h3>
<pre><code>matplotlib
# 数据分析三剑客之一
	numpy
    pandas
    matplotlib

是一个强大的python绘图和数据可视化工具包，数据可视化也是我们数据分析重要环节之一，可以帮助我们分析出很多价值信息，也是数据分析的最后一个可视化阶段


# 下载模块
python开发环境
	pip3 install matplotlib
conda环境
	conda install matplotlib
# 在notebook环境下直接执行下载命令需要在前面加一个感叹号
# 在anaconda提供的环境下数据分析相关的模块都已经提前下载好了



# 基本使用(也需要起别名)
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
'''
以后在使用notebook环境的时候，可以直接先将上面的三个模块全部导入
'''
</code></pre><h3 id="基本使用">基本使用</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">一定要知道每个图形擅长领域
</span><span class="s2">并且尽量记忆图形的大致轮廓
</span><span class="s2">&#34;&#34;&#34;</span>
<span class="c1"># 如果想让你绘制的图形弹窗展示</span>
<span class="o">%</span><span class="n">matplotlib</span>  <span class="c1"># 执行一遍之后删除即可</span>
</code></pre></div><h3 id="饼图的绘制">饼图的绘制</h3>
<pre><code>饼图属于最传统的统计图形之一，几乎随处可见，例如大型公司的屏幕墙、各种年度论坛的演示稿以及各大媒体发布的数据统计报告等;
饼图是将一个圆分割成不同大小的楔(扇)形，而圆中的每一个楔形代表了不同的类别值，通常根据楔形的面积大小来判断类别值的差异;

pie(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, labeldistance=1.1)

x:指定绘图的数据 
explode:指定饼图某些部分的突出显示，即呈现爆炸式
labels:为饼图添加标签说明，类似于图例说明 
colors:指定饼图的填充色 
autopct:自动添加百分比显示，可以采用格式化的方法显示 
pctdistance:设置百分比标签与圆心的距离 
labeldistance:设置各扇形标签(图例)与圆心的距离
  
# 导入第三方模块
import matplotlib.pyplot as plt
# 解决中文乱码情况
plt.rcParams['font.sans-serif'] = ['SimHei']
# 构造数据
edu = [0.2515,0.3724,0.3336,0.0368,0.0057]
labels = ['中专','大专','本科','硕士','其他']
explode = [0,0.1,0,0,0]
# 绘制饼图                                                                              plt.axes(aspect='equal')  # 如果python版本较低可能是扁的需要加该代码   
plt.pie(x = edu,  # 绘图数据
        labels=labels,  # 添加教育水平标签
        autopct='%.1f%%',  # 设置百分比的格式，这里保留一位小数
        explode = explode
       )
# 显示图形
plt.show()
</code></pre><h3 id="条形图的绘制">条形图的绘制</h3>
<pre><code>虽然饼图可以很好地表达离散型变量在各水平上的差异，但其不擅长对比差异不大或水平值过多的离散型变量，因为饼图是通过各扇形面积的大小来比价差异的，面积的比较有时并不直观;
对于条形图而言，对比的是柱形的高低，柱体越高，代表的数值越大，反之亦然;

bar(x, height, width=0.8, bottom=None, color=None, edgecolor=None, tick_label=None, label = None, ecolor=None)

x:传递数值序列，指定条形图中x轴上的刻度值 
height:传递数值序列，指定条形图y轴上的高度
width:指定条形图的宽度，默认为0.8 
bottom:用于绘制堆叠条形图 
color:指定条形图的填充色 
edgecolor:指定条形图的边框色 
tick_label:指定条形图的刻度标签 
label:指定条形图的标签，一般用以添加图例
  
 
'''垂直条形图'''
import pandas as pd
# 读入数据
GDP = pd.read_excel(r'Province GDP 2017.xlsx')

# 设置绘图风格（不妨使用R语言中的ggplot2风格）
plt.style.use('ggplot')
# 绘制条形图
plt.bar(x = range(GDP.shape[0]), # 指定条形图x轴的刻度值
        height = GDP.GDP, # 指定条形图y轴的数值
        tick_label = GDP.Province, # 指定条形图x轴的刻度标签
        color = 'steelblue', # 指定条形图的填充色
       )
# 添加y轴的标签
plt.ylabel('GDP(万亿)')
# 添加条形图的标题
plt.title('2017年度6个省份GDP分布')
# 为每个条形图添加数值标签
for x,y in enumerate(GDP.GDP):
    plt.text(x,y+0.1,'%s' %round(y,1),ha='center')
# 显示图形    
plt.show()


'''水平条形图'''
# 对读入的数据做升序排序
GDP.sort_values(by = 'GDP', inplace = True)
# 绘制条形图
plt.barh(y = range(GDP.shape[0]), # 指定条形图y轴的刻度值
        width = GDP.GDP, # 指定条形图x轴的数值
        tick_label = GDP.Province, # 指定条形图y轴的刻度标签
        color = 'steelblue', # 指定条形图的填充色
       )
# 添加x轴的标签
plt.xlabel('GDP(万亿)')
# 添加条形图的标题
plt.title('2017年度6个省份GDP分布')
# 为每个条形图添加数值标签
for y,x in enumerate(GDP.GDP):
    plt.text(x+0.1,y,'%s' %round(x,1),va='center')
# 显示图形    
plt.show()


'''交叉条形图'''
HuRun = pd.read_excel('HuRun.xlsx')
# Pandas模块之水平交错条形图
HuRun_reshape = HuRun.pivot_table(index = 'City', columns='Year',
values='Counts').reset_index()
# 对数据集降序排序
HuRun_reshape.sort_values(by = 2016, ascending = False, inplace = True)
HuRun_reshape.plot(x = 'City', y = [2016,2017], kind = 'bar', 
color = ['steelblue', 'indianred'], 
                              # 用于旋转x轴刻度标签的角度，0表示水平显示刻度标签
                   	rot = 0, 
                   	width = 0.8, title = '近两年5个城市亿万资产家庭数比较')

# 添加y轴标签
plt.ylabel('亿万资产家庭数')
plt.xlabel('')
plt.show()
</code></pre><h3 id="直方图的绘制">直方图的绘制</h3>
<pre><code>直方图一般用来观察数据的分布形态，横坐标代表数值的均匀分段，纵坐标代表每个段内的观测数量(频数);

一般直方图都会与核密度图搭配使用，目的是更加清晰地掌握数据的分布特征;

plt.hist(x, bins=10, normed=False, orientation='vertical', color=None, label=None)
x:指定要绘制直方图的数据。 
bins:指定直方图条形的个数。
normed:是否将直方图的频数转换成频率
orientation:设置直方图的摆放方向，默认为垂直方向 
color:设置直方图的填充色 
edgecolor:设置直方图边框色 
label:设置直方图的标签，可通过legend展示其图例
  
  
  
Titanic = pd.read_csv('titanic_train.csv')

# 检查年龄是否有缺失（如果数据中存在缺失值，将无法绘制直方图）
any(Titanic.Age.isnull())
# 不妨删除含有缺失年龄的观察
Titanic.dropna(subset=['Age'], inplace=True)
# 绘制直方图
plt.hist(x = Titanic.Age, # 指定绘图数据
         bins = 20, # 指定直方图中条块的个数
         color = 'steelblue', # 指定直方图的填充色
         edgecolor = 'black' # 指定直方图的边框色
         )
# 添加x轴和y轴标签
plt.xlabel('年龄')
plt.ylabel('频数')
# 添加标题
plt.title('乘客年龄分布')
# 显示图形
plt.show()
</code></pre><h3 id="补充">补充</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 枚举</span>
<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">111</span><span class="p">,</span><span class="mi">222</span><span class="p">,</span><span class="mi">333</span><span class="p">,</span><span class="mi">444</span><span class="p">,</span><span class="mi">555</span><span class="p">]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">l</span><span class="p">:</span>
     <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="mi">111</span>
<span class="mi">222</span>
<span class="mi">333</span>
<span class="mi">444</span>
<span class="mi">555</span>
<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
     <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
<span class="mi">0</span> 	<span class="mi">111</span>
<span class="mi">1</span> 	<span class="mi">222</span>
<span class="mi">2</span> 	<span class="mi">333</span>
<span class="mi">3</span> 	<span class="mi">444</span>
<span class="mi">4</span> 	<span class="mi">555</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>数据分析之数据处理、筛选、分组、聚合</title>
			<link>https://Eddy-622.github.io/posts/pandas%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AD%9B%E9%80%89%E5%88%86%E7%BB%84%E8%81%9A%E5%90%88/</link>
			<pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/pandas%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AD%9B%E9%80%89%E5%88%86%E7%BB%84%E8%81%9A%E5%90%88/</guid>
			<description>数据概览 df = pd.read_csv(r&amp;#39;sec_cars.csv&amp;#39;)# 1.查看表格的前N条数据 df.head(5) # 不写默认也是五条 # 2.查看表格的后N条数据 df.tail(5) # 不写默认也是五条 # 3.查看表的行列 df.shape # 结果是一个元组(行数,列数) # 4.获取表中所有的列名称 df.columns# 5.获取表中所有的行索引 df.index# 6.查看数据的数据类型 df.dtypes # 在处理数据之前应该用该方法查看一下数据类型 # 7.快速统计 df.describe() # 默认只会统计数字类型的数据 df.describe(include=&amp;#39;object&amp;#39;) # 可以通过include参数指定统计的数据类型 df.describe(include=&amp;#39;all&amp;#39;) 行列操作 df1 = pd.read_excel(r&amp;#39;data_test02.xlsx&amp;#39;,header=None)# 1.修改列名称 df1.rename(columns={0:&amp;#39;序号&amp;#39;})df1.rename(columns={0:&amp;#39;序号&amp;#39;,1:&amp;#39;类型&amp;#39;,2:&amp;#39;颜色&amp;#39;,3:&amp;#39;尺码&amp;#39;},inplace=True)# &amp;#39;&amp;#39;&amp;#39; # # 能修改 但是会报个错误 可以添加下列配置 # pd.</description>
			<content type="html"><![CDATA[<h2 id="数据概览">数据概览</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;sec_cars.csv&#39;</span><span class="p">)</span>
<span class="c1"># 1.查看表格的前N条数据</span>
<span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>  <span class="c1"># 不写默认也是五条</span>
<span class="c1"># 2.查看表格的后N条数据</span>
<span class="n">df</span><span class="o">.</span><span class="n">tail</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>  <span class="c1"># 不写默认也是五条</span>
<span class="c1"># 3.查看表的行列</span>
<span class="n">df</span><span class="o">.</span><span class="n">shape</span>  <span class="c1"># 结果是一个元组(行数,列数)</span>
<span class="c1"># 4.获取表中所有的列名称</span>
<span class="n">df</span><span class="o">.</span><span class="n">columns</span>
<span class="c1"># 5.获取表中所有的行索引</span>
<span class="n">df</span><span class="o">.</span><span class="n">index</span>
<span class="c1"># 6.查看数据的数据类型</span>
<span class="n">df</span><span class="o">.</span><span class="n">dtypes</span>  <span class="c1"># 在处理数据之前应该用该方法查看一下数据类型</span>
<span class="c1"># 7.快速统计</span>
<span class="n">df</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>  <span class="c1"># 默认只会统计数字类型的数据</span>
<span class="n">df</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="c1"># 可以通过include参数指定统计的数据类型</span>
<span class="n">df</span><span class="o">.</span><span class="n">describe</span><span class="p">(</span><span class="n">include</span><span class="o">=</span><span class="s1">&#39;all&#39;</span><span class="p">)</span> 
</code></pre></div><h2 id="行列操作">行列操作</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;data_test02.xlsx&#39;</span><span class="p">,</span><span class="n">header</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>

<span class="c1"># 1.修改列名称</span>
<span class="n">df1</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="s1">&#39;序号&#39;</span><span class="p">})</span>
<span class="n">df1</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">:</span><span class="s1">&#39;序号&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">:</span><span class="s1">&#39;类型&#39;</span><span class="p">,</span><span class="mi">2</span><span class="p">:</span><span class="s1">&#39;颜色&#39;</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="s1">&#39;尺码&#39;</span><span class="p">},</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="c1"># &#39;&#39;&#39;</span>
<span class="c1"># # 能修改 但是会报个错误 可以添加下列配置</span>
<span class="c1"># pd.set_option(&#39;mode.chained_assignment&#39;,None)</span>
<span class="c1"># &#39;&#39;&#39;</span>

<span class="n">df1</span><span class="p">[</span><span class="s1">&#39;序号&#39;</span><span class="p">]</span>  <span class="c1"># 获取序号列对应的列数据</span>
<span class="n">df1</span><span class="p">[</span><span class="s1">&#39;库存&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">666</span>  <span class="c1"># 加了赋值符号就是设值</span>
<span class="c1"># 1.如果该列名称存在则修改列数据</span>
<span class="c1"># 2.如果该列名称不存在则创建新的</span>
<span class="n">df1</span><span class="p">[</span><span class="s1">&#39;测试&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">df1</span><span class="p">[</span><span class="s1">&#39;尺码&#39;</span><span class="p">]</span><span class="o">*</span><span class="n">df1</span><span class="p">[</span><span class="s1">&#39;库存&#39;</span><span class="p">]</span>
<span class="c1"># 注意:新的列数据可以是直接写死的，也可以是通过其他字段动态计算</span>

<span class="n">df1</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="s1">&#39;插队&#39;</span><span class="p">,</span><span class="mi">6969</span><span class="p">)</span>
<span class="c1"># 还可以控制插入列的位置</span>
</code></pre></div><h2 id="数据筛选">数据筛选</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 以二手车为例</span>
<span class="c1"># 1.获取列数据</span>
<span class="c1"># df[&#39;Brand&#39;]  # 只获取一列数据</span>
<span class="c1"># df[[&#39;Brand&#39;,&#39;Name&#39;,&#39;New_price&#39;]]  # 获取多列一定要是表格的形式</span>
<span class="c1"># 2.获取行数据</span>
<span class="c1"># df.loc[df[&#39;Brand&#39;]==&#39;众泰&#39;]  # 只有一个条件的</span>
<span class="s1">&#39;&#39;&#39;逻辑运算符在连接条件的时候 条件都必须加括号&#39;&#39;&#39;</span>
<span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Brand&#39;</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;众泰&#39;</span><span class="p">)</span><span class="o">&amp;</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Discharge&#39;</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;国4&#39;</span><span class="p">)]</span>

<span class="c1"># 3.针对筛选出来的行数据 做列数据的过滤</span>
<span class="n">df</span><span class="o">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Brand&#39;</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;众泰&#39;</span><span class="p">)</span><span class="o">&amp;</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s1">&#39;Discharge&#39;</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;国4&#39;</span><span class="p">),[</span><span class="s1">&#39;Brand&#39;</span><span class="p">,</span><span class="s1">&#39;Name&#39;</span><span class="p">]]</span>
</code></pre></div><h2 id="数据处理">数据处理</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">sec_car</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;sec_cars.csv&#39;</span><span class="p">)</span>
<span class="n">sec_car</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
<span class="n">sec_car</span><span class="o">.</span><span class="n">dtypes</span>
<span class="c1"># 日期应该是日期类型而不是字符串类型</span>
<span class="c1"># 新车价格应该是数字类型而不是字符串类型</span>
<span class="n">sec_car</span><span class="p">[</span><span class="s1">&#39;Boarding_time&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">to_datetime</span><span class="p">(</span><span class="n">sec_car</span><span class="p">[</span><span class="s1">&#39;Boarding_time&#39;</span><span class="p">],</span>
                                         <span class="n">format</span><span class="o">=</span><span class="s1">&#39;%Y年%m月&#39;</span>
                                         <span class="p">)</span>
<span class="c1"># 常见的日期符号 %Y %m %d %H %M %S %X</span>
<span class="n">sec_car</span><span class="o">.</span><span class="n">dtypes</span>

<span class="n">sec_car</span><span class="o">.</span><span class="n">New_price</span>  <span class="c1"># 新车价格里面有字符串类型</span>
<span class="c1"># 1.需要先将字符串去除(方式1:字符串的替换 方式2:切片操作)</span>
<span class="n">sec_car</span><span class="o">.</span><span class="n">New_price</span><span class="o">.</span><span class="n">str</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>  <span class="c1"># 一定要加上关键字str</span>
<span class="c1"># 2.之后才能数据类型转换</span>
<span class="n">sec_car</span><span class="o">.</span><span class="n">New_price</span><span class="o">.</span><span class="n">str</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>  <span class="c1"># astype数据类型转换</span>

<span class="n">sec_car</span><span class="p">[</span><span class="s1">&#39;New_price&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">sec_car</span><span class="o">.</span><span class="n">New_price</span><span class="o">.</span><span class="n">str</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>


<span class="n">data</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;data_test04.xlsx&#39;</span><span class="p">)</span>
<span class="n">data</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
<span class="c1"># 判断数据是否有重复项</span>
<span class="n">data</span><span class="o">.</span><span class="n">duplicated</span><span class="p">()</span>
<span class="c1"># 删除重复的数据项</span>
<span class="n">data</span><span class="o">.</span><span class="n">drop_duplicates</span><span class="p">()</span>
</code></pre></div><h2 id="缺失值处理">缺失值处理</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">data05</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_excel</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;data_test05.xlsx&#39;</span><span class="p">)</span>
<span class="c1"># 1.当样本数据量特别多的时候，可以考虑直接删除个别缺失数据</span>
<span class="c1"># 2.当缺失数据占比较高的时候不能直接删除，而应该使用填充数据的方式</span>

<span class="c1"># 判断是否含有缺失值</span>
<span class="n">data05</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span>  <span class="c1"># 不太好</span>
<span class="n">data05</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span><span class="o">.</span><span class="n">any</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>  <span class="c1"># 判断列是否有缺失数据</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">axis=0表示列字段
</span><span class="s2">axis=1表示行索引
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="c1"># 计算缺失数据的占比</span>
<span class="n">data05</span><span class="o">.</span><span class="n">isnull</span><span class="p">()</span><span class="o">.</span><span class="n">sum</span><span class="p">(</span><span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span><span class="o">/</span><span class="n">data05</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="c1"># 不能够直接删除缺失数据data05.dropna()</span>
<span class="c1"># 也不能一股脑的瞎填充data05.fillna(666)</span>
<span class="c1">############################################################</span>
<span class="n">data05</span><span class="o">.</span><span class="n">fillna</span><span class="p">(</span><span class="n">value</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">&#39;gender&#39;</span><span class="p">:</span><span class="n">data05</span><span class="o">.</span><span class="n">gender</span><span class="o">.</span><span class="n">mode</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span>  <span class="c1"># 众数:可以有一个也可能是多个</span>
  <span class="s1">&#39;age&#39;</span><span class="p">:</span><span class="n">data05</span><span class="o">.</span><span class="n">age</span><span class="o">.</span><span class="n">mean</span><span class="p">(),</span>  <span class="c1"># 平均值</span>
  <span class="s1">&#39;income&#39;</span><span class="p">:</span><span class="n">data05</span><span class="o">.</span><span class="n">income</span><span class="o">.</span><span class="n">median</span><span class="p">()</span>  <span class="c1"># 薪资推荐使用:中位数</span>
<span class="p">},</span> <span class="n">inplace</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>
<span class="c1">############################################################</span>
<span class="n">data05</span>
</code></pre></div><h2 id="数据汇总">数据汇总</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">data06</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;diamonds.csv&#39;</span><span class="p">)</span>

<span class="n">pd</span><span class="o">.</span><span class="n">pivot_table</span><span class="p">(</span><span class="n">data06</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="s1">&#39;color&#39;</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="s1">&#39;price&#39;</span><span class="p">,</span> <span class="n">aggfunc</span><span class="o">=</span><span class="s1">&#39;mean&#39;</span><span class="p">)</span>

<span class="n">pd</span><span class="o">.</span><span class="n">pivot_table</span><span class="p">(</span><span class="n">data06</span><span class="p">,</span> 
               <span class="n">index</span> <span class="o">=</span> <span class="s1">&#39;color&#39;</span><span class="p">,</span> 
               <span class="n">columns</span><span class="o">=</span><span class="s1">&#39;clarity&#39;</span><span class="p">,</span> 
               <span class="n">values</span><span class="o">=</span><span class="s1">&#39;price&#39;</span><span class="p">,</span> 
               <span class="n">aggfunc</span><span class="o">=</span><span class="s1">&#39;size&#39;</span><span class="p">)</span>
<span class="c1"># 当数据量小于10万 基本上使用常用软件excel SPSS即可操作</span>
<span class="c1"># 高于10万之后才可能需要使用代码处理</span>
</code></pre></div><h2 id="分组与聚合">分组与聚合</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 对颜色进行分组</span>
<span class="c1"># data06.groupby(by=[&#39;color&#39;,])  # 按照单个字段分组</span>
<span class="c1"># 分组之后如果直接想看结果可以使用groups  粗略的查看</span>
<span class="c1"># data06.groupby(by=[&#39;color&#39;,]).groups</span>

<span class="c1"># 分组一般都是配合聚合函数一起使用</span>
<span class="c1"># gg = data06.groupby(by=[&#39;color&#39;,])  # 先分组</span>
<span class="c1"># res = gg.aggregate({&#39;color&#39;:np.size})  # 再聚合</span>
<span class="c1"># res</span>

<span class="c1"># 可以对多个字段聚合    针对聚合函数最好都用np点出来</span>
<span class="c1"># res1 = gg.aggregate({&#39;color&#39;:np.size,</span>
<span class="c1">#                      &#39;price&#39;:np.mean,</span>
<span class="c1">#                      &#39;table&#39;:np.max</span>
<span class="c1">#                     })</span>
<span class="c1"># res1</span>

<span class="c1"># 还可以按照多个字段分组</span>
<span class="c1">######################################</span>
<span class="n">gg1</span> <span class="o">=</span> <span class="n">data06</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">,</span><span class="s1">&#39;cut&#39;</span><span class="p">])</span>
<span class="n">res2</span> <span class="o">=</span> <span class="n">gg1</span><span class="o">.</span><span class="n">aggregate</span><span class="p">({</span><span class="s1">&#39;color&#39;</span><span class="p">:</span><span class="n">np</span><span class="o">.</span><span class="n">size</span><span class="p">,</span>
                     <span class="s1">&#39;price&#39;</span><span class="p">:</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">,</span>
                     <span class="s1">&#39;table&#39;</span><span class="p">:</span><span class="n">np</span><span class="o">.</span><span class="n">max</span>
                    <span class="p">})</span>
<span class="n">res2</span>
<span class="c1">######################################</span>
<span class="c1"># 调整变量名的顺序</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">res2</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;price&#39;</span><span class="p">,</span><span class="s1">&#39;color&#39;</span><span class="p">,</span><span class="s1">&#39;table&#39;</span><span class="p">])</span>
<span class="n">result</span>

<span class="c1"># 数据集重命名</span>
<span class="n">result</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;color&#39;</span><span class="p">:</span><span class="s1">&#39;个数&#39;</span><span class="p">,</span>
                       <span class="s1">&#39;price&#39;</span><span class="p">:</span><span class="s1">&#39;均价&#39;</span><span class="p">,</span>
                       <span class="s1">&#39;table&#39;</span><span class="p">:</span><span class="s1">&#39;最大面积&#39;</span><span class="p">},</span> 
              <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">result</span>
</code></pre></div><h2 id="分组与聚合练习题">分组与聚合练习题</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># pandas中的read_html可以爬取页面上table标签里面的数据</span>
<span class="n">cp</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_html</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;https://baike.baidu.com/item/NBA</span><span class="si">%E</span><span class="s1">6</span><span class="si">%80%</span><span class="s1">BB</span><span class="si">%E</span><span class="s1">5</span><span class="si">%86%</span><span class="s1">A0</span><span class="si">%E</span><span class="s1">5</span><span class="si">%86%</span><span class="s1">9B/2173192?fr=aladdin&#39;</span><span class="p">)</span>
<span class="c1"># 结果是一个列表数据类型 我们只需要第一个元素</span>
<span class="n">ch</span> <span class="o">=</span> <span class="n">cp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="c1"># 列名称数据处理</span>
<span class="n">ch</span><span class="o">.</span><span class="n">columns</span> <span class="o">=</span> <span class="n">ch</span><span class="o">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1"># 将第一行数据替换成列名称</span>


<span class="c1"># 将第一行数据删除</span>
<span class="n">ch</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> 
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">这里规律相反
</span><span class="s2">axis=0表示行
</span><span class="s2">axis=1表示列
</span><span class="s2">如果记不住以后直接先查看该方法的案例提示再操作
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="c1"># 1.统计每个球队夺冠的次数</span>
<span class="n">cpm</span> <span class="o">=</span> <span class="n">ch</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;冠军&#39;</span><span class="p">,])</span>  <span class="c1"># 先分组</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">cpm</span><span class="o">.</span><span class="n">aggregate</span><span class="p">({</span><span class="s2">&#34;冠军&#34;</span><span class="p">:</span><span class="n">np</span><span class="o">.</span><span class="n">size</span><span class="p">})</span>
<span class="n">res</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;冠军&#39;</span><span class="p">:</span><span class="s1">&#39;夺冠次数&#39;</span><span class="p">},</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="c1"># 对夺冠次数进行排序</span>
<span class="n">res</span><span class="p">[</span><span class="s1">&#39;夺冠次数&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>


<span class="n">cpm1</span> <span class="o">=</span> <span class="n">ch</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;冠军&#39;</span><span class="p">,</span><span class="s1">&#39;FMVP&#39;</span><span class="p">])</span>
<span class="n">res1</span> <span class="o">=</span> <span class="n">cpm1</span><span class="o">.</span><span class="n">aggregate</span><span class="p">({</span>
        <span class="s1">&#39;FMVP&#39;</span><span class="p">:</span><span class="n">np</span><span class="o">.</span><span class="n">size</span><span class="p">,</span>
<span class="p">})</span>
</code></pre></div><h2 id="数据的纵向合并添加数据项">数据的纵向合并(添加数据项)</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">df1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
  <span class="s1">&#39;name&#39;</span><span class="p">:[</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span><span class="s1">&#39;李四&#39;</span><span class="p">,</span><span class="s1">&#39;王二&#39;</span><span class="p">],</span> 
  <span class="s1">&#39;age&#39;</span><span class="p">:[</span><span class="mi">21</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">22</span><span class="p">],</span> 
  <span class="s1">&#39;gender&#39;</span><span class="p">:[</span><span class="s1">&#39;男&#39;</span><span class="p">,</span><span class="s1">&#39;女&#39;</span><span class="p">,</span><span class="s1">&#39;男&#39;</span><span class="p">]}</span>
<span class="p">)</span>
<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
  <span class="s1">&#39;name&#39;</span><span class="p">:[</span><span class="s1">&#39;丁一&#39;</span><span class="p">,</span><span class="s1">&#39;赵五&#39;</span><span class="p">],</span> 
  <span class="s1">&#39;age&#39;</span><span class="p">:[</span><span class="mi">23</span><span class="p">,</span><span class="mi">22</span><span class="p">],</span> 
  <span class="s1">&#39;gender&#39;</span><span class="p">:[</span><span class="s1">&#39;女&#39;</span><span class="p">,</span><span class="s1">&#39;女&#39;</span><span class="p">]}</span>
<span class="p">)</span>

<span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">])</span>

<span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">]</span> <span class="p">,</span> <span class="n">keys</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;df1&#39;</span><span class="p">,</span><span class="s1">&#39;df2&#39;</span><span class="p">])</span>

<span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">df1</span><span class="p">,</span><span class="n">df2</span><span class="p">])</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span><span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;index&#39;</span><span class="p">])</span>
<span class="c1"># reset_index 生成一个从0开始的新的索引项</span>

<span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
  <span class="s1">&#39;Name&#39;</span><span class="p">:[</span><span class="s1">&#39;丁一&#39;</span><span class="p">,</span><span class="s1">&#39;赵五&#39;</span><span class="p">],</span> 
  <span class="s1">&#39;age&#39;</span><span class="p">:[</span><span class="mi">23</span><span class="p">,</span><span class="mi">22</span><span class="p">],</span> 
  <span class="s1">&#39;gender&#39;</span><span class="p">:[</span><span class="s1">&#39;女&#39;</span><span class="p">,</span><span class="s1">&#39;女&#39;</span><span class="p">]}</span>
<span class="p">)</span>
</code></pre></div><h2 id="数据的横向合并链表操作">数据的横向合并(链表操作)</h2>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">dep
</span><span class="s2">    id    name     desc
</span><span class="s2">
</span><span class="s2">emp
</span><span class="s2">    id    name     gender     dep_id
</span><span class="s2">    
</span><span class="s2">select * from emp inner join dep on emp.dep_id = dep.id;
</span><span class="s2">&#34;&#34;&#34;</span>
<span class="n">df3</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
  <span class="s1">&#39;id&#39;</span><span class="p">:[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span>
  <span class="s1">&#39;name&#39;</span><span class="p">:[</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span><span class="s1">&#39;李四&#39;</span><span class="p">,</span><span class="s1">&#39;王二&#39;</span><span class="p">,</span><span class="s1">&#39;丁一&#39;</span><span class="p">,</span><span class="s1">&#39;赵五&#39;</span><span class="p">],</span>
  <span class="s1">&#39;age&#39;</span><span class="p">:[</span><span class="mi">27</span><span class="p">,</span><span class="mi">24</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">25</span><span class="p">],</span>
  <span class="s1">&#39;gender&#39;</span><span class="p">:[</span><span class="s1">&#39;男&#39;</span><span class="p">,</span><span class="s1">&#39;男&#39;</span><span class="p">,</span><span class="s1">&#39;男&#39;</span><span class="p">,</span><span class="s1">&#39;女&#39;</span><span class="p">,</span><span class="s1">&#39;女&#39;</span><span class="p">]})</span>
<span class="n">df4</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
  <span class="s1">&#39;Id&#39;</span><span class="p">:[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span> 
  <span class="s1">&#39;score&#39;</span><span class="p">:[</span><span class="mi">83</span><span class="p">,</span><span class="mi">81</span><span class="p">,</span><span class="mi">87</span><span class="p">,</span><span class="mi">75</span><span class="p">,</span><span class="mi">86</span><span class="p">,</span><span class="mi">74</span><span class="p">,</span><span class="mi">88</span><span class="p">],</span> 
  <span class="s1">&#39;kemu&#39;</span><span class="p">:[</span><span class="s1">&#39;科目1&#39;</span><span class="p">,</span><span class="s1">&#39;科目1&#39;</span><span class="p">,</span><span class="s1">&#39;科目2&#39;</span><span class="p">,</span><span class="s1">&#39;科目1&#39;</span><span class="p">,</span><span class="s1">&#39;科目2&#39;</span><span class="p">,</span><span class="s1">&#39;科目3&#39;</span><span class="p">,</span><span class="s1">&#39;科目1&#39;</span><span class="p">]})</span>
<span class="n">df5</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">({</span>
  <span class="s1">&#39;id&#39;</span><span class="p">:[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">],</span>
  <span class="s1">&#39;name&#39;</span><span class="p">:[</span><span class="s1">&#39;张三&#39;</span><span class="p">,</span><span class="s1">&#39;王二&#39;</span><span class="p">,</span><span class="s1">&#39;赵五&#39;</span><span class="p">],</span>
  <span class="s1">&#39;income&#39;</span><span class="p">:[</span><span class="mi">13500</span><span class="p">,</span><span class="mi">18000</span><span class="p">,</span><span class="mi">15000</span><span class="p">]})</span>


<span class="n">merge1</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">left</span> <span class="o">=</span> <span class="n">df3</span><span class="p">,</span> 
                  <span class="n">right</span> <span class="o">=</span> <span class="n">df4</span><span class="p">,</span> 
                  <span class="n">how</span> <span class="o">=</span> <span class="s1">&#39;inner&#39;</span><span class="p">,</span> 
                  <span class="n">left_on</span><span class="o">=</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> 
                  <span class="n">right_on</span><span class="o">=</span><span class="s1">&#39;Id&#39;</span><span class="p">)</span>


<span class="n">merge2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">left</span> <span class="o">=</span> <span class="n">merge1</span><span class="p">,</span> 
                  <span class="n">right</span> <span class="o">=</span> <span class="n">df5</span><span class="p">,</span> 
                  <span class="n">how</span> <span class="o">=</span> <span class="s1">&#39;left&#39;</span><span class="p">)</span>  <span class="c1"># 不指定默认找相同的字段</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>数据分析之Numpy基础使用</title>
			<link>https://Eddy-622.github.io/posts/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bnumpy%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</link>
			<pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bnumpy%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</guid>
			<description>今日内容概要  常用方法 常用方式 索引与切片 运算符 函数 随机数模块 赌场输赢案例(输赢概率五五开)  今日内容详细 补充 1.我们尽量做到将所有导入模块的语句写在文件的最上方(开头)
ps:我们可以先直接书写代码，写完之后将所有导入模块的语句全部整理到文件开头
2.在notebook环境下左侧In里面 如果是*号表示正在运行 如果是数字表示已经运行完毕
3.在执行完单元格之后 1.如果没有任何的返回结果 说明改变的是源数据 2.如果有返回结果 说明没有改变源数据,而是产生了新的结果
4.数组的特点 1.数组内所有的元素肯定是相同的数据类型 2.数组的大小无法修改 3.数组的数学运算默认都是挨个元素挨个元素逐一运算
a = array([1,2,3])a + 1 array([1+1,2+1,3+1])​ 4.数组之间做运算一定要确保彼此之间列相同
​ 5.如何查看方法的内部注释 ​
1.shift(先按) + tab(再多按几下)2.在方法的后面加?执行6.其实我们的日常生活中包括将来我们工作之后 操作浮点型的概率都是较高的 所以numpy里面默认也都是浮点型
常用方法 T 数组的转置（对高维数组而言）
li1 = [[1,2,3],[4,5,6]] a = np.array(li1) 二维数组(两行三列) a.T 转置(三行两列)dtype 数组元素的数据类型
a.dtypesize 数组元素的个数（常用）
a.sizendim 数组的维数
ar1 = np.</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>常用方法</li>
<li>常用方式</li>
<li>索引与切片</li>
<li>运算符</li>
<li>函数</li>
<li>随机数模块</li>
<li>赌场输赢案例(输赢概率五五开)</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h3 id="补充">补充</h3>
<p>1.我们尽量做到将所有导入模块的语句写在文件的最上方(开头)</p>
<p>ps:我们可以先直接书写代码，写完之后将所有导入模块的语句全部整理到文件开头</p>
<p>2.在notebook环境下左侧In里面
如果是*号表示正在运行
如果是数字表示已经运行完毕</p>
<p>3.在执行完单元格之后
1.如果没有任何的返回结果
说明改变的是源数据
2.如果有返回结果
说明没有改变源数据,而是产生了新的结果</p>
<p>4.数组的特点
1.数组内所有的元素肯定是相同的数据类型
2.数组的大小无法修改
3.数组的数学运算默认都是挨个元素挨个元素逐一运算</p>
<pre><code>a = array([1,2,3])
a + 1     array([1+1,2+1,3+1])
</code></pre><p>​     4.数组之间做运算一定要确保彼此之间列相同<br>
​ <br>
5.如何查看方法的内部注释
​</p>
<pre><code>1.shift(先按) + tab(再多按几下)
2.在方法的后面加?执行
</code></pre><p>6.其实我们的日常生活中包括将来我们工作之后
操作浮点型的概率都是较高的
所以numpy里面默认也都是浮点型</p>
<h3 id="常用方法">常用方法</h3>
<p>T 数组的转置（对高维数组而言）</p>
<pre><code>li1 = [
      [1,2,3],
      [4,5,6]
  ]  
a = np.array(li1)     二维数组(两行三列) 
a.T     转置(三行两列)
</code></pre><p>dtype 数组元素的数据类型</p>
<pre><code>a.dtype
</code></pre><p>size 数组元素的个数（常用）</p>
<pre><code>a.size
</code></pre><p>ndim 数组的维数</p>
<pre><code>ar1 = np.array([1,2,3,4])
ar1.ndim
</code></pre><p>shape 以元组形式获取行数和列数（常用）</p>
<pre><code>a.shape
</code></pre><p>reshape 修改数组大小(行列)</p>
<pre><code>a.reshape(1,6)
a.reshape(3,2)
</code></pre><h3 id="创建方式">创建方式</h3>
<p>array()  在创建数组的时候可以修改数据类型</p>
<pre><code>l = [1,2,3]
res = np.array(l,dtype='float')  
res.dtype
</code></pre><p>arange()   range的numpy版，支持浮点数</p>
<pre><code>np.arange(0,10,2)     array([0, 2, 4, 6, 8])
np.arange(1.2,2.2,0.4)     array([1.2, 1.6, 2. ])
</code></pre><p>linspace() 类似arange()，第三个参数为数组长度</p>
<pre><code>np.linspace(1,10,20)  
   #在1到10之间生成的二十个数每个数字之间的距离相等
</code></pre><p>zeros()根据指定形状和dtype创建全0数组</p>
<pre><code>np.zeros((2,3),dtype='int')     #快速创建数组
</code></pre><p>ones() 根据指定形状和dtype创建全1数组</p>
<pre><code>np.ones((3,3),dtype='int')  
</code></pre><p>empty() 根据指定形状和dtype创建空数组（随机值）</p>
<pre><code>np.empty((3,3))
</code></pre><p>eye() 根据指定边长和dtype创建单位矩阵</p>
<pre><code>np.eye(5,5)
</code></pre><h3 id="索引与切片">索引与切片</h3>
<p>&lsquo;&lsquo;&lsquo;一维数组与列表在索引和切片上的操作一致&rsquo;&rsquo;&rsquo;
列表</p>
<pre><code>  l = [13,19,22,14,19,11]
   l[1]      #19
   l[-1]      #11
   l[1:3]      #[19, 22]
   
   
age = np.array([13,19,22,14,19,11])
age[1]     #19
age[-1]     #11
age[1:3]     #array([19, 22])
</code></pre><p>&lsquo;&lsquo;&lsquo;二维数组在索引和切片上有新的知识&rsquo;&rsquo;&rsquo;</p>
<pre><code>ar2 = np.array([[1,2,3,4],[6,7,8,9],[22,33,44,55]])
ar2

ar2[1,2]     8
针对二维数组有行索引和列索引  ar2[行索引,列索引]

切片
获取2 3 7 8 
ar2[0:2,1:3]     ar2[行切片,列切片]

冒号左右不写数字表示所有
ar2[1:,]
</code></pre><h2 id="花式索引间断索引">花式索引(间断索引)</h2>
<pre><code>ar1 = np.array([11,22,33,44,55,66,77])
   获取元素11 33 44 77(没有任何规律)
ar1[[0,2,3,6]]     ar1[[索引1,索引2,索引3...]]
</code></pre><h2 id="布尔值索引逻辑索引">布尔值索引(逻辑索引)</h2>
<pre><code>age = np.array([13,19,22,14,19,11,55,78,22,16])
   筛选出年龄大于18岁的数据
age&gt;18     依次判断每个元素是否大于18
   布尔值索引(逻辑索引)
age[age&gt;18]
</code></pre><h3 id="数学函数">数学函数</h3>
<p>常用的数学函数</p>
<pre><code>np.round(arr)
</code></pre><p>​	对各元素四舍五入
​</p>
<pre><code>np.sqrt(arr)
</code></pre><pre><code>计算各元素的算术平方根  
</code></pre>
<pre><code> np.square(arr)
</code></pre><pre><code>计算各元素的平方值
</code></pre>
<pre><code> np.exp(arr)
</code></pre><pre><code>计算以e为底的指数
</code></pre>
<pre><code>np.power(arr, α)
</code></pre><pre><code>计算各元素的指数
</code></pre>
<pre><code>np.log2(arr)
</code></pre><pre><code>计算以2为底各元素的对数
</code></pre>
<pre><code>np.log10(arr)
</code></pre><pre><code>计算以10为底各元素的对数
</code></pre>
<pre><code>np.log(arr)
</code></pre><pre><code>计算以e为底各元素的对数
</code></pre>
<h3 id="统计函数">统计函数</h3>
<pre><code>res = np.array([[ 80.5, 60., 40.1, 20., 90.7],
       [ 10.5, 30., 50.4, 70.3, 90.],
       [ 35.2, 35., 39.8, 39., 31.],
       [91.2, 83.4, 85.6, 67.8, 99.]])
</code></pre><ul>
<li>
<p>&lsquo;&lsquo;&lsquo;简单需求:全部元素&rsquo;&rsquo;&rsquo;
求数组里面最小的数</p>
<pre><code>np.min(res)     等价 res.min()
</code></pre><p>求数组里面最大的数</p>
<pre><code>np.max(res)     等价 res.max()
</code></pre><p>求数组里面所有元素的平均值</p>
<pre><code>np.mean(res)     等价 res.mean()
</code></pre><p>求数组里面所有元素的和</p>
<pre><code>np.sum(res)     等价 res.sum()
</code></pre><p>求数组里面所有元素的中位数</p>
<pre><code>np.median(res)     等价 res.median()
</code></pre><p>求数组里面所有元素的标准差</p>
<pre><code>np.std(res)     等价 res.std()
</code></pre><p>求数组里面所有元素的方差</p>
<pre><code>np.var(res)     等价 res.var()
</code></pre></li>
<li>
<p>&lsquo;&lsquo;&lsquo;复杂需求:以行列为单位&rsquo;&rsquo;&rsquo;</p>
<p>axis参数就是用来控制行列的
0表示列 1表示行</p>
<p>求每一列的最小值</p>
<pre><code>np.min(res,axis=0)     res.min(axis=0)
</code></pre><p>求每一行的最大值</p>
<pre><code>np.min(res,axis=1)     res.max(axis=1)
</code></pre></li>
<li>
<p>&lsquo;&lsquo;&lsquo;不借助与axis参数&rsquo;&rsquo;&rsquo;
不使用axis参数
计算每一行的和</p>
<pre><code>for i in range(res.shape[0]):
     #取出每一行数据再用统计函数即可
  print(np.sum(res[i]))
      
   #计算每一列的平均
for j in range(res.shape[1]):
       #取出每一列数据再用统计函数即可
    print(np.mean(res[:,j]))
</code></pre></li>
</ul>
<h3 id="随机数模块">随机数模块</h3>
<pre><code>   #跟python里面的random模块用法一致
   import random
   random.random
   rand  #给定形状产生随机数组（0到1之间的数）
np.random.rand(3,3)  
   randint(整数范围,size=(行数,列数))
np.random.randint(3,size=(3,3))
   choice  （整数范围,选择的个数）
np.random.choice(10,2)
   shuffle  与random.shuffle相同(随机打乱元素位置)
res = [1,2,3,4]
res1 = np.array([[1,2,3],[4,5,6],[7,8,9]])
np.random.shuffle(res1)
res1
   uniform （起始位置数，终止位置数，个数）
np.random.uniform(0,10,100)
   normal  随机正态分布
np.random.normal(1,5,100)
</code></pre><h3 id="赌场案例">赌场案例</h3>
<pre><code>&quot;&quot;&quot;
jason有10000块钱，去某赌场嗨皮
假设输赢概率都是50%，
并且赢一场赚100，输一场亏100
jason总共玩了1500场
&quot;&quot;&quot;
   总钞票数
money = 10000
   先利用uniform生成1500次0到1之间的随机均匀分布
r = np.random.uniform(0,1,1500)
   判断输赢
for time in r:
    if time &lt; 0.5:
        money -= 100
    else:
        money += 100
money




'''记录每一次赌局完成后的钞票数'''
money = 10000
   起始钱数
pgs = [money]
   先利用uniform生成1500次0到1之间的随机均匀分布
r = np.random.uniform(0,1,1500)
for time in r:
    if time &lt; 0.5:
        money -= 100
    else:
        money += 100
    pgs.append(money)  

'''提前搂一眼后面会详细讲解的matplotlib模块'''
import matplotlib.pyplot as plt
plt.plot(range(1501),pgs)     x轴与y轴坐标数据
plt.show()
</code></pre>]]></content>
		</item>
		
		<item>
			<title>数据分析之环境配置</title>
			<link>https://Eddy-622.github.io/posts/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
			<pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
			<description>今日内容概要  notebook的基本使用 anaconda软件下载 anaconda功能介绍 notebook快捷键操作 数据分析三大模块学习  今日内容详细 notebook的基本使用 下拉框点击python3会创建一个notebook文件
  该文件的特点 1.开发环境是基于ipython模块 2.该文件具有非常易识别的后缀名.ipynb
​ 也就意味着以后遇到该文件只能用notebook环境打开 ​ 如果你收到了后缀名是ipynb的文件应该如何正确的打开呢？ ​ 点击右上方upload按钮，将ipynb文件上传到jupyter内 ​ 即可使用notebook正常打开了
  anaconda软件介绍   虽然我们的jupyter模块已经能够给我们提供python数据分析的notebook环境，但是在数据分析过程中需要使用到大量的第三方模块(200多个)，如果仅仅基于jupyter模块那么需要我们手动下载的模块太多了
  anaconda软件内部也是提供了jupyter模块，不同的是它自动帮你下载了跟数据分析相关的200多个包(也就意味着你自己不需要下载直接可以使用) 并且anaconda内部还提供了其他的数据分析环境和一系列学习文档
  anaconda软件下载  如果你想让anaconda能够正常的呼起你的默认浏览器 一定要确保你的计算机名称中不能含有中文  下载地址:https://www.anaconda.com/products/individual download-section点击下载选择对应的系统，下载的文件是一个.exe结尾的启动文件下载完成后直接双击启动即可(按照提示一步步的点击next即可) 注意该软件下载完毕之后是不能在桌面上展示出来的，第一次启动需要你打开搜索输入anaconda 点击弹出来的anaconda navigator 等待启动完成之后右键任务栏图标把它固定到开始屏幕或者任务栏中 之后就可以鼠标双击启动  anaconda软件介绍  home主页 anaconda给我们提供的很多数据分析相关的开发环境 显示为launch的就是直接可以启动运行使用的 显示为install就是需要额外下载才可以使用的 但是我们目前只需要使用jupyter即可 Envirnments环境 anaconda提前给你准备的数据分析相关的第三方模块(200多个) learning学习环境 给你提供了很多官方权威的学习文档(有空的时候多看看) community社区环境 学习交流平台  主要功能学习 专业名词介绍
cells 单元格(当前正在被编辑的代码区)copy	拷贝paste	粘贴above	在.</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>notebook的基本使用</li>
<li>anaconda软件下载</li>
<li>anaconda功能介绍</li>
<li>notebook快捷键操作</li>
<li>数据分析三大模块学习</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h3 id="notebook的基本使用">notebook的基本使用</h3>
<p>下拉框点击python3会创建一个notebook文件</p>
<ul>
<li>
<p>该文件的特点
1.开发环境是基于ipython模块
2.该文件具有非常易识别的后缀名.ipynb</p>
<p>​    也就意味着以后遇到该文件只能用notebook环境打开
​    如果你收到了后缀名是ipynb的文件应该如何正确的打开呢？
​    点击右上方upload按钮，将ipynb文件上传到jupyter内
​    即可使用notebook正常打开了</p>
</li>
</ul>
<h3 id="anaconda软件介绍">anaconda软件介绍</h3>
<ul>
<li>
<p>虽然我们的jupyter模块已经能够给我们提供python数据分析的notebook环境，但是在数据分析过程中需要使用到大量的第三方模块(200多个)，如果仅仅基于jupyter模块那么需要我们手动下载的模块太多了</p>
</li>
<li>
<p>anaconda软件内部也是提供了jupyter模块，不同的是它自动帮你下载了跟数据分析相关的200多个包(也就意味着你自己不需要下载直接可以使用)
并且anaconda内部还提供了其他的数据分析环境和一系列学习文档</p>
</li>
</ul>
<h3 id="anaconda软件下载">anaconda软件下载</h3>
<ul>
<li>如果你想让anaconda能够正常的呼起你的默认浏览器
一定要确保你的计算机名称中不能含有中文</li>
</ul>
<pre><code>下载地址:https://www.anaconda.com/products/individual   download-section
点击下载选择对应的系统，下载的文件是一个.exe结尾的启动文件
下载完成后直接双击启动即可(按照提示一步步的点击next即可)
</code></pre><ul>
<li>注意该软件下载完毕之后是不能在桌面上展示出来的，第一次启动需要你打开搜索输入anaconda
点击弹出来的anaconda navigator
等待启动完成之后右键任务栏图标把它固定到开始屏幕或者任务栏中
之后就可以鼠标双击启动</li>
</ul>
<h3 id="anaconda软件介绍-1">anaconda软件介绍</h3>
<ul>
<li>home主页
anaconda给我们提供的很多数据分析相关的开发环境
显示为launch的就是直接可以启动运行使用的
显示为install就是需要额外下载才可以使用的
但是我们目前只需要使用jupyter即可</li>
<li>Envirnments环境
anaconda提前给你准备的数据分析相关的第三方模块(200多个)</li>
<li>learning学习环境
给你提供了很多官方权威的学习文档(有空的时候多看看)</li>
<li>community社区环境
学习交流平台</li>
</ul>
<h3 id="主要功能学习">主要功能学习</h3>
<p>专业名词介绍</p>
<pre><code>cells  单元格(当前正在被编辑的代码区)
	copy	拷贝
	paste	粘贴
	above	在...上面
	below	在...下面
	replace	替换
	delete	删除
	undo	撤销
	split	分割
	merge	合并
	up		上
	down	下
	kernel  内核
</code></pre><p>File功能栏</p>
<pre><code>Download as      将文件按照指定的文件类型导出
</code></pre><p>Edit功能栏</p>
<pre><code>cut cells
    copy cells
    paste cells
    delete cells
    undo delete cells
    merge cells above/below 
    move  cell up/down
</code></pre><p>View功能栏</p>
<pre><code>toggle line numbers  显示同一个单元格内的代码行数
</code></pre><p>inert功能栏</p>
<pre><code>insert cell above/below
</code></pre><p>cell功能栏</p>
<pre><code>run cells
    run cells and select below      运行当前单元格并选中下一个
    run cells and insert below      运行当前单元格并下面插入一个
</code></pre><p>kernel功能栏
里面都是跟系统服务相关，一般情况下不要动</p>
<p>Widgets功能栏
额外的功能补充</p>
<p>Help功能栏</p>
<pre><code>user interface tour      用户教程
</code></pre><h3 id="快捷键">快捷键</h3>
<ul>
<li>
<p>notebook中的两种模式
命令行模式(蓝色)
按esc进入命令行模式(该模式下可以使用键盘快捷键)</p>
<pre><code>编辑模式(绿色)
  直接输入内容
</code></pre>
<p>1.运行当前单元格
ctrl + enter</p>
<p>2.运行当前单元格并在下面重新开启一个(如果下面已经有空的那就选中)
shift + enter</p>
<p>3.在当前单元格的上面添加一个单元格
先按esc进入命令行模式
再按a键</p>
<p>4.在当前单元格的下面添加一个单元格
先按esc进入命令行模式
再按b键</p>
<p>5.利用markdown语法书写标题
先按esc进入命令行模式
再按m键，然后按enter直接编写即可
最后运行即可展示出标题</p>
<p>6.删除当前单元格
先按esc进入命令行模式
再连续按两下d键</p>
<p>7.回退删除
先按esc进入命令行模式、
按z键</p>
</li>
</ul>
<h3 id="数据分析之numpy">数据分析之Numpy</h3>
<pre><code>1.Numpy是高性能科学计算和数据分析的基础包
2.也是pandas等其他数据分析的工具的基础
3.NumPy具有多维数组功能，运算更加高效快速

概括:numpy主要就是用来做科学计算的，并且是很多数据分析包的基础
</code></pre><h3 id="下载">下载</h3>
<p>1.如果你是python开发环境那么需要你自己手动下载</p>
<pre><code>	pip3 install numpy
</code></pre><p>2.如果你是anaconda环境，那么默认是下载好的，如果没有</p>
<pre><code>	conda install numpy
</code></pre><p>需要你配置anaconda的环境变量(将scripts路径添加即可)</p>
<pre><code>	E:\anaconda\Scripts
</code></pre><p>补充:如何在notebook环境下直接执行DOS命令
只需要在DOS命令前面加一个感叹号即可</p>
<h3 id="导入模块">导入模块</h3>
<pre><code>python第三方模块在使用的时候都需要先提前导入
import numpy      可以这么用 但是不够简洁

我们通常喜欢给numpy起一个更加简洁的别名
import numpy as np

    起别名主要就是为了避免模块名过长书写麻烦的情况

别名是可以按照你的喜好随便起的，但是有很多模块的别名我们都墨守成规的使用同一个别名
    随意
import datetime as dt
import datetime as dm
import datetime as de
    墨守成规
import numpy as np
</code></pre><h3 id="numpy优势">numpy优势</h3>
<p>eg:已知条件身高体重求BIM指数</p>
<p>身高</p>
<pre><code>height = [170,173,178,180,183]
</code></pre><p>体重</p>
<pre><code>weight = [76,65,70,77,75]
</code></pre><p>BMI=身体质量指数=体重(KG)/身高(m)的平方</p>
<p>python实现</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">data_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
    <span class="n">data_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">weight</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="p">((</span><span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">))</span>
<span class="n">data_list</span>      <span class="c1">#在notebook环境下直接输变量名就等价于是打印操作</span>
</code></pre></div><p>​    numpy模块实现</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1">#先将python里面的列表转换成numpy中的数组</span>
<span class="n">w</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">weight</span><span class="p">)</span>
<span class="n">h</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">height</span><span class="p">)</span>
    <span class="c1">#直接利用数组的数学运算</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">w</span><span class="o">/</span><span class="p">(</span><span class="n">h</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>
<span class="n">res</span>
</code></pre></div><p>1.numpy数组能够直接数学快速运算
2.numpy的数学计算速度要比python快N多倍</p>
<p>​    python速度展示</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">random</span>
    <span class="c1">#python实现1千万人BMI计算</span>
    <span class="c1">#伪造数据</span>
<span class="n">h</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">w</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000000</span><span class="p">):</span>
    <span class="n">h</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">153</span><span class="p">,</span><span class="mi">180</span><span class="p">))</span>
    <span class="n">w</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mi">51</span><span class="p">,</span><span class="mi">88</span><span class="p">))</span>
    <span class="c1">#for循环计算</span>
<span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">bmi</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10000000</span><span class="p">):</span>
    <span class="n">bmi</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="p">(</span><span class="n">h</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">)</span>
    <span class="c1">#用时3.6秒</span>
</code></pre></div><p>numpy模块速度展示</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">H</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
<span class="n">W</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
<span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
    <span class="c1">#数组运算</span>
<span class="n">BMI</span> <span class="o">=</span> <span class="n">W</span><span class="o">/</span><span class="p">(</span><span class="n">H</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>
<span class="k">print</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">)</span>
   <span class="c1">#用时 0.25秒</span>
</code></pre></div><h3 id="数组">数组</h3>
<p>numpy中的数组与python中的列表对比</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>      <span class="c1">#列表</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">res</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
    <span class="c1">#结果:array([1, 2, 3, 4, 5])     &gt;&gt;&gt; 数组</span>
</code></pre></div><p>数组分类
1.一维数组(常用)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">ar1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">])</span>
	<span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">])</span>
</code></pre></div><p>2.二维数组(频繁)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">ar2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">]])</span>
    <span class="n">array</span><span class="p">([[</span> <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span>  <span class="mi">5</span><span class="p">],</span>
       <span class="p">[</span> <span class="mi">6</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]])</span>
</code></pre></div><p>3.三维数组(少用)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">ar3</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]]])</span>
<span class="n">array</span><span class="p">([[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
        <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
        <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]])</span>
</code></pre></div><p>​	数组既可以使用python的列表创建也可以使用python元组创建</p>
<h3 id="numpy中的数据类型">numpy中的数据类型</h3>
<p>虽然numpy仅仅是python的一个模块，但是它有自己的数据类型
由于numpy主要是用来计算的，所以基本上都是数字相关的数据类型</p>
<pre><code>布尔型			bool_	
整型			int_ int8 int16 int32 int64
	int32只能表示(-2**31，2**31-1),因为它只有32个位，只能表示2**32个数
无符号整型	   uint8 uint16 uint32 uint64	
浮点型			float_ float16 float32 float64	
复数型			complex_ complex64 complex128
</code></pre><p>numpy中的数据类型名称为了避免跟python冲突
所有同名的数据类型名称都会在最后加下划线</p>
]]></content>
		</item>
		
		<item>
			<title>爬虫实例、爬取思路、数据分析简介</title>
			<link>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B%E7%88%AC%E5%8F%96%E6%80%9D%E8%B7%AF%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AE%80%E4%BB%8B/</link>
			<pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B%E7%88%AC%E5%8F%96%E6%80%9D%E8%B7%AF%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AE%80%E4%BB%8B/</guid>
			<description>今日内容概要  知乎登录破解思路 红薯网小说爬取思路 爬虫框架之Scrapy安装 ipython模块 jupyter模块 anaconda数据分析软件  今日内容详细 知乎登录破解思路   网站手段 我们惯有的思路是登录成功之后网站返回给我们的cookie就是身份标识 但是有一些网站并不是这么做的 当你第一次不登陆情况下访问网站的时候，就已经偷偷给了一个cookie但是这个cookie是没有激活的状态 当你登录之后网站又会在之前的基础之上再给你一个cookie，我们会习惯性的人为第二次给的cookie才是有效的，其实不然 其实第二次给你的是个烟雾弹，真正起作用的恰巧是第一个(登录成功之后会将第一个给你的cookie激活)
1.访问登录首页查看cookie数据
 _xsrf	90d14e60-77f3-43b1-9ad0-f836a97cc631_zap	2afce640-f9c2-48dd-973a-e92c235f36382.点击用户名密码登录
有时候需要输入图片验证码有时候不需要这个其实就是由内部的https://www.zhihu.com/api/v3/oauth/captcha?lang=cn3.验证码中文英文
 lang=cn 中文汉字lang=en	英文数字4.提交post请求数据全部是加密过的 需要去js文件中查找到加密的算法 每个文件里面搜索关键字encrypt 查找到加密之前的字符串但是里面还是有url加密 需要使用python的模块继续解密
 from urllib.parse import unquote_plusclient_id 用户id(固定值)grant_type 验证方式(固定值)timestamp 时间戳*1000,去尾source	(固定值)signature	签名(js加密,变动)username	用户名password	密码captcha	验证码lang	验证码方式(固定值)utm_source	(固定值)ref_source	(固定值)other_https://www.zhihu.com/signin?next=%2F5.signature也是js加密的需要破解
 hmac加密sha1加密将上述推导步骤 熟悉一下即可</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>知乎登录破解思路</li>
<li>红薯网小说爬取思路</li>
<li>爬虫框架之Scrapy安装</li>
<li>ipython模块</li>
<li>jupyter模块</li>
<li>anaconda数据分析软件</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h3 id="知乎登录破解思路">知乎登录破解思路</h3>
<ul>
<li>
<p>网站手段
我们惯有的思路是登录成功之后网站返回给我们的cookie就是身份标识
但是有一些网站并不是这么做的
当你第一次不登陆情况下访问网站的时候，就已经偷偷给了一个cookie但是这个cookie是没有激活的状态
当你登录之后网站又会在之前的基础之上再给你一个cookie，我们会习惯性的人为第二次给的cookie才是有效的，其实不然
其实第二次给你的是个烟雾弹，真正起作用的恰巧是第一个(登录成功之后会将第一个给你的cookie激活)</p>
<p>1.访问登录首页查看cookie数据</p>
<pre><code>  _xsrf	90d14e60-77f3-43b1-9ad0-f836a97cc631
    _zap	2afce640-f9c2-48dd-973a-e92c235f3638
</code></pre><p>2.点击用户名密码登录</p>
<pre><code>有时候需要输入图片验证码有时候不需要
    这个其实就是由内部的
    https://www.zhihu.com/api/v3/oauth/captcha?lang=cn
   
</code></pre><p>3.验证码中文英文</p>
<pre><code>  lang=cn  中文汉字
    lang=en	 英文数字
</code></pre><p>4.提交post请求数据全部是加密过的
需要去js文件中查找到加密的算法
每个文件里面搜索关键字encrypt
查找到加密之前的字符串但是里面还是有url加密
需要使用python的模块继续解密</p>
<pre><code>   from urllib.parse import unquote_plus
        client_id      用户id(固定值)
        grant_type     验证方式(固定值)
        timestamp      时间戳*1000,去尾
        source		   (固定值)
        signature	   签名(js加密,变动)
        username	   用户名
        password	   密码
        captcha		   验证码
        lang		   验证码方式(固定值)
        utm_source	   (固定值)
        ref_source	   (固定值)other_https://www.zhihu.com/signin?next=%2F
</code></pre><p>5.signature也是js加密的需要破解</p>
<pre><code>  hmac加密
    sha1加密
</code></pre><p>将上述推导步骤 熟悉一下即可</p>
</li>
</ul>
<h3 id="红薯网小说爬取">红薯网小说爬取</h3>
<p>1.鼠标左右键都无法使用
2.利用F12调出终端查看内部请求
查看响应体无法得到网页小说文字数据
3.筛选出ajax请求文件找到可疑项</p>
<pre><code>{code: 119, msg: &quot;获取章节内容成功&quot;, key: &quot;86713409&quot;}
	content:加密
    other:加密
</code></pre><p>逆向思维:加密就是为了让你看不懂(说明这块内容重要)</p>
<p>4.研究上述两个js请求的请求体数据</p>
<pre><code>method: getchptkey
    bid: 3052
    cid: 98805

    method: getchpcontent
    bid: 3052
    jid: 3317
    cid: 98805
</code></pre><p>5.研究三个数字含义发现是构成该文件地址的三个关键参数
<a href="https://www.hongshu.com/content/3052/3317-98805.html">https://www.hongshu.com/content/3052/3317-98805.html</a>
6.加密英文单词叫encrypt解密英文单词decrypt</p>
<pre><code>搜索到解密的关键代码
    utf8to16(hs_decrypt(base64decode(data.content), key))
	给上述代码所在的一行打上一个断点再次发送请求就会卡在这个断点
    
    utf8to16(hs_decrypt(base64decode(data.content), key))
    utf8to16(hs_decrypt(base64decode(data.other), key))
</code></pre><p>7.将上述解密之后的html代码放入html文件的body内
将js代码放入js文件内，然后用script标签引入进来
8.页面上有一些文字是通过css动态渲染的</p>
<pre><code>1.通过js定位到所有的:befor标签
    2.然后,获取到css属性的值(缺失的文字)
    3.把缺失的文字插入到标签之间(innerText)
    var element_list = 		document.querySelectorAll('#divChpContent span')
for(var i=0;i&lt;element_list.length;i++){
    var content = window.getComputedStyle(
        element_list[i],':before'
    ).getPropertyValue('content')
    element_list[i].innerText = content.trim('&quot;');
}
</code></pre><p>代码无需掌握 明白思路即可</p>
<h3 id="爬虫框架之scrapy">爬虫框架之Scrapy</h3>
<p>Scrapy一个开源和协作的框架，其最初是为了页面抓取 (更确切来说, 网络抓取 )所设计的，使用它可以以快速、简单、可扩展的方式从网站中提取所需的数据。但目前Scrapy的用途十分广泛，可用于如数据挖掘、监测和自动化测试等领域，也可以应用在获取API所返回的数据(例如 Amazon Associates Web Services ) 或者通用的网络爬虫。</p>
<p>下载模块</p>
<pre><code>pip3 install scrapy
</code></pre><p>windows电脑极有可能会报错 如果不报错那就忽略
mac电脑不会报错</p>
<p>报错解决思路</p>
<pre><code>1.pip3 install scrapy
2.pip3 install wheel
3.去网站下载一个文件先随便放在一个位置
	https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted
    Twisted‑20.3.0‑cp36‑cp36m‑win_amd64.whl
4.pip3 install Twisted‑20.3.0‑cp36‑cp36m‑win_amd64.whl
	报错会提示你将该文件放到哪儿
    之后重新执行下载命令
5.pip3 install pywin32
6.pip3 install scrapy
</code></pre><pre><code>参考博客：https://www.cnblogs.com/Dominic-Ji/p/9550525.html
</code></pre><h3 id="数据分析模块">数据分析模块</h3>
<pre><code>为什么要学习数据分析
	目前数据是最值钱的
    &quot;数据是21世纪的石油&quot;
 
数据分析能做的事情
	1.商品推荐服务
    2.抖音短视频推荐
    	投喂
        获取用户点击的视频记录，对视频进行分类
        统计出用户点击最多的几个分类之后大概率推送相关分类视频
    3.电影推荐
    	同上
    4.金融量化交易
  	...
   
为什么用python做数据分析
	1.python是目前最简单好学的一门编程语言
    2.python的用途很广泛
    3.基于python书写的用于数据分析的模块最大功能最强大
   
数据分析工作流程
	1.提出需求
    	到底要分析什么...
    2.收集数据
    	数据的来源
        	1.公司自己内部的
            2.花钱购买
            3.自己写爬虫爬
    3.处理数据
    	无效数据
        缺失数据
        异常数据
    4.数据分析
    	数据分析软件SPSS
        数据分析模型(算法)
    5.数据可视化
    	数据可视化软件Teableau、PowerBI
        python可视化模块
    6.数据分析报告
    	过程中采用的算法
        总结归纳分析结果
        提出个人建议
</code></pre><h3 id="python数据分析模块">python数据分析模块</h3>
<p>1.numpy
用于科学计算
2.pandas
基于numpy构建的更加强大的数据分析模块
3.matplotlib
数据可视化</p>
<h3 id="ipython模块">ipython模块</h3>
<pre><code>1.原生的python解释器环境有很多缺点
	1.代码不会自动提示
    2.颜色太单调
    3.没有行数显示
在工作中其实我们不会直接使用原生的python解释器环境，取而代之的是ipython模块提供的环境

下载模块
	pip3 install ipython
    # 也可以使用国内的源
    pip3 install ipython -i https://pypi.tuna.tsinghua.edu.cn/simple/
基本使用
	直接在cmd窗口下输入ipython即可进入环境
    In [1]: print('hello world')
    hello world

    In [2]: import time

    In [3]: time.time()
    Out[3]: 1606191571.0108407

    In [4]: import random

    In [5]: random.random()
    Out[5]: 0.5895398236819949

    In [6]:
优势:
    1.代码有自动提示
    	多敲几下tab即可
    2.输入有行数显示
    3.颜色有变化
</code></pre><h3 id="jupyter模块">jupyter模块</h3>
<pre><code>下载模块
	pip3 install jupyter -i https://pypi.tuna.tsinghua.edu.cn/simple/
      
基本使用
	在cmd窗口内直接输入jupyter notebook
    在哪个路径下就会在浏览器里面展示出该路径下所有的文件
    停止服务使用ctrl + C多敲几下

下拉框功能
	terminal
    folder
    text file
</code></pre><h4 id="防爬策略总结">防爬策略总结</h4>
<ul>
<li>验证标题头user-Agent</li>
<li>限制cookie访问频率</li>
<li>限制IP地址访问频率</li>
<li>登录使用字符验证码</li>
<li>使用滑块验证码验证，注意滑块验证码速度不能太快</li>
<li>夹带验证多个cookie</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>爬虫之selenium模块、实例</title>
			<link>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E4%B9%8Bselenium%E6%A8%A1%E5%9D%97%E5%AE%9E%E4%BE%8B/</link>
			<pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E4%B9%8Bselenium%E6%A8%A1%E5%9D%97%E5%AE%9E%E4%BE%8B/</guid>
			<description>今日内容概要  selenium模块 爬取京东商品信息 研究知乎防爬策略 研究小说爬取思路 Scrapy框架了解 MongoDB数据库(非关系型数据库)  今日内容详细 selenium模块   通过id查找标签
from selenium import webdriverimport timebro=webdriver.Chrome()bro.get(&amp;#34;http://www.baidu.com&amp;#34;)bro.implicitly_wait(10)inEle = bro.find_element_by_id(&amp;#39;kw&amp;#39;)往标签内写内容
inEle.send_keys(&amp;#39;美女&amp;#39;)通过a标签内部的文本查找a标签
aEle = bro.find_element_by_link_text(&amp;#39;登录&amp;#39;)点击a标签
aEle.click()如果你不知道具体文本内容 或者想模糊查询
find_element_by_partial_link_text查找div标签
divEle = bro.find_element_by_tag_name(&amp;#39;div&amp;#39;)获取内部所有的文本信息
print(divEle.text) 查看含有class属性值:
s-top-right-text c-font-normal c-color-tspEle = bro.find_element_by_class_name(&amp;#39;s-top-right-text&amp;#39;)print(spEle.text)css选择器
pEle = bro.find_element_by_css_selector(&amp;#39;#kw&amp;#39;)pEle.click()  自动登录 from selenium import webdriverimport timebro=webdriver.Chrome()bro.get(&amp;#34;http://www.baidu.com&amp;#34;)bro.implicitly_wait(10)  找到登录按钮</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>selenium模块</li>
<li>爬取京东商品信息</li>
<li>研究知乎防爬策略</li>
<li>研究小说爬取思路</li>
<li>Scrapy框架了解</li>
<li>MongoDB数据库(非关系型数据库)</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h3 id="selenium模块">selenium模块</h3>
<ul>
<li>
<p>通过id查找标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="n">bro</span><span class="o">=</span><span class="n">webdriver</span><span class="o">.</span><span class="n">Chrome</span><span class="p">()</span>
<span class="n">bro</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;http://www.baidu.com&#34;</span><span class="p">)</span>
<span class="n">bro</span><span class="o">.</span><span class="n">implicitly_wait</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
  
  
<span class="n">inEle</span> <span class="o">=</span> <span class="n">bro</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s1">&#39;kw&#39;</span><span class="p">)</span>
</code></pre></div><p>往标签内写内容</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">inEle</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s1">&#39;美女&#39;</span><span class="p">)</span>
</code></pre></div><p>通过a标签内部的文本查找a标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">aEle</span> <span class="o">=</span> <span class="n">bro</span><span class="o">.</span><span class="n">find_element_by_link_text</span><span class="p">(</span><span class="s1">&#39;登录&#39;</span><span class="p">)</span>
</code></pre></div><p>点击a标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">aEle</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</code></pre></div><p>如果你不知道具体文本内容 或者想模糊查询</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">find_element_by_partial_link_text</span>
</code></pre></div><p>查找div标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">divEle</span> <span class="o">=</span> <span class="n">bro</span><span class="o">.</span><span class="n">find_element_by_tag_name</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">)</span>
</code></pre></div><p>获取内部所有的文本信息</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="n">divEle</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>  
</code></pre></div><p>查看含有class属性值:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">s</span><span class="o">-</span><span class="n">top</span><span class="o">-</span><span class="n">right</span><span class="o">-</span><span class="n">text</span> <span class="n">c</span><span class="o">-</span><span class="n">font</span><span class="o">-</span><span class="n">normal</span> <span class="n">c</span><span class="o">-</span><span class="n">color</span><span class="o">-</span><span class="n">t</span>
<span class="n">spEle</span> <span class="o">=</span> <span class="n">bro</span><span class="o">.</span><span class="n">find_element_by_class_name</span><span class="p">(</span><span class="s1">&#39;s-top-right-text&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">spEle</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>css选择器</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">pEle</span> <span class="o">=</span> <span class="n">bro</span><span class="o">.</span><span class="n">find_element_by_css_selector</span><span class="p">(</span><span class="s1">&#39;#kw&#39;</span><span class="p">)</span>
<span class="n">pEle</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</code></pre></div></li>
</ul>
<h3 id="自动登录">自动登录</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="n">bro</span><span class="o">=</span><span class="n">webdriver</span><span class="o">.</span><span class="n">Chrome</span><span class="p">()</span>
<span class="n">bro</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;http://www.baidu.com&#34;</span><span class="p">)</span>
<span class="n">bro</span><span class="o">.</span><span class="n">implicitly_wait</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div><ul>
<li>
<p>找到登录按钮</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">loginEle</span> <span class="o">=</span> <span class="n">bro</span><span class="o">.</span><span class="n">find_element_by_link_text</span><span class="p">(</span><span class="s1">&#39;登录&#39;</span><span class="p">)</span>
</code></pre></div><p>点击登录按钮</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">loginEle</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</code></pre></div><p>找到用户名登录标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">pEle</span> <span class="o">=</span> <span class="n">bro</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s1">&#39;TANGRAM__PSP_11__footerULoginBtn&#39;</span><span class="p">)</span>
</code></pre></div><p>点击按钮</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">pEle</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</code></pre></div><p>找到获取用户名和密码的标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">userEle</span> <span class="o">=</span> <span class="n">bro</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s1">&#39;TANGRAM__PSP_11__userName&#39;</span><span class="p">)</span>
<span class="n">pwdEle</span> <span class="o">=</span> <span class="n">bro</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s1">&#39;TANGRAM__PSP_11__password&#39;</span><span class="p">)</span>
</code></pre></div><p>往两个框中分别属于内容</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">userEle</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s1">&#39;老男孩上海校区&#39;</span><span class="p">)</span>
<span class="n">pwdEle</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s1">&#39;123hj13121283&#39;</span><span class="p">)</span>
</code></pre></div><p>找到最终的登录按钮</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">btnEle</span> <span class="o">=</span> <span class="n">bro</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s1">&#39;TANGRAM__PSP_11__submit&#39;</span><span class="p">)</span>
<span class="n">btnEle</span><span class="o">.</span><span class="n">click</span><span class="p">()</span>
</code></pre></div></li>
</ul>
<h3 id="显示等待和隐示等待">显示等待和隐示等待</h3>
<ul>
<li>
<p>隐式等待:在查找所有元素时，如果尚未被加载，则等10秒</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">browser</span><span class="o">.</span><span class="n">implicitly_wait</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>   <span class="c1"># 表示等待所有</span>
</code></pre></div><p>推荐加上上述的隐式等待代码</p>
</li>
<li>
<p>显式等待：显式地等待某个元素被加载</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">wait</span><span class="o">=</span><span class="n">WebDriverWait</span><span class="p">(</span><span class="n">browser</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>  <span class="c1">#了解即可</span>
<span class="n">wait</span><span class="o">.</span><span class="n">until</span><span class="p">(</span><span class="n">EC</span><span class="o">.</span><span class="n">presence_of_element_located</span><span class="p">((</span><span class="n">By</span><span class="o">.</span><span class="n">ID</span><span class="p">,</span><span class="s1">&#39;content_left&#39;</span><span class="p">)))</span>
</code></pre></div></li>
</ul>
<h3 id="控制页面元素滑动">控制页面元素滑动</h3>
<ul>
<li>
<p>可以利用selenium模块来破解滑动验证码
但是过程很复杂，还不如你自己快速的划一下</p>
<p>参考文档:
<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains</a></p>
<p>案例代码:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
<span class="kn">from</span> <span class="nn">selenium.webdriver</span> <span class="kn">import</span> <span class="n">ActionChains</span>
  
<span class="kn">from</span> <span class="nn">selenium.webdriver.support.wait</span> <span class="kn">import</span> <span class="n">WebDriverWait</span>  <span class="c1"># 等待页面加载某些元素</span>
<span class="kn">import</span> <span class="nn">time</span>
  
<span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Chrome</span><span class="p">()</span>
<span class="n">driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#39;</span><span class="p">)</span>
<span class="n">wait</span><span class="o">=</span><span class="n">WebDriverWait</span><span class="p">(</span><span class="n">driver</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
  
<span class="n">driver</span><span class="o">.</span><span class="n">implicitly_wait</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c1"># 使用隐式等待</span>
  
<span class="k">try</span><span class="p">:</span>
    <span class="n">driver</span><span class="o">.</span><span class="n">switch_to</span><span class="o">.</span><span class="n">frame</span><span class="p">(</span><span class="s1">&#39;iframeResult&#39;</span><span class="p">)</span> <span class="c1">#切换到iframeResult</span>
    <span class="n">sourse</span><span class="o">=</span><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s1">&#39;draggable&#39;</span><span class="p">)</span>
    <span class="n">targ</span>	<span class="n">et</span><span class="o">=</span><span class="n">driver</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s1">&#39;droppable&#39;</span><span class="p">)</span>
</code></pre></div><p>方式一：基于同一个动作链串行执行</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">actions</span>	<span class="o">=</span><span class="n">ActionChains</span><span class="p">(</span><span class="n">driver</span><span class="p">)</span> <span class="c1">#拿到动作链对象</span>
  
<span class="n">actions</span><span class="o">.</span><span class="n">drag_and_drop</span><span class="p">(</span><span class="n">sourse</span><span class="p">,</span><span class="n">target</span><span class="p">)</span> <span class="c1">#把动作放到动作链中，准备串行执行</span>
  
<span class="n">actions</span><span class="o">.</span><span class="n">perform</span><span class="p">()</span>
</code></pre></div><p>方式二：不同的动作链，每次移动的位移都不同</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python">  <span class="n">ActionChains</span><span class="p">(</span><span class="n">driver</span><span class="p">)</span><span class="o">.</span><span class="n">click_and_hold</span><span class="p">(</span><span class="n">sourse</span><span class="p">)</span><span class="o">.</span><span class="n">perform</span><span class="p">()</span>
    <span class="n">distance</span><span class="o">=</span><span class="n">target</span><span class="o">.</span><span class="n">location</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]</span><span class="o">-</span><span class="n">sourse</span><span class="o">.</span><span class="n">location</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">]</span>
  
<span class="err">​</span>    <span class="n">track</span><span class="o">=</span><span class="mi">0</span>
<span class="err">​</span>    <span class="k">while</span> <span class="n">track</span> <span class="o">&lt;</span> <span class="n">distance</span><span class="p">:</span>
<span class="err">​</span>        <span class="n">ActionChains</span><span class="p">(</span><span class="n">driver</span><span class="p">)</span><span class="o">.</span><span class="n">move_by_offset</span><span class="p">(</span><span class="n">xoffset</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">yoffset</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">perform</span><span class="p">()</span>
<span class="err">​</span>        <span class="n">track</span><span class="o">+=</span><span class="mi">2</span>
  
<span class="err">​</span>    <span class="n">ActionChains</span><span class="p">(</span><span class="n">driver</span><span class="p">)</span><span class="o">.</span><span class="n">release</span><span class="p">()</span><span class="o">.</span><span class="n">perform</span><span class="p">()</span>
  
<span class="err">​</span>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
  
<span class="k">finally</span><span class="p">:</span>
    <span class="n">driver</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><p>针对滑动验证码得到自动破解其实是有对应的防爬措施
如果你滑动的速度特别快并且特别精确那么系统会认为你是一个程序</p>
</li>
</ul>
<h3 id="异常捕获">异常捕获</h3>
<ul>
<li>
<p>有时候连我们自己都不知道自己写的代码时候会报错
那么这个时候我们可以提前采用异常捕获的形式一旦代码报错直接自动处理</p>
<p>针对报错信息主要有三块
1.报错的定位信息
2.错误的类型
3.错误的具体信息</p>
<p>异常主要分类两类
1.语法错误
if:
def:</p>
<p>语法错误是不能容忍的</p>
<p>逻辑错误是可以被允许发生的</p>
<p>代码一旦出现异常会导致整个程序停止运行，如何避免这种情况的发生
我们可以使用异常处理</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">33</span><span class="p">]</span>
<span class="k">try</span><span class="p">:</span>
  <span class="n">l</span><span class="p">[</span><span class="mi">100000</span><span class="p">]</span>  <span class="c1"># 可能会报错的代码</span>
  <span class="n">aaa</span>
<span class="k">except</span> <span class="ne">IndexError</span><span class="p">:</span>  <span class="c1"># 针对不同的报错类型设置不同的处理机制</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;索引超出范围了&#39;</span><span class="p">)</span>
<span class="k">except</span> <span class="ne">NameError</span><span class="p">:</span>  <span class="c1">#针对不同的报错类型设置不同的处理机制</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;变量名必须先定义后使用&#39;</span><span class="p">)</span>
</code></pre></div><p>如果遇到错误类型无法预估，如何做?</p>
<p>万能异常：Exception</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">try</span><span class="p">:</span>
    <span class="n">l</span><span class="p">[</span><span class="mi">100000</span><span class="p">]</span>  <span class="c1"># 可能会报错的代码</span>
  
<span class="n">aaa</span>
<span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>  <span class="c1"># e就是系统的具体报错提示</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;所有的错我都能捕获&#39;</span><span class="p">)</span>
</code></pre></div><p>代码中不要出现太多的异常捕获代码，尽可能少的使用
并且try代码块里面被监测的代码也应该尽量的少</p>
</li>
</ul>
<h3 id="控制前进后退">控制前进后退</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">time</span>
<span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>

<span class="n">browser</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Chrome</span><span class="p">()</span>
<span class="n">browser</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;https://www.baidu.com&#39;</span><span class="p">)</span>
<span class="n">browser</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;https://www.taobao.com&#39;</span><span class="p">)</span>
<span class="n">browser</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;http://www.sina.com.cn/&#39;</span><span class="p">)</span>

<span class="n">browser</span><span class="o">.</span><span class="n">back</span><span class="p">()</span>
<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="n">browser</span><span class="o">.</span><span class="n">forward</span><span class="p">()</span>
<span class="n">browser</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><h3 id="执行js代码">执行js代码</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="n">bro</span><span class="o">=</span><span class="n">webdriver</span><span class="o">.</span><span class="n">Chrome</span><span class="p">()</span>
<span class="n">bro</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;http://www.baidu.com&#34;</span><span class="p">)</span>
<span class="n">bro</span><span class="o">.</span><span class="n">execute_script</span><span class="p">(</span><span class="s1">&#39;prompt(&#34;你确定要走吗?&#34;)&#39;</span><span class="p">)</span> <span class="c1">#打印警告</span>
<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div><h3 id="cookie操作">cookie操作</h3>
<p>requests方法获取cookie</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;https://www.baidu.com&#39;</span><span class="p">)</span>
<span class="n">res</span><span class="o">.</span><span class="n">cookies</span><span class="o">.</span><span class="n">get_dict</span><span class="p">()</span> <span class="c1">#获取cookies</span>
</code></pre></div><p>使用selenium打开网址,然后让用户完成手工登录,再获取cookie</p>
<ul>
<li>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;https://account.cnblogs.com/signin?returnUrl=https%3A</span><span class="si">%2F%2F</span><span class="s1">www.cnblogs.com</span><span class="si">%2F</span><span class="s1">&#39;</span>
<span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Chrome</span><span class="p">()</span>
<span class="n">driver</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">)</span>
<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
<span class="n">driver</span><span class="o">.</span><span class="n">refresh</span><span class="p">()</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">driver</span><span class="o">.</span><span class="n">get_cookies</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;xxx.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
<span class="n">json</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
  
  
<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;xxx.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
  <span class="n">di</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
<span class="n">cookies</span> <span class="o">=</span> <span class="p">{}</span>
</code></pre></div></li>
<li>
<p>获取cookie中的name和value,转化成requests可以使用的形式</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">cookie</span> <span class="ow">in</span> <span class="n">di</span><span class="p">:</span>
<span class="n">cookies</span><span class="p">[</span><span class="n">cookie</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">]]</span> <span class="o">=</span> <span class="n">cookie</span><span class="p">[</span><span class="s1">&#39;value&#39;</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">cookies</span><span class="p">)</span>
</code></pre></div></li>
<li>
<p>当请求头也有很多校验信息的时候你干脆直接全部带上</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">&#39;authority&#39;</span><span class="p">:</span> <span class="s1">&#39;i-beta.cnblogs.com&#39;</span><span class="p">,</span>
  <span class="s1">&#39;method&#39;</span><span class="p">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
  <span class="s1">&#39;path&#39;</span><span class="p">:</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span>
  <span class="s1">&#39;scheme&#39;</span><span class="p">:</span> <span class="s1">&#39;https&#39;</span><span class="p">,</span>
  <span class="s1">&#39;accept&#39;</span><span class="p">:</span> <span class="s1">&#39;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&#39;</span><span class="p">,</span>
  <span class="s1">&#39;accept-encoding&#39;</span><span class="p">:</span> <span class="s1">&#39;gzip, deflate, br&#39;</span><span class="p">,</span>
  <span class="s1">&#39;accept-language&#39;</span><span class="p">:</span> <span class="s1">&#39;zh-CN,zh;q=0.9&#39;</span><span class="p">,</span>
  <span class="s1">&#39;cache-control&#39;</span><span class="p">:</span> <span class="s1">&#39;max-age=0&#39;</span><span class="p">,</span>
  <span class="s1">&#39;if-modified-since&#39;</span><span class="p">:</span> <span class="s1">&#39;Sun, 24 Nov 2019 06:14:53 GMT&#39;</span><span class="p">,</span>
  
<span class="s1">&#39;if-modified-since&#39;</span><span class="p">:</span> <span class="s1">&#39;Sun, 24 Nov 2019 06:14:53 GMT,</span>
<span class="s1">&#39;sec-fetch-mode&#39;</span><span class="p">:</span> <span class="s1">&#39;navigate&#39;</span><span class="p">,</span>
  <span class="s1">&#39;sec-fetch-site&#39;</span><span class="p">:</span> <span class="s1">&#39;none&#39;</span><span class="p">,</span>
  <span class="s1">&#39;sec-fetch-user&#39;</span><span class="p">:</span> <span class="s1">&#39;?1&#39;</span><span class="p">,</span>
  <span class="s1">&#39;upgrade-insecure-requests&#39;</span><span class="p">:</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span>
  <span class="s1">&#39;user-agent&#39;</span><span class="p">:</span> <span class="s1">&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&#39;</span>
  <span class="p">}</span>
</code></pre></div></li>
<li>
<p>使用该cookie完成请求</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="s1">&#39;https://i-beta.cnblogs.com/api/user&#39;</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;xxx&#39;</span><span class="p">)</span>
<span class="n">response</span><span class="o">.</span><span class="n">encoding</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="n">apparent_encoding</span>
<span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>利用获取cookie的方式可以一定程度上避开用户身份校验</p>
</li>
</ul>
<h3 id="爬取京东商品信息">爬取京东商品信息</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
<span class="kn">from</span> <span class="nn">selenium.webdriver.common.keys</span> <span class="kn">import</span> <span class="n">Keys</span>  <span class="c1"># 通过模块模仿键盘按键操作</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="n">bro</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Chrome</span><span class="p">()</span>
<span class="n">bro</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;https://www.jd.com&#34;</span><span class="p">)</span>
<span class="n">bro</span><span class="o">.</span><span class="n">implicitly_wait</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</code></pre></div><ul>
<li>
<p>查找输入框</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">inputEle</span> <span class="o">=</span> <span class="n">bro</span><span class="o">.</span><span class="n">find_element_by_id</span><span class="p">(</span><span class="s1">&#39;key&#39;</span><span class="p">)</span>
</code></pre></div></li>
<li>
<p>输入想要获取的商品名称</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">inputEle</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="s1">&#39;球&#39;</span><span class="p">)</span>
<span class="n">inputEle</span><span class="o">.</span><span class="n">send_keys</span><span class="p">(</span><span class="n">Keys</span><span class="o">.</span><span class="n">ENTER</span><span class="p">)</span>  <span class="c1"># 模拟键盘enter键</span>
</code></pre></div></li>
<li>
<p>研究商品展示标签发送都是一个个的li标签   element后面加不加s表示查找单个或者多个</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">li_list</span> <span class="o">=</span> <span class="n">bro</span><span class="o">.</span><span class="n">find_elements_by_class_name</span><span class="p">(</span><span class="s1">&#39;gl-item&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">li</span> <span class="ow">in</span> <span class="n">li_list</span><span class="p">:</span>
  
<span class="c1">#根据标签的特点一个个筛选</span>
<span class="n">aEle</span> <span class="o">=</span> <span class="n">li</span><span class="o">.</span><span class="n">find_element_by_tag_name</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">get_attribute</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span>
  
<span class="c1">#获取每个商品的详细地址</span>
  
<span class="c1">#当一种选择器不行的时候 可以考虑使用其他的试试</span>
<span class="n">imgEle</span> <span class="o">=</span> <span class="n">li</span><span class="o">.</span><span class="n">find_element_by_css_selector</span><span class="p">(</span><span class="s1">&#39;.p-img a img&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">get_attribute</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">)</span>
  <span class="k">if</span> <span class="ow">not</span> <span class="n">imgEle</span><span class="p">:</span>
<span class="k">pass</span>
</code></pre></div><p>针对缺失的图片 不要一根筋死在一个页面上 
可以请求该商品的详细页面 然后再拿图片地址</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python">  <span class="n">priceEle</span> <span class="o">=</span> <span class="n">li</span><span class="o">.</span><span class="n">find_element_by_css_selector</span><span class="p">(</span><span class="s1">&#39;.p-price i&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
  
  <span class="n">infoEle</span> <span class="o">=</span> <span class="n">li</span><span class="o">.</span><span class="n">find_elemenst_by_css_selector</span><span class="p">(</span><span class="s1">&#39;.p-name em&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
  
  <span class="n">commit</span> <span class="o">=</span> <span class="n">li</span><span class="o">.</span><span class="n">find_element_by_css_selector</span><span class="p">(</span><span class="s1">&#39;.p-commit strong&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
  
  <span class="k">print</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span><span class="s2">    商品链接：</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    商品图片：</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    商品名字：</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    商品价格：</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    商品评论数：</span><span class="si">%s</span><span class="s2">
</span><span class="s2">  
</span><span class="s2">  &#34;&#34;&#34;</span><span class="o">%</span><span class="p">(</span><span class="n">aEle</span><span class="p">,</span><span class="n">imgEle</span><span class="p">,</span><span class="n">infoEle</span><span class="p">,</span><span class="n">priceEle</span><span class="p">,</span><span class="n">commit</span><span class="p">))</span>
</code></pre></div></li>
</ul>
<p>&quot;&rdquo;&rdquo;
学有余力的同学(研究)
1.动态加载
2.翻页爬取
&quot;&rdquo;&rdquo;</p>
<h3 id="图片验证码破解思路">图片验证码破解思路</h3>
<pre><code>三种方式
	方式1(较为复杂)
  	代码破解
    	软件:Tesseract-ocr 
    	模块:pytesseract(课下研究一下看看)
  方式2
  	打码平台
    &quot;&quot;&quot;
    将含有验证码的图片发送给平台后端的工作人员
    工作人员肉眼识别给你发回来结果
    &quot;&quot;&quot;
    	eg:http://sb.daredian.cn/?spm=dm.pc@baidu
  方式3
  	人工打码
    &quot;&quot;&quot;
    自己在登录环节手动人为干预一下
    &quot;&quot;&quot;
</code></pre><h3 id="作业">作业</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="mf">1.</span><span class="err">尽量脱稿完成课上爬虫案例</span>
<span class="mf">2.</span><span class="err">根据自身情况每日抄写一遍基础阶段的上课笔记</span>
	<span class="err">比如从</span><span class="n">day01开始</span>
<span class="mf">3.</span><span class="err">利用</span><span class="n">selenium模块尝试着自动打开京东搜索你感兴趣的商品</span>
<span class="mf">4.</span><span class="err">爬取京东商品信息</span> <span class="err">针对拿不到的图片想办法给我获取到</span>
<span class="mf">5.</span><span class="err">利用所学知识点爬取网站表情包</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>爬虫之selenium模块</title>
			<link>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E4%B9%8Bselenium%E6%A8%A1%E5%9D%97/</link>
			<pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E4%B9%8Bselenium%E6%A8%A1%E5%9D%97/</guid>
			<description>今日内容概要  爬取天气信息 爬取汽车之家信息 selenium模块  今日内容详细   爬取天气信息 http://tianqi.2345.com有一些网站的数据是后续js动态加载的 (网站的地址不变数据在变) 打开浏览器network点击获取数据的按钮查看内部js请求 多请求几次总结url变化规律
http://tianqi.2345.com/Pc/GetHistoryareaInfo%5BareaId%5D=60010&amp;amp;areaInfo%5BareaType%5D=2&amp;amp;date%5Byear%5D=2020&amp;amp;date%5Bmonth%5D=9http://tianqi.2345.com/Pc/GetHistoryareaInfo%5BareaId%5D=71447&amp;amp;areaInfo%5BareaType%5D=2&amp;amp;date%5Byear%5D=2020&amp;amp;date%5Bmonth%5D=10o%5BareaId%5D=60010&amp;amp;areaInfo%5BareaType%5D=2&amp;amp;date%5Byear%5D=2020&amp;amp;date%5Bmonth%5D=10 朝上述url发送get请求
  import requests import json import pandas res = requests.get(&amp;lsquo;http://tianqi.2345.com/Pc/GetHistory?areaInfo%5BareaId%5D=71447&amp;amp;areaInfo%5BareaType%5D=2&amp;amp;date%5Byear%5D=2020&amp;amp;date%5Bmonth%5D=10&#39;) content = res.content
先反序列化成python里面的字典```pythonjson_dict = json.loads(content)​	loads方法既可以反序列化json格式字符串 ​	也可以发序列化json格式的二进制数据
在利用字典取值获取天气相关的数据
real_data = json_dict.get(&amp;#39;data&amp;#39;)直接将页面上的表格数据筛选出来
res = pandas.read_html(real_data)print(res)爬取汽车之家数据 新闻标签页
 https://www.autohome.com.cn/news/总结每个页的url规律 推导出固定url格式
 https://www.autohome.com.cn/news/1/#liststarthttps://www.autohome.com.cn/news/2/#liststarthttps://www.autohome.com.cn/news/3/#liststart利用代码事先翻页的功能
url_reg = &amp;#39;https://www.autohome.com.cn/news/%s/#liststart&amp;#39;for i in range(1,6010):print(url_reg%i)尝试着直接朝url发送get请求获取数据</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>爬取天气信息</li>
<li>爬取汽车之家信息</li>
<li>selenium模块</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<ol>
<li>
<h3 id="爬取天气信息">爬取天气信息</h3>
<pre><code>http://tianqi.2345.com
</code></pre><p>有一些网站的数据是后续js动态加载的
(网站的地址不变数据在变)
打开浏览器network点击获取数据的按钮查看内部js请求
多请求几次总结url变化规律</p>
<pre><code>http://tianqi.2345.com/Pc/GetHistoryareaInfo%5BareaId%5D=60010&amp;areaInfo%5BareaType%5D=2&amp;date%5Byear%5D=2020&amp;date%5Bmonth%5D=9
           
http://tianqi.2345.com/Pc/GetHistoryareaInfo%5BareaId%5D=71447&amp;areaInfo%5BareaType%5D=2&amp;date%5Byear%5D=2020&amp;date%5Bmonth%5D=10o%5BareaId%5D=60010&amp;areaInfo%5BareaType%5D=2&amp;date%5Byear%5D=2020&amp;date%5Bmonth%5D=10  
</code></pre><p>朝上述url发送get请求</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"></code></pre></div></li>
</ol>
<p>import requests
import json
import pandas
res = requests.get(&lsquo;<a href="http://tianqi.2345.com/Pc/GetHistory?areaInfo%5BareaId%5D=71447&amp;areaInfo%5BareaType%5D=2&amp;date%5Byear%5D=2020&amp;date%5Bmonth%5D=10'">http://tianqi.2345.com/Pc/GetHistory?areaInfo%5BareaId%5D=71447&amp;areaInfo%5BareaType%5D=2&amp;date%5Byear%5D=2020&amp;date%5Bmonth%5D=10'</a>)
content = res.content</p>
<pre><code>
先反序列化成python里面的字典

```python
json_dict = json.loads(content)
</code></pre><p>​				loads方法既可以反序列化json格式字符串
​				也可以发序列化json格式的二进制数据</p>
<p>在利用字典取值获取天气相关的数据</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python">   <span class="n">real_data</span> <span class="o">=</span> <span class="n">json_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span>
</code></pre></div><p>直接将页面上的表格数据筛选出来</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python">   <span class="n">res</span> <span class="o">=</span> <span class="n">pandas</span><span class="o">.</span><span class="n">read_html</span><span class="p">(</span><span class="n">real_data</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</code></pre></div><h4 id="爬取汽车之家数据">爬取汽车之家数据</h4>
<p>新闻标签页</p>
<pre><code>   https://www.autohome.com.cn/news/
</code></pre><p>总结每个页的url规律 推导出固定url格式</p>
<pre><code>   https://www.autohome.com.cn/news/1/#liststart
https://www.autohome.com.cn/news/2/#liststart
   https://www.autohome.com.cn/news/3/#liststart
</code></pre><p>利用代码事先翻页的功能</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python">   <span class="n">url_reg</span> <span class="o">=</span> <span class="s1">&#39;https://www.autohome.com.cn/news/</span><span class="si">%s</span><span class="s1">/#liststart&#39;</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6010</span><span class="p">):</span>
       <span class="k">print</span><span class="p">(</span><span class="n">url_reg</span><span class="o">%</span><span class="n">i</span><span class="p">)</span>
</code></pre></div><p>尝试着直接朝url发送get请求获取数据</p>
<p>研究目标数据所在的HTML规律</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python">   <span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
   
   <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;https://www.autohome.com.cn/news/1/#liststart&#39;</span><span class="p">)</span>
   <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="s1">&#39;lxml&#39;</span><span class="p">)</span>
</code></pre></div><p>每一个新闻其实就是一个li标签  所有的新闻li都是ul标签内</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python">   <span class="n">ul_obj_list</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">,</span> <span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;class&#39;</span><span class="p">:</span> <span class="s1">&#39;article&#39;</span><span class="p">})[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div><p>从ul中筛选出一个个li标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python">   <span class="n">li_obj_list</span> <span class="o">=</span> <span class="n">ul_obj_list</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">li_obj</span> <span class="ow">in</span> <span class="n">li_obj_list</span><span class="p">:</span>
       <span class="c1"># 筛选文字链接</span>
       <span class="n">a_obj</span> <span class="o">=</span> <span class="n">li_obj</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
       <span class="c1"># 排除干扰项</span>
       <span class="k">if</span> <span class="n">a_obj</span><span class="p">:</span>
           <span class="c1"># 获取文字链接</span>
           <span class="k">print</span><span class="p">(</span><span class="s1">&#39;https:&#39;</span> <span class="o">+</span> <span class="n">a_obj</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">))</span>
   
       <span class="c1"># 筛选出文字标题</span>
       <span class="n">h3_obj</span> <span class="o">=</span> <span class="n">li_obj</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;h3&#39;</span><span class="p">)</span>
       <span class="k">if</span> <span class="n">h3_obj</span><span class="p">:</span>
           <span class="k">print</span><span class="p">(</span><span class="n">h3_obj</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
   
       <span class="c1"># 筛选出发布时间</span>
       <span class="n">div_obj</span> <span class="o">=</span> <span class="n">li_obj</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">,</span> <span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;class&#39;</span><span class="p">:</span> <span class="s1">&#39;article-bar&#39;</span><span class="p">})</span>
       <span class="k">if</span> <span class="n">div_obj</span><span class="p">:</span>
           <span class="n">time_span</span> <span class="o">=</span> <span class="n">div_obj</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;span&#39;</span><span class="p">)</span>
           <span class="k">print</span><span class="p">(</span><span class="n">time_span</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
           <span class="n">read_span_obj</span> <span class="o">=</span> <span class="n">div_obj</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s1">&#39;span&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
           <span class="n">read_span</span> <span class="o">=</span> <span class="n">read_span_obj</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;em&#39;</span><span class="p">)</span>
           <span class="k">print</span><span class="p">(</span><span class="n">read_span</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
           <span class="n">comment_span</span> <span class="o">=</span> <span class="n">read_span_obj</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s1">&#39;em&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
           <span class="k">print</span><span class="p">(</span><span class="n">comment_span</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
       <span class="n">p_obj</span> <span class="o">=</span> <span class="n">li_obj</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">)</span>
       <span class="k">if</span> <span class="n">p_obj</span><span class="p">:</span>
           <span class="k">print</span><span class="p">(</span><span class="n">p_obj</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>思考：</p>
<p>1.如何实现爬取多页
2.如何封装成函数 用户指定几页就爬几页</p>
<hr>
<h4 id="爬取b站视频">爬取b站视频</h4>
<ul>
<li>b站的视频数据特点
视频和音频是分开的</li>
</ul>
<p>​	研究ulr的规律</p>
<pre><code>https://www.bilibili.com/video/BV1QE41147hU?p=1
https://www.bilibili.com/video/BV1QE41147hU?p=2
https://www.bilibili.com/video/BV1QE41147hU?p=3
</code></pre><p>总体数据的地址大部分都是隐藏在js动态加载的文件里面</p>
<pre><code>https://www.cnblogs.com/xiaoyuanqujing/articles/12014416.html
</code></pre><hr>
<h4 id="selenium模块">selenium模块</h4>
<ul>
<li>
<p>selenium最初是一个自动化测试工具,而爬虫中使用它主要是为了解决requests无法直接执行JavaScript代码的问题</p>
</li>
<li>
<p>selenium本质是通过驱动浏览器，完全模拟浏览器的操作，比如跳转、输入、点击、下拉等，来拿到网页渲染之后的结果，可支持多种浏览器</p>
</li>
</ul>
<p>下载模块</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="n">selenium</span>
</code></pre></div><p>如果想要操作浏览器需要下载对应浏览器的驱动
下载驱动</p>
<pre><code>http://npm.taobao.org/mirrors/chromedriver/2.38/
</code></pre><p>基本使用</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="n">bro</span><span class="o">=</span><span class="n">webdriver</span><span class="o">.</span><span class="n">Chrome</span><span class="p">()</span>
<span class="n">bro</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;http://www.baidu.com&#34;</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>爬虫之requests-html模块、BS4模块</title>
			<link>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E4%B9%8Brequests-html%E6%A8%A1%E5%9D%97bs4%E6%A8%A1%E5%9D%97/</link>
			<pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E4%B9%8Brequests-html%E6%A8%A1%E5%9D%97bs4%E6%A8%A1%E5%9D%97/</guid>
			<description>今日内容概要  requests-html模块 BS4模块 爬取红牛分公司信息 爬取链家二手房信息  今日内容详细 requests-html模块 该模块的作者就是requests模块的作者
相比之下此模块更牛逼，可以直接运行js代码
  下载
pip3 install requests-html  基本使用
from requests-html import HTMLSessionr = HTMLSession.get(&amp;#39;URL&amp;#39;)a_link = r.html.linksprint(a_link)all_link = r.html.absolute_linksprint(all_link)查找标签id是downloads的标签
about = r.html.find(&amp;#39;#downloads&amp;#39;, first=True)查看该标签内部所有的文本信息
about_text = about.text查看该标签所有的属性
about_attr = about.attrs查看该标签内部包含的所有a标签
about_a = about.find(&amp;#39;a&amp;#39;)for a in about_a:print(a.text) # 获取每个a标签内部的文本 print(a.links) # 获取每个a标签内部的链接地址 requests-html官方文档
http://requests-html.kennethreitz.org/ # 习惯看英文文档   BS4模块</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>requests-html模块</li>
<li>BS4模块</li>
<li>爬取红牛分公司信息</li>
<li>爬取链家二手房信息</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h4 id="requests-html模块">requests-html模块</h4>
<p>该模块的作者就是requests模块的作者</p>
<p>相比之下此模块更牛逼，可以直接运行js代码</p>
<ul>
<li>
<p>下载</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="n">requests</span><span class="o">-</span><span class="n">html</span>
</code></pre></div></li>
<li>
<p>基本使用</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">requests</span><span class="o">-</span><span class="n">html</span> <span class="kn">import</span> <span class="nn">HTMLSession</span>
<span class="n">r</span> <span class="o">=</span> <span class="n">HTMLSession</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;URL&#39;</span><span class="p">)</span>
<span class="n">a_link</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">links</span>
<span class="k">print</span><span class="p">(</span><span class="n">a_link</span><span class="p">)</span>
<span class="n">all_link</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">absolute_links</span>
<span class="k">print</span><span class="p">(</span><span class="n">all_link</span><span class="p">)</span>
</code></pre></div><p>查找标签id是downloads的标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">about</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;#downloads&#39;</span><span class="p">,</span> <span class="n">first</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div><p>查看该标签内部所有的文本信息</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">about_text</span> <span class="o">=</span> <span class="n">about</span><span class="o">.</span><span class="n">text</span>
</code></pre></div><p>查看该标签所有的属性</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">about_attr</span> <span class="o">=</span> <span class="n">about</span><span class="o">.</span><span class="n">attrs</span>
</code></pre></div><p>查看该标签内部包含的所有a标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">about_a</span> <span class="o">=</span> <span class="n">about</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">about_a</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>  <span class="c1"># 获取每个a标签内部的文本</span>
    <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">links</span><span class="p">)</span>  <span class="c1"># 获取每个a标签内部的链接地址</span>
</code></pre></div><p>requests-html官方文档</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">requests</span><span class="o">-</span><span class="n">html</span><span class="o">.</span><span class="n">kennethreitz</span><span class="o">.</span><span class="n">org</span><span class="o">/</span>  <span class="c1"># 习惯看英文文档</span>
</code></pre></div></li>
</ul>
<p>BS4模块</p>
<ul>
<li>
<p>下载模块</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="n">beautifulsoup4</span>
</code></pre></div><p>下载解析器</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">pip3</span> <span class="n">install</span> <span class="n">lxml</span>
</code></pre></div><p>中文文档</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">beautifulsoup</span><span class="o">.</span><span class="n">readthedocs</span><span class="o">.</span><span class="n">io</span><span class="o">/</span><span class="n">zh_CN</span><span class="o">/</span><span class="n">v4</span><span class="o">.</span><span class="mf">4.0</span><span class="o">/</span>
</code></pre></div><p>基本使用</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">html_doc</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;
</span><span class="s2">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;/title&gt;&lt;/head&gt;
</span><span class="s2">&lt;body&gt;
</span><span class="s2">&lt;p class=&#34;title&#34;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;/b&gt;&lt;/p&gt;
</span><span class="s2">  
</span><span class="s2">&lt;p class=&#34;story&#34;&gt;Once upon a time there were three little sisters; and their names were
</span><span class="s2">&lt;a href=&#34;http://example.com/elsie&#34; class=&#34;sister&#34; id=&#34;link1&#34;&gt;Elsie&lt;/a&gt;,
</span><span class="s2">&lt;a href=&#34;http://example.com/lacie&#34; class=&#34;sister&#34; id=&#34;link2&#34;&gt;Lacie&lt;/a&gt; and
</span><span class="s2">&lt;a href=&#34;http://example.com/tillie&#34; class=&#34;sister&#34; id=&#34;link3&#34;&gt;Tillie&lt;/a&gt;;
</span><span class="s2">and they lived at the bottom of a well.&lt;/p&gt;
</span><span class="s2">  
</span><span class="s2">&lt;p class=&#34;story&#34;&gt;...&lt;/p&gt;
</span><span class="s2">&#34;&#34;&#34;</span>
  
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
<span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">html_doc</span><span class="p">,</span><span class="s1">&#39;lxml&#39;</span><span class="p">)</span>
</code></pre></div><p>文档格式化展示</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="n">soup</span><span class="o">.</span><span class="n">prettify</span><span class="p">())</span>
</code></pre></div><p>查找HTML文档中的title标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="n">soup</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
</code></pre></div><p>查找title标签内部的文本</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="n">soup</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">string</span><span class="p">)</span>
</code></pre></div><p>查看title标签的父标签(包含它的外部标签)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="n">soup</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">parent</span><span class="p">)</span>
</code></pre></div><p>查找p标签的class属性值</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="n">soup</span><span class="o">.</span><span class="n">p</span><span class="p">[</span><span class="s1">&#39;class&#39;</span><span class="p">])</span>
</code></pre></div><p>查找标签内部所有的属性名和对应的属性值</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="n">soup</span><span class="o">.</span><span class="n">a</span><span class="o">.</span><span class="n">attrs</span><span class="p">)</span>
</code></pre></div><p>获取HTML文档中所有的文本</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="n">soup</span><span class="o">.</span><span class="n">get_text</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">soup</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>================================================</p>
<p>查找文档内所有的a标签</p>
<p>find只会找到符合条件的第一个标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">a_list</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
</code></pre></div><p>find_all会找到所有符合条件的标签 用列表组织起来</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">a_lists</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>
</code></pre></div><p>根据标签的id查找标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"> <span class="n">a</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="s1">&#39;link3&#39;</span><span class="p">)</span>
</code></pre></div><p>根据标签的class查找标签</p>
<p>如果标签的属性名和python中的关键字冲突
我们只需要在属性名的后面加一个下划线即可</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">p</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">class_</span><span class="o">=</span><span class="s1">&#39;story&#39;</span><span class="p">)</span>
</code></pre></div><p>获取所有a标签的href属性名对应的属性值(链接地址)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">a_lists</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span>  	<span class="c1"># 结果是列表 里面才是一个个的a标签</span>
<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">a_lists</span><span class="p">:</span>  				<span class="c1"># 循环获取每一个a标签</span>
  <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">))</span> 		 <span class="c1"># 获取标签内部href属性名对应的属性值</span>
</code></pre></div><p>================================================</p>
</li>
</ul>
<h4 id="爬取红牛分公司的所有信息">爬取红牛分公司的所有信息</h4>
<ul>
<li>
<p>直接使用正则匹配数据</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">re</span>
  
<span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;http://www.redbull.com.cn/about/branch&#39;</span><span class="p">)</span>
</code></pre></div><p>先用正则表达式
获取公司名称</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">company_title_list</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s1">&#39;&lt;h2&gt;(.*?)&lt;/h2&gt;&#39;</span><span class="p">,</span><span class="n">res</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>获取公司地址</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">company_addr_list</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">&#34;&lt;p class=&#39;mapIco&#39;&gt;(.*?)&lt;/p&gt;&#34;</span><span class="p">,</span><span class="n">res</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>获取公司邮箱</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">company_email_list</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">&#34;&lt;p class=&#39;mailIco&#39;&gt;(.*?)&lt;/p&gt;&#34;</span><span class="p">,</span><span class="n">res</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>获取公司电话</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">company_phone_list</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">&#34;&lt;p class=&#39;telIco&#39;&gt;(.*?)&lt;/p&gt;&#34;</span><span class="p">,</span><span class="n">res</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">company_phone_list</span><span class="p">)</span>
</code></pre></div></li>
<li>
<p>使用bs模块</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifuiSoup</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;http://www.redbull.com.cn/about/branch&#39;</span><span class="p">)</span>
<span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">text</span><span class="p">,</span><span class="s1">&#39;lxml&#39;</span><span class="p">)</span>
</code></pre></div><p>公司名称</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">title_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">company_title_list</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;h2&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">h2_obj</span> <span class="ow">in</span> <span class="n">company_title_list</span><span class="p">:</span>
    <span class="n">title_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">h2_obj</span><span class="o">.</span><span class="n">string</span><span class="p">)</span>
</code></pre></div><p>公司地址</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">addr_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">company_addr_list</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">class_</span><span class="o">=</span><span class="s1">&#39;mapIco&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">p_obj</span> <span class="ow">in</span> <span class="n">company_addr_list</span><span class="p">:</span>
    <span class="n">addr_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">p_obj</span><span class="o">.</span><span class="n">string</span><span class="p">)</span>
</code></pre></div><p>公司邮箱</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">email_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">company_email_list</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">class_</span><span class="o">=</span><span class="s1">&#39;mailIco&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">e_obj</span> <span class="ow">in</span> <span class="n">company_email_list</span><span class="p">:</span>
    <span class="n">email_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">e_obj</span><span class="o">.</span><span class="n">string</span><span class="p">)</span>
</code></pre></div><p>公司电话</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">phone_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">company_phone_list</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">class_</span><span class="o">=</span><span class="s1">&#39;telIco&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">phone_obj</span> <span class="ow">in</span> <span class="n">company_phone_list</span><span class="p">:</span>
    <span class="n">phone_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">phone_obj</span><span class="o">.</span><span class="n">string</span><span class="p">)</span>
</code></pre></div><p>将对应的数据整合到一个元组中</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">title_list</span><span class="p">,</span><span class="n">addr_list</span><span class="p">,</span><span class="n">email_list</span><span class="p">,</span><span class="n">phone_list</span><span class="p">))</span>
 <span class="k">for</span> <span class="n">info</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
     <span class="k">print</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span><span class="s2">     公司名称:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">     公司地址:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">     公司邮箱:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">     公司电话:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">     &#34;&#34;&#34;</span><span class="o">%</span><span class="n">info</span><span class="p">)</span>
</code></pre></div><p>后期使用pandas进行处理</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pandas</span>
<span class="n">pf</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">pf</span><span class="o">.</span><span class="n">to_excel</span><span class="p">(</span><span class="s1">&#39;company.xlsx&#39;</span><span class="p">)</span>
</code></pre></div></li>
</ul>
<h4 id="爬取链家二手房数据">爬取链家二手房数据</h4>
<ul>
<li>
<p>导入模块</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
  
  
<span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;https://sh.lianjia.com/ershoufang/pudong/&#39;</span><span class="p">)</span>
<span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">text</span><span class="p">,</span><span class="s1">&#39;lxml&#39;</span><span class="p">)</span>
</code></pre></div><p>查找属性名是data-el并且属性值是ershoufang的a标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">house_title</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">a_list</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;data-el&#34;</span><span class="p">:</span><span class="s2">&#34;ershoufang&#34;</span><span class="p">})</span>
<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">a_list</span><span class="p">:</span>
                          <span class="c1"># 排除内部没有文本的</span>
    <span class="k">if</span> <span class="n">a</span><span class="o">.</span><span class="n">string</span><span class="p">:</span>              <span class="c1"># None对应的布尔值是False</span>
        <span class="n">house_title</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">string</span><span class="p">)</span>
</code></pre></div><p>查找属性名是class并且属性值是flood的div标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">house_addr</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">div_list</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="s1">&#39;div.flood&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">div</span> <span class="ow">in</span> <span class="n">div_list</span><span class="p">:</span>
    <span class="n">house_addr</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">div</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>查找属性名是class并且属性值是houseInfo的div标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">house_info</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">info_list</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;div&#39;</span><span class="p">,</span><span class="n">class_</span><span class="o">=</span><span class="s1">&#39;houseInfo&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">info</span> <span class="ow">in</span> <span class="n">info_list</span><span class="p">:</span>
    <span class="n">house_info</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">info</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>查找属性名是class并且属性值是totalPrice的div标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">price_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">total_list</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;div&#39;</span><span class="p">,</span><span class="n">class_</span><span class="o">=</span><span class="s1">&#39;totalPrice&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">price</span> <span class="ow">in</span> <span class="n">total_list</span><span class="p">:</span>
    <span class="n">price_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">price</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
  
</code></pre></div><p>查找属性名是class并且属性值是unitPrice的div标签</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">unit_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">unitPrice_list</span> <span class="o">=</span> <span class="n">soup</span><span class="o">.</span><span class="n">find_all</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;div&#39;</span><span class="p">,</span><span class="n">class_</span><span class="o">=</span><span class="s1">&#39;unitPrice&#39;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">unit</span> <span class="ow">in</span> <span class="n">unitPrice_list</span><span class="p">:</span>
    <span class="n">unit_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">unit</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div><p>针对info信息如何拆分</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">info_detail</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">info</span> <span class="ow">in</span> <span class="n">house_info</span><span class="p">:</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;|&#39;</span><span class="p">)</span>
    <span class="n">temp</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
        <span class="n">temp</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
    <span class="n">info_detail</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span>
<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">info_detail</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span><span class="s2">    户型:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    面积:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    朝向:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    装修:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    楼层:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    年代:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    类型:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    &#34;&#34;&#34;</span><span class="o">%</span><span class="p">(</span><span class="n">j</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">j</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">j</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="n">j</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="n">j</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="n">j</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="n">j</span><span class="p">[</span><span class="mi">6</span><span class="p">]))</span>
</code></pre></div><p>汇总</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">data</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">house_title</span><span class="p">,</span> <span class="n">house_addr</span><span class="p">,</span> <span class="n">info_detail</span><span class="p">,</span> <span class="n">price_list</span><span class="p">,</span> <span class="n">unit_list</span><span class="p">))</span>
<span class="k">for</span> <span class="n">fo</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
    <span class="c1"># print(info)</span>
    <span class="k">print</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;
</span><span class="s2">    标题信息:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    房屋地址:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    户型:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    面积:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    朝向:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    装修:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    楼层:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    年代:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    类型:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    预计价格:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    平均单价:</span><span class="si">%s</span><span class="s2">
</span><span class="s2">    &#34;&#34;&#34;</span> <span class="o">%</span> <span class="p">(</span><span class="n">fo</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">fo</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">fo</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">fo</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">fo</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">fo</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">fo</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="n">fo</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span> <span class="n">fo</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span>
           <span class="n">fo</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span> <span class="n">fo</span><span class="p">[</span><span class="mi">10</span><span class="p">]))</span>
  
</code></pre></div></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>爬虫之requests模块、cookie与session、json格式数据</title>
			<link>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E4%B9%8Brequests%E6%A8%A1%E5%9D%97cookie%E4%B8%8Esessionjson%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE/</link>
			<pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E4%B9%8Brequests%E6%A8%A1%E5%9D%97cookie%E4%B8%8Esessionjson%E6%A0%BC%E5%BC%8F%E6%95%B0%E6%8D%AE/</guid>
			<description>今日内容概要  requests模块 cookie与session requests爬取网址数据实战演练 json格式数据  今日内容详细 requests模块 &amp;#34;&amp;#34;&amp;#34;get请求携带参数在url中携带 url？username=jason&amp;amp;hobby=readrequestes模块携带参数import requestsres = requests.get(&amp;#39;https://www.baidu.com/s&amp;#39;,params={&amp;#39;wd&amp;#39;: &amp;#39;美女&amp;#39;},headers={&amp;#39;User-Agent&amp;#39;: &amp;#39;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.76 Mobile Safari/537.36&amp;#39;,})with open(r&amp;#39;mn1.html&amp;#39;, &amp;#39;wb&amp;#39;) as f:f.write(res.content)总结:大部分网址基本上都会校验你是否是个浏览器，所以我们以后在发送请求的时候最后将User-agent携带着res = requests.get(&amp;#39;url&amp;#39;),params={字典形式携带的参数}headers={浏览器校验头，防止一般的简单网站防爬}&amp;#34;&amp;#34;&amp;#34;cookie与session &amp;#34;&amp;#34;&amp;#34;cookie与session都是用来记录当前用户状态的二者产生的原因在于HTTP协议是无状态的 &amp;gt;&amp;gt;&amp;gt; HTTP协议不记录用户信息但是网站需要记录用户的状态，登录信息等，cookie 和 session 便是分别负责在服务端与客户端进行身份识别cookie的由来就是保存在浏览器上面的k:v键值对session的由来就是保存在服务端上面的数据&amp;#39;&amp;#39;&amp;#39;在互联网中没有绝对意义上的安全&amp;#39;&amp;#39;&amp;#39;两者工作机制session的工作需要依赖于cookie总结:只要是需要保存用户状态的网址，都需要借助于cookie浏览器可以选择保存cookie也可以选择拒绝一旦浏览器拒绝保存cookie，那么所有网址的登录都无法进行知识扩展:https://www.</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>requests模块</li>
<li>cookie与session</li>
<li>requests爬取网址数据实战演练</li>
<li>json格式数据</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h4 id="requests模块">requests模块</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">get请求携带参数
</span><span class="s2">	在url中携带 url？username=jason&amp;hobby=read
</span><span class="s2">requestes模块携带参数
</span><span class="s2">	import requests
</span><span class="s2">    
</span><span class="s2">    res = requests.get(&#39;https://www.baidu.com/s&#39;,
</span><span class="s2">                   params={
</span><span class="s2">                       &#39;wd&#39;: &#39;美女&#39;
</span><span class="s2">                   },
</span><span class="s2">                   headers={
</span><span class="s2">                       &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.76 Mobile Safari/537.36&#39;,
</span><span class="s2">                   }
</span><span class="s2">                   )
</span><span class="s2">with open(r&#39;mn1.html&#39;, &#39;wb&#39;) as f:
</span><span class="s2">    f.write(res.content)
</span><span class="s2">
</span><span class="s2">总结:大部分网址基本上都会校验你是否是个浏览器，所以我们以后在发送请求的时候最后将User-agent携带着
</span><span class="s2">
</span><span class="s2">		res = requests.get(&#39;url&#39;),
</span><span class="s2">    			params={
</span><span class="s2">                    字典形式携带的参数
</span><span class="s2">                }
</span><span class="s2">        		headers={
</span><span class="s2">                    浏览器校验头，防止一般的简单网站防爬
</span><span class="s2">                }
</span><span class="s2">            
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="cookie与session">cookie与session</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;cookie与session都是用来记录当前用户状态的
</span><span class="s2">二者产生的原因在于HTTP协议是无状态的    
</span><span class="s2">
</span><span class="s2">&gt;&gt;&gt; HTTP协议不记录用户信息但是网站需要记录用户的状态，登录信息等，cookie 和 session 便是分别负责在服务端与客户端进行身份识别
</span><span class="s2">
</span><span class="s2">cookie的由来
</span><span class="s2">	就是保存在浏览器上面的k:v键值对
</span><span class="s2">
</span><span class="s2">session的由来
</span><span class="s2">	就是保存在服务端上面的数据
</span><span class="s2">&#39;&#39;&#39;
</span><span class="s2">在互联网中没有绝对意义上的安全
</span><span class="s2">&#39;&#39;&#39;
</span><span class="s2">两者工作机制
</span><span class="s2">	session的工作需要依赖于cookie
</span><span class="s2">    
</span><span class="s2">总结:
</span><span class="s2">    只要是需要保存用户状态的网址，都需要借助于cookie
</span><span class="s2">    浏览器可以选择保存cookie也可以选择拒绝
</span><span class="s2">    一旦浏览器拒绝保存cookie，那么所有网址的登录都无法进行
</span><span class="s2">
</span><span class="s2">知识扩展:https://www.cnblogs.com/Dominic-Ji/p/10886902.html&#34;&#34;&#34;</span>
</code></pre></div><h4 id="携带cookie">携带cookie</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;句型：
</span><span class="s2">	res = requests.get/post/...(
</span><span class="s2">	url=&#39;&#39;,
</span><span class="s2">    headers={},
</span><span class="s2">    params={},
</span><span class="s2">    cookies={}
</span><span class="s2">)
</span><span class="s2">
</span><span class="s2">    案例:华华手机登录  http://www.aa7a.cn/user.php
</span><span class="s2">
</span><span class="s2">验证是否登录 我们可以采用返回界面数据右上角是否含有用户名
</span><span class="s2">
</span><span class="s2">1.先研究登录请求发送的地址和数据格式
</span><span class="s2">2.找到请求体数据格式 直接拿走
</span><span class="s2">	username: weqeqw
</span><span class="s2">    password: wqewqewqe
</span><span class="s2">    captcha: CA3V
</span><span class="s2">    remember: 1
</span><span class="s2">    ref: http://www.aa7a.cn
</span><span class="s2">    act: act_login
</span><span class="s2">3.自己模拟post请求发送
</span><span class="s2">4.如果用户名和密码正确 服务端就会给你返回标识你身份的cookie信息
</span><span class="s2">	我们只需要获取到服务端给我们返回的cookie数据以后就可以拿着cookie无限制登录访问
</span><span class="s2"> 
</span><span class="s2">import requests
</span><span class="s2">
</span><span class="s2">headers = {
</span><span class="s2">    &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.76 Mobile Safari/537.36&#39;,
</span><span class="s2">}
</span><span class="s2">
</span><span class="s2">res = requests.post(&#39;http://www.aa7a.cn/user.php&#39;,
</span><span class="s2">                    headers=headers,
</span><span class="s2">                    # post请求携带数据需要使用data参数
</span><span class="s2">                    data={
</span><span class="s2">                        &#39;username&#39;: &#39;616564099@qq.com&#39;,
</span><span class="s2">                        &#39;password&#39;: &#39;lqz123&#39;,
</span><span class="s2">                        &#39;captcha&#39;: &#39;CA3V&#39;,
</span><span class="s2">                        &#39;remember&#39;: &#39;1&#39;,
</span><span class="s2">                        &#39;ref&#39;: &#39;http://www.aa7a.cn&#39;,
</span><span class="s2">                        &#39;act&#39;: &#39;act_login&#39;
</span><span class="s2">                    }
</span><span class="s2">                    )
</span><span class="s2"># 获取服务端返回的cookie数据
</span><span class="s2">cookie=res.cookies.get_dict()
</span><span class="s2">
</span><span class="s2"># 携带着cookie访问网址首页 验证是否是登录状态
</span><span class="s2">res = requests.get(&#39;http://www.aa7a.cn/user.php&#39;,
</span><span class="s2">                   headers=headers,
</span><span class="s2">                   cookies=cookie
</span><span class="s2">                   )
</span><span class="s2">if &#39;616564099@qq.com&#39; in res.text:
</span><span class="s2">    print(&#39;登录成功&#39;)
</span><span class="s2">else:
</span><span class="s2">    print(&#39;用户名或密码错误&#39;)
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="当爬取下来的数据过大">当爬取下来的数据过大</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;#stream参数:一点一点的取,比如下载视频时,如果视频100G,用response.content然后一下子写到文件中是不合理的
</span><span class="s2">
</span><span class="s2">import requests
</span><span class="s2">
</span><span class="s2">response=requests.get(&#39;https://gss3.baidu.com/6LZ0ej3k1Qd3ote6lo7D0j9wehsv/tieba-smallvideo-transcode/1767502_56ec685f9c7ec542eeaf6eac93a65dc7_6fe25cd1347c_3.mp4&#39;,
</span><span class="s2">                      stream=True)
</span><span class="s2">
</span><span class="s2">with open(&#39;b.mp4&#39;,&#39;wb&#39;) as f:
</span><span class="s2">    for line in response.iter_content():
</span><span class="s2">        f.write(line)&#34;&#34;&#34;</span>
</code></pre></div><h4 id="json格式数据">json格式数据</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;json格式数据是前端和后端通用的一种格式，用来打破语言限制实现无障碍数据沟通交流&#39;&#39;&#39;</span>
<span class="s2">&#34;&#34;&#34;json格式的数据跟我们python里面的字典长得非常的像
</span><span class="s2">只不过json格式引号都是双引号
</span><span class="s2">双引号是json格式数据的标识
</span><span class="s2">
</span><span class="s2"># import json
</span><span class="s2">d = {&#39;username&#39;:&#39;jason&#39;,&#39;password&#39;:&#39;123&#39;}
</span><span class="s2"># 将数据转换成json格式(想给别人发数据)
</span><span class="s2">res = json.dumps(d)   # 将字段转换成json格式的字符串
</span><span class="s2">print(res,type(res))
</span><span class="s2"># 将json格式数据转换成python数据(别人给你发数据)
</span><span class="s2">res1 = json.loads(res)  # 将json格式字符串转换成字典
</span><span class="s2">print(res1,type(res1))&#34;&#34;&#34;</span>
</code></pre></div><h4 id="ip代理池cookie池">IP代理池、Cookie池</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">IP代理池
</span><span class="s2">
</span><span class="s2">防爬措施
</span><span class="s2">1.服务端可以获取到每个客户端的IP地址
</span><span class="s2">	规定一个IP地址在一定的时间范围内不得访问超出规定次数的请求
</span><span class="s2">    如果超出了直接对该IP地址做访问限制(一定时间内，终身封禁)
</span><span class="s2">破解措施
</span><span class="s2">使用IP代理池
</span><span class="s2">	给你提供很多IP每次从中随机获取一个去访问服务端，避过次数校验
</span><span class="s2">#代理设置:先发送请求给代理,然后由代理帮忙发送(封ip是常见的事情)
</span><span class="s2">import requests
</span><span class="s2">proxies={
</span><span class="s2">    &#39;http&#39;:&#39;183.166.161.14:4226&#39;,
</span><span class="s2">    &#39;http&#39;:&#39;115.209.120.210:4226&#39;,
</span><span class="s2">    &#39;http&#39;:&#39;119.178.168.138:4245&#39;,
</span><span class="s2">}
</span><span class="s2">respone=requests.get(&#39;https://www.12306.cn&#39;,
</span><span class="s2">                     proxies=proxies)
</span><span class="s2">
</span><span class="s2">print(respone.status_code)
</span><span class="s2">
</span><span class="s2">Cookie池
</span><span class="s2">规定一个Cookie在一定的时间范围内不得访问超出规定次数的请求
</span><span class="s2">    如果超出了直接对该Cookie做访问限制(一定时间内，终身封禁)
</span><span class="s2">破解措施
</span><span class="s2">使用Cookie代理池
</span><span class="s2">	给你提供很多Cookie每次从中随机获取一个去访问服务端，避过次数校验
</span><span class="s2">    
</span><span class="s2">先在某一个网址用很多用户名和密码登录获取每一次的cookie
</span><span class="s2">然后存储到一个文件中
</span><span class="s2">之后访问该网址随机从文件中获取一个cookie去访问&#34;&#34;&#34;</span>
</code></pre></div><h4 id="上传文件">上传文件</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span>
<span class="n">files</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;file&#39;</span><span class="p">:</span><span class="nb">open</span><span class="p">(</span><span class="s1">&#39;a.jpg&#39;</span><span class="p">,</span><span class="s1">&#39;rb&#39;</span><span class="p">)}</span>
<span class="n">respone</span><span class="o">=</span><span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s1">&#39;http://httpbin.org/post&#39;</span><span class="p">,</span>
                      <span class="n">files</span><span class="o">=</span><span class="n">files</span>
                     <span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">respone</span><span class="o">.</span><span class="n">status_code</span><span class="p">)</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>爬虫之requests模块、正则表达式</title>
			<link>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E4%B9%8Brequests%E6%A8%A1%E5%9D%97%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
			<pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E4%B9%8Brequests%E6%A8%A1%E5%9D%97%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
			<description>今日内容概要   正则表达式是
用一些特殊符号的组合去字符串里筛选出符合符号特征的内容
专门在爬虫中帮助我们从网页上筛选我们想要的内容
  爬虫模块
requests模块
requets-html模块
bs4模块
  今日内容详细 正则表达式 &amp;#39;&amp;#39;&amp;#39;它是一门独立的学科，不属于任何的其他知识点所有的编程语言都可以使用正则表达式如果我们想在python中使用正则表达式需要借助于re模块(爬虫相关模块)用一些特殊符号的组合去字符串里面筛选出符合符号特征的内容&amp;#39;&amp;#39;&amp;#39;前戏 &amp;#34;&amp;#34;&amp;#34;校验手机号1.校验手机号的开头2.校验手机号的位数3.校验必须是纯数字使用python代码实现&amp;#39;&amp;#39;&amp;#39;用python逻辑代码实现&amp;#39;&amp;#39;&amp;#39;&amp;gt;&amp;gt;&amp;gt; 获取用户输入的手机号phone = input(&amp;#39;please input your number&amp;gt;&amp;gt;&amp;gt;:&amp;#39;).strip()&amp;gt;&amp;gt;&amp;gt; 1.是否是纯数字if phone.isdigit(): &amp;gt;&amp;gt;&amp;gt; 字符串里面如果是纯数字就返回True不是返回False&amp;gt;&amp;gt;&amp;gt; 2.判断位数if len(phone) == 11:&amp;gt;&amp;gt;&amp;gt; 3.判断手机号开头 11 13 14 15 18if phone.startswith(&amp;#39;11&amp;#39;) or \phone.startswith(&amp;#39;13&amp;#39;) or \phone.startswith(&amp;#39;14&amp;#39;) or \phone.startswith(&amp;#39;15&amp;#39;) or \phone.startswith(&amp;#39;18&amp;#39;):print(&amp;#39;手机号正确&amp;#39;)else:print(&amp;#39;手机号格式错误&amp;#39;)else:print(&amp;#39;手机号必须是11位&amp;#39;)else:print(&amp;#39;手机号只能是数字&amp;#39;)&amp;#39;&amp;#39;&amp;#39;用正则表达式书写&amp;#39;&amp;#39;&amp;#39;import rephone_number = input(&amp;#39;please input your phone number ： &amp;#39;)if re.</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>
<p>正则表达式是</p>
<p>用一些特殊符号的组合去字符串里筛选出符合符号特征的内容</p>
<p>专门在爬虫中帮助我们从网页上筛选我们想要的内容</p>
</li>
<li>
<p>爬虫模块</p>
<p>requests模块</p>
<p>requets-html模块</p>
<p>bs4模块</p>
</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h4 id="正则表达式">正则表达式</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">它是一门独立的学科，不属于任何的其他知识点
</span><span class="s1">所有的编程语言都可以使用正则表达式
</span><span class="s1">
</span><span class="s1">如果我们想在python中使用正则表达式需要借助于re模块(爬虫相关模块)
</span><span class="s1">
</span><span class="s1">用一些特殊符号的组合去字符串里面筛选出符合符号特征的内容&#39;&#39;&#39;</span>
</code></pre></div><h4 id="前戏">前戏</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">校验手机号
</span><span class="s2">1.校验手机号的开头
</span><span class="s2">2.校验手机号的位数
</span><span class="s2">3.校验必须是纯数字
</span><span class="s2">
</span><span class="s2">使用python代码实现
</span><span class="s2">&#39;&#39;&#39;用python逻辑代码实现&#39;&#39;&#39;
</span><span class="s2">&gt;&gt;&gt; 获取用户输入的手机号
</span><span class="s2">phone = input(&#39;please input your number&gt;&gt;&gt;:&#39;).strip()
</span><span class="s2">&gt;&gt;&gt; 1.是否是纯数字
</span><span class="s2">if phone.isdigit():  &gt;&gt;&gt; 字符串里面如果是纯数字就返回True不是返回False
</span><span class="s2">    &gt;&gt;&gt; 2.判断位数
</span><span class="s2">    if len(phone) == 11:
</span><span class="s2">        &gt;&gt;&gt; 3.判断手机号开头 11 13 14 15 18
</span><span class="s2">        if phone.startswith(&#39;11&#39;) or \
</span><span class="s2">                phone.startswith(&#39;13&#39;) or \
</span><span class="s2">                phone.startswith(&#39;14&#39;) or \
</span><span class="s2">                phone.startswith(&#39;15&#39;) or \
</span><span class="s2">                phone.startswith(&#39;18&#39;):
</span><span class="s2">            print(&#39;手机号正确&#39;)
</span><span class="s2">        else:
</span><span class="s2">            print(&#39;手机号格式错误&#39;)
</span><span class="s2">    else:
</span><span class="s2">        print(&#39;手机号必须是11位&#39;)
</span><span class="s2">else:
</span><span class="s2">    print(&#39;手机号只能是数字&#39;)
</span><span class="s2">    
</span><span class="s2">&#39;&#39;&#39;用正则表达式书写&#39;&#39;&#39;
</span><span class="s2">import re
</span><span class="s2">phone_number = input(&#39;please input your phone number ： &#39;)
</span><span class="s2">if re.match(&#39;^(13|14|15|18)[0-9]{9}$&#39;,phone_number):
</span><span class="s2">        print(&#39;是合法的手机号码&#39;)
</span><span class="s2">else:
</span><span class="s2">        print(&#39;不是合法的手机号码&#39;)&#34;&#34;&#34;</span>
</code></pre></div><h4 id="字符组">字符组</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">[0-9]  &gt;&gt;&gt; 匹配数字
</span><span class="s2">[a-z]  &gt;&gt;&gt; 匹配小写字母
</span><span class="s2">&#39;&#39;&#39;
</span><span class="s2">字符组在匹配的时候是单个单个字符依次匹配
</span><span class="s2">&#39;&#39;&#39;
</span><span class="s2">字符组:[字符组]
</span><span class="s2">在同一个位置可能出现的各种字符组成了一个字符组，在正则表达式中用[]表示
</span><span class="s2">字符分为很多类，比如数字、字母、标点等等。
</span><span class="s2">假如你现在要求一个位置&#34;只能出现一个数字&#34;,那么这个位置上的字符只能是0、1、2...9这10个数之一。
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="字符">字符</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">特殊符号
</span><span class="s2">.		匹配换行符意外的任意字符
</span><span class="s2">\d      匹配数字
</span><span class="s2">^		匹配字符串的开头
</span><span class="s2">		^a  匹配字母a但是这个a必须位于字符串的开头
</span><span class="s2">$		匹配字符串的结尾
</span><span class="s2">		a$  匹配字符a但是这个a必须位于字符串的结尾
</span><span class="s2">|		或
</span><span class="s2">		a|b 匹配字符a或者字符b
</span><span class="s2">()		给正则表达式组成一个组 不影响匹配
</span><span class="s2">[^]		取反操作
</span><span class="s2">		[a-z]匹配所有的小写字母
</span><span class="s2">    	[^a-z]匹配除了小写字母意外的任意字符
</span><span class="s2">
</span><span class="s2">^与$连用可以明确的限制待匹配的字符
</span><span class="s2">^jason$  这个字符串必须仅仅是jason才可以
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="量词">量词</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;量词的出现能够是我们的正则表达式一次性匹配多个字符
</span><span class="s1">*			重复零次或更多次
</span><span class="s1">+			重复一次或更多次
</span><span class="s1">?			重复零次或一次
</span><span class="s1">{n}			重复n次
</span><span class="s1">{n,}		重复n次或更多次
</span><span class="s1">{n,m}		重复n到m次
</span><span class="s1">&#34;&#34;&#34;
</span><span class="s1">正则表达式默认都是贪婪匹配(尽可能往多的匹配)
</span><span class="s1">&#34;&#34;&#34;
</span><span class="s1">
</span><span class="s1">量词不能单独使用，一定要配合正则符号&#39;&#39;&#39;</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;eg:
</span><span class="s1">海.			海燕海娇海东	 海燕
</span><span class="s1">						 海娇
</span><span class="s1">    					 海东	  		 匹配所有&#34;海.&#34;的字符
</span><span class="s1">^海.			海燕海娇海东	海燕			只从开头匹配&#34;海.&#34;
</span><span class="s1">海.$	  		海燕海娇海东	海东			只匹配结尾的&#34;海.$&#34;
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">李.?			李杰和李莲英和李二棍子			李杰
</span><span class="s1">										李莲
</span><span class="s1">										李二
</span><span class="s1">
</span><span class="s1">李.*			李杰和李莲英和李二棍子			李杰和李莲英和李二棍子
</span><span class="s1">李.+			李杰和李莲英和李二棍子			李杰和李莲英和李二棍子
</span><span class="s1">李.{1,2}		李杰和李莲英和李二棍子			李杰和
</span><span class="s1">                                        李莲英
</span><span class="s1">                                        李二棍	
</span><span class="s1">\d+			 hj213hj312h3j				213
</span><span class="s1">										312
</span><span class="s1">    									3&#39;&#39;&#39;</span>
</code></pre></div><h4 id="-贪婪匹配与非贪婪匹配">★ 贪婪匹配与非贪婪匹配</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;待匹配的字符串
</span><span class="s1">&lt;script&gt;hello world&lt;/script&gt;
</span><span class="s1">***************************************************
</span><span class="s1">&gt;&gt;&gt; 正则1	贪婪匹配
</span><span class="s1">&lt;.*&gt;
</span><span class="s1">&#34;&#34;&#34;
</span><span class="s1">贪婪匹配会一直往后查找
</span><span class="s1">&lt;script&gt;hello world&lt;/script&gt;
</span><span class="s1">&#34;&#34;&#34;
</span><span class="s1">
</span><span class="s1">&gt;&gt;&gt; 正则2	非贪婪匹配(在量词的后面加上一个问号就会由贪婪变成非贪婪)
</span><span class="s1">^&lt;.*?&gt;
</span><span class="s1">&#34;&#34;&#34;
</span><span class="s1">&lt;script&gt;
</span><span class="s1">&#34;&#34;&#34;
</span><span class="s1">***************************************************&#39;&#39;&#39;</span>
</code></pre></div><h4 id="复杂的正则匹配">复杂的正则匹配</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;^[1-9]\d{13,16}[0-9x]$
</span><span class="s1">	字符串必须是数字1-9开头
</span><span class="s1">    后面可以出现13位到16位的数字
</span><span class="s1">    必须是以数字0-9或者字母x结尾	
</span><span class="s1">^[1-9]\d{14}(\d{2}[0-9x])?$
</span><span class="s1">	字符串必须是数字1-9开头
</span><span class="s1">    后面必须再跟14位数字
</span><span class="s1">    再跟两位数字
</span><span class="s1">    最后一位数字或者字母x结尾
</span><span class="s1">
</span><span class="s1">我们以后遇到复杂的正则表达式不一定自己手写，直接百度即可
</span><span class="s1">http://tool.chinaz.com/regex/
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h4 id="转义符">转义符</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;由于斜杠和一些字母的组合有特殊的含义，但是我们有时候并不需要这些特殊含义就是写什么就是什么
</span><span class="s1"></span><span class="se">\n</span><span class="s1">	 并不能匹配到字符 </span><span class="se">\n</span><span class="s1">
</span><span class="s1"></span><span class="se">\\</span><span class="s1">n  才能匹配正常的字符 </span><span class="se">\n</span><span class="s1">
</span><span class="s1">
</span><span class="s1">在python中我们习惯用字母r来取消特殊含义&#39;&#39;&#39;</span>
</code></pre></div><h4 id="re模块">re模块</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s1">&#39;www.(baidu|oldboy).com&#39;</span><span class="p">,</span> <span class="s1">&#39;www.oldboy.com&#39;</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">ret</span><span class="p">)</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">findall分组优先展示
</span><span class="s2">    (baidu|oldboy)
</span><span class="s2">    会优先展示出括号内正则表达式匹配到的内容
</span><span class="s2">取消分组优先展示
</span><span class="s2">    (?:baidu|oldboy)
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;jason egon alex&#39;</span><span class="p">)</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">只要找到一个符合正则的字符 就立刻结束
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;jason egon alex&#39;</span><span class="p">)</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">会从字符串的开头找 如果不符合后面直接不找了
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="requests模块">requests模块</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">该模块可以通过代码模拟浏览器发送请求
</span><span class="s1">
</span><span class="s1">下载
</span><span class="s1">pip3 install requests
</span><span class="s1">
</span><span class="s1">基本使用
</span><span class="s1">import requests
</span><span class="s1">&gt;&gt;&gt; 朝目标网址发送get请求获取数据
</span><span class="s1">res = requests.get(&#39;https://www.baidu.com&#39;)
</span><span class="s1">&gt;&gt;&gt; print(res)  &gt;&gt;&gt; &lt;Response [200]&gt;
</span><span class="s1">&gt;&gt;&gt; print(res.status_code)  &gt;&gt;&gt; 200  两者都是用来查看响应状态
</span><span class="s1">&gt;&gt;&gt; print(res.text)  &gt;&gt;&gt; 获取get请求响应的页面内容(字符串)
</span><span class="s1">
</span><span class="s1">print(res.content)  &gt;&gt;&gt; 获取get请求响应的页面内容(二进制)
</span><span class="s1">with open(r&#39;a.html&#39;,&#39;wb&#39;) as f:
</span><span class="s1">    f.write(res.content)&#39;&#39;&#39;</span>
<span class="s1">&#39;&#39;&#39;
</span><span class="s1">requests模块可以模拟很多请求方法
</span><span class="s1">	requests.get()
</span><span class="s1">	requests.post()
</span><span class="s1">	...
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h4 id="防爬措施">防爬措施</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;1.最简单的
</span><span class="s1">	校验你是不是一个浏览器
</span><span class="s1">    &gt;&gt;&gt; 就是去你的请求头里面查看有没有一个键值对
</span><span class="s1">    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36
</span><span class="s1">   上述键值对是专门用来标识你是否是一个浏览器
</span><span class="s1">    
</span><span class="s1">破解方式
</span><span class="s1">	在你的请求头里面加上上述键值对即可
</span><span class="s1">    import requests
</span><span class="s1">
</span><span class="s1">res = requests.get(&#39;https://dig.chouti.com/&#39;,
</span><span class="s1">                   headers={
</span><span class="s1">                       &#34;User-Agent&#34;: &#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&#34;
</span><span class="s1">                   }
</span><span class="s1">                   )
</span><span class="s1">with open(r&#39;b.html&#39;,&#39;wb&#39;) as f:
</span><span class="s1">    f.write(res.content)  &gt;&gt;&gt; 只能拿到HTML代码 CSS和JS我们无法直接获取和执行&#39;&#39;&#39;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>初识爬虫、概念、HTML</title>
			<link>https://Eddy-622.github.io/posts/%E5%88%9D%E8%AF%86%E7%88%AC%E8%99%AB%E6%A6%82%E5%BF%B5html/</link>
			<pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/%E5%88%9D%E8%AF%86%E7%88%AC%E8%99%AB%E6%A6%82%E5%BF%B5html/</guid>
			<description>今日内容概要  爬虫的概念 前端之HTML 正则表达式  今日内容详细 爬虫的概念 &amp;#39;&amp;#39;&amp;#39;互联网所有的计算机彼此互联，形成一张无形的大网联网目的实现数据的彼此传递什么是上网通过浏览器发送请求获取相应的数据（数据通过互联网传输的都是二进制格式）什么是爬虫通过代码模拟浏览器发送请求获取相应的数据兵器过滤出自己想要的存储到数据库中比喻我们把互联网当成一张很大的蜘蛛网，每台计算机上的数据便是蜘蛛的一个猎物，而爬虫程序就是一个小蜘蛛，沿着蜘蛛网抓取自己想要的猎物/数据价值 互联网最有价值的便是数据，往往谁能掌控行业的一手数据便能成为行业的主宰，这些数据代表着行业的真金白银，而爬虫就是使用工具高效的挖掘这些真金白银注意由于爬虫是有一点擦变性性质的，不要什么数据都去爬银行账户信息之类的&amp;#39;&amp;#39;&amp;#39;爬虫流程 &amp;#39;&amp;#39;&amp;#39;1. 通过代码模拟浏览器发送请求2. 必须要通过对方的校验才能获取到数据3. 解析获取到的二进制数据4、提取我们需要的保存到数据库cs架构与bs架构bs架构的本身也是cs架构通过一个浏览器访问多个服务端&amp;#39;&amp;#39;&amp;#39;HTTP协议 &amp;#39;&amp;#39;&amp;#39;HTTP协议：超文本传输协议规定了浏览器与服务端之间数据交互的格式四大特性：1、基与请求响应2、基于TCP/IP作用于应用层之上的协议3、无状态不保存用户状态4无连接（短链接）彼此交互完数据之后再无瓜葛数据格式请求格式请求首行（请求方法，HTTP协议版本）请求头（一大堆k：v键值对）请求体（post携带的请求数据会携带在请求体内）响应格式响应首行响应头响应体响应状态码用一串数字来表达信息1XX：服务端已经接受到了你的请求，正在处理你可以继续提交数据2XX：服务端应景成功的响应了对应的数据（200）3XX：重定向（原本访问A重定向到了B）4XX：404请求资源不存在，403请求不符合条件5XX：服务器内部错误（500）&amp;#39;&amp;#39;&amp;#39;请求方法 &amp;#39;&amp;#39;&amp;#39;1、get请求向别人要数据eg:1.浏览器地址栏里面输入www.baidu.com朝百度服务端要百度首页的数据2.</description>
			<content type="html"><![CDATA[<h2 id="今日内容概要">今日内容概要</h2>
<ul>
<li>爬虫的概念</li>
<li>前端之HTML</li>
<li>正则表达式</li>
</ul>
<h2 id="今日内容详细">今日内容详细</h2>
<h4 id="爬虫的概念">爬虫的概念</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">互联网
</span><span class="s1">	所有的计算机彼此互联，形成一张无形的大网
</span><span class="s1">联网目的
</span><span class="s1">	实现数据的彼此传递
</span><span class="s1">什么是上网
</span><span class="s1">	通过浏览器发送请求获取相应的数据
</span><span class="s1">    （数据通过互联网传输的都是二进制格式）
</span><span class="s1">什么是爬虫
</span><span class="s1">	通过代码模拟浏览器发送请求
</span><span class="s1">    获取相应的数据兵器过滤出自己想要的
</span><span class="s1">    存储到数据库中
</span><span class="s1">    
</span><span class="s1">    
</span><span class="s1">比喻
</span><span class="s1">	我们把互联网当成一张很大的蜘蛛网，每台计算机上的数据便是蜘蛛的一个猎物，而爬虫程序就是一个小蜘蛛，沿着蜘蛛网抓取自己想要的猎物/数据
</span><span class="s1">    
</span><span class="s1">价值 	
</span><span class="s1">	互联网最有价值的便是数据，往往谁能掌控行业的一手数据便能成为行业的主宰，这些数据代表着行业的真金白银，而爬虫就是使用工具高效的挖掘这些真金白银
</span><span class="s1">    
</span><span class="s1">注意
</span><span class="s1">	由于爬虫是有一点擦变性性质的，不要什么数据都去爬
</span><span class="s1">    银行账户信息之类的&#39;&#39;&#39;</span>
    
</code></pre></div><h4 id="爬虫流程">爬虫流程</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;1. 通过代码模拟浏览器发送请求
</span><span class="s1">
</span><span class="s1">2. 必须要通过对方的校验才能获取到数据
</span><span class="s1">
</span><span class="s1">3. 解析获取到的二进制数据
</span><span class="s1">
</span><span class="s1">4、提取我们需要的保存到数据库
</span><span class="s1">
</span><span class="s1">cs架构与bs架构
</span><span class="s1">bs架构的本身也是cs架构
</span><span class="s1">
</span><span class="s1">通过一个浏览器访问多个服务端&#39;&#39;&#39;</span>

</code></pre></div><h4 id="http协议">HTTP协议</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;HTTP协议：超文本传输协议
</span><span class="s1">规定了浏览器与服务端之间数据交互的格式
</span><span class="s1">
</span><span class="s1">四大特性：
</span><span class="s1">	1、基与请求响应
</span><span class="s1">    2、基于TCP/IP作用于应用层之上的协议
</span><span class="s1">    3、无状态
</span><span class="s1">    	不保存用户状态
</span><span class="s1">    4无连接（短链接）
</span><span class="s1">    	彼此交互完数据之后再无瓜葛
</span><span class="s1">        
</span><span class="s1">数据格式
</span><span class="s1">	请求格式
</span><span class="s1">    	请求首行（请求方法，HTTP协议版本）
</span><span class="s1">        请求头（一大堆k：v键值对）
</span><span class="s1">        
</span><span class="s1">        请求体（post携带的请求数据会携带在请求体内）
</span><span class="s1">        
</span><span class="s1">	响应格式
</span><span class="s1">    	响应首行
</span><span class="s1">        响应头
</span><span class="s1">        	
</span><span class="s1">        响应体
</span><span class="s1">
</span><span class="s1">响应状态码
</span><span class="s1">	用一串数字来表达信息
</span><span class="s1">    1XX：服务端已经接受到了你的请求，正在处理你可以继续提交数据
</span><span class="s1">    2XX：服务端应景成功的响应了对应的数据（200）
</span><span class="s1">    3XX：重定向（原本访问A重定向到了B）
</span><span class="s1">    4XX：404请求资源不存在，403请求不符合条件
</span><span class="s1">    5XX：服务器内部错误（500）&#39;&#39;&#39;</span>
</code></pre></div><h4 id="请求方法">请求方法</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">1、get请求
</span><span class="s1">	向别人要数据
</span><span class="s1">    eg:
</span><span class="s1">        1.浏览器地址栏里面输入www.baidu.com朝百度服务端要百度首页的数据
</span><span class="s1">        2.朝别人要数据的时候也可以携带额外的参数，比如获取某个岗位的招聘信息，那么我可以加上一些筛选条件:工作经验、学历...
</span><span class="s1">    get请求携带数据是直接放在url的后面
</span><span class="s1">    	url?username=jason&amp;password=123
</span><span class="s1">        get请求只能携带不敏感的信息，并且大小有限制
</span><span class="s1">
</span><span class="s1">url统一资源定位符 你可以直接理解为是网址
</span><span class="s1">
</span><span class="s1">    
</span><span class="s1">2.post请求
</span><span class="s1">	朝别人提交数据
</span><span class="s1">    eg:
</span><span class="s1">        1.用户注册登录
</span><span class="s1">        	将用户名和密码提交给服务端
</span><span class="s1">       	post请求携带的数据都是放在请求体里面的 &#39;&#39;&#39;</span>
</code></pre></div><h4 id="为什么要学http协议">为什么要学HTTP协议</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;因为爬虫是模拟浏览器朝服务端发送请求
</span><span class="s1">而浏览器与服务端之间数据交互要遵循HTTP协议
</span><span class="s1">所以我们写爬虫程序也得按照HTTP协议规范来写&#39;&#39;&#39;</span>
</code></pre></div><h5 id="前端之html">前端之HTML</h5>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;浏览器之所以能够展示出华丽花哨的界面
</span><span class="s1">那是因为服务端返回给浏览器的都是HTML文件
</span><span class="s1">
</span><span class="s1">HTML是构建网页的骨架，如果你想让你的服务端能够被浏览器正常的访问并且展示内容，你必须用HTML来书写网页
</span><span class="s1">
</span><span class="s1">简介
</span><span class="s1">超文本标记语言，是用来构造网页骨架的
</span><span class="s1">
</span><span class="s1">虽然HTML很丑 但是浏览器会自动帮你按照一定的语法规则渲染成好看的界面&#39;&#39;&#39;</span>
</code></pre></div><h5 id="为什么要学html">为什么要学HTML</h5>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;因为朝服务端要数据 本质其实就是服务端给了一堆HTML代码
</span><span class="s1">而我们需要从HTML代码中筛选出我们需要的数据&#39;&#39;&#39;</span>
</code></pre></div><h4 id="前端三剑客">前端三剑客</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">HTML 
</span><span class="s1">	构建网页的骨架
</span><span class="s1">CSS
</span><span class="s1">	用来给HTML调节样式
</span><span class="s1">JavaScript
</span><span class="s1">	用来生成页面的动态效果&#39;&#39;&#39;</span>
</code></pre></div><h4 id="html">HTML</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">文档结构
</span><span class="s1">&lt;html&gt;
</span><span class="s1">	&lt;head&gt;
</span><span class="s1">    	放的基本都不是给人看的信息
</span><span class="s1">    &lt;/head&gt;
</span><span class="s1">    &lt;body&gt;
</span><span class="s1">    	放的都是浏览器会直接展示给用户看的
</span><span class="s1">    &lt;/body&gt;
</span><span class="s1">&lt;/html&gt;&#39;&#39;&#39;</span>
</code></pre></div><h4 id="head内常见标签">head内常见标签</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">title
</span><span class="s1">	定义网页标题
</span><span class="s1">script
</span><span class="s1">	可以引入外部js文件
</span><span class="s1">    也可以直接在改标题内部书写js代码
</span><span class="s1">link
</span><span class="s1">	引入外部js文件
</span><span class="s1">style
</span><span class="s1">	在内部可以直接书写css代码&#39;&#39;&#39;</span>
</code></pre></div><h4 id="body内常见标签">body内常见标签</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">h1~h6	标题标签（一节标题到六级标题）
</span><span class="s1">a		链接标签（点击即跳转到对应链接地址）
</span><span class="s1">img 	图片标签（展示图片）
</span><span class="s1">div		页面布局（用div划分区域）
</span><span class="s1">span	文本标签（普通文本）
</span><span class="s1">form表单	
</span><span class="s1">		能够获取用户数据并且发送给后端
</span><span class="s1">    	action
</span><span class="s1">        	控制提交给哪个后端
</span><span class="s1">        method
</span><span class="s1">        	控制请求方式 默认get请求
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h4 id="学会利用chrome快速开发">学会利用chrome快速开发</h4>
]]></content>
		</item>
		
		<item>
			<title>MySQL连表查询练习题</title>
			<link>https://Eddy-622.github.io/posts/mysql%E8%BF%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%BB%83%E4%B9%A0%E9%A2%98/</link>
			<pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/mysql%E8%BF%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%BB%83%E4%B9%A0%E9%A2%98/</guid>
			<description>作业 1、查询所有的课程的名称以及对应的任课老师姓名
SELECT course.cname,teacher.tname FROM course INNER JOIN teacher on course.teacher_id=teacher.tid;2、查询学生表中男女生各有多少人
SELECT gender as &amp;#39;性别&amp;#39;,count(gender) as &amp;#39;人数&amp;#39; FROM student GROUP BY gender ;3、查询物理成绩等于100的学生的姓名
SELECTscore.num,student.sname FROMscoreINNER JOIN student ON score.student_id = student.sid WHEREscore.course_id IN ( SELECT course.cid FROM course WHERE course.cname = &amp;#39;物理&amp;#39; ) HAVINGscore.num = 100;4、查询平均成绩大于八十分的同学的姓名和平均成绩
SELECTstudent.sname AS &amp;#39;姓名&amp;#39;,avg( score.num ) AS &amp;#39;平均成绩&amp;#39; FROMscoreRIGHT JOIN student ON score.</description>
			<content type="html"><![CDATA[<h1 id="作业">作业</h1>
<p>1、查询所有的课程的名称以及对应的任课老师姓名</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span> <span class="n">course</span><span class="p">.</span><span class="n">cname</span><span class="p">,</span><span class="n">teacher</span><span class="p">.</span><span class="n">tname</span> <span class="k">FROM</span> <span class="n">course</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">teacher</span> <span class="k">on</span> <span class="n">course</span><span class="p">.</span><span class="n">teacher_id</span><span class="o">=</span><span class="n">teacher</span><span class="p">.</span><span class="n">tid</span><span class="p">;</span>
</code></pre></div><p>2、查询学生表中男女生各有多少人</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span> <span class="n">gender</span> <span class="k">as</span> <span class="s1">&#39;性别&#39;</span><span class="p">,</span><span class="nf">count</span><span class="p">(</span><span class="n">gender</span><span class="p">)</span> <span class="k">as</span> <span class="s1">&#39;人数&#39;</span> <span class="k">FROM</span> <span class="n">student</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">gender</span> <span class="p">;</span>
</code></pre></div><p>3、查询物理成绩等于100的学生的姓名</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="n">score</span><span class="p">.</span><span class="n">num</span><span class="p">,</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sname</span> 
<span class="k">FROM</span>
	<span class="n">score</span>
	<span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">student</span> <span class="k">ON</span> <span class="n">score</span><span class="p">.</span><span class="n">student_id</span> <span class="o">=</span> <span class="n">student</span><span class="p">.</span><span class="n">sid</span> 
<span class="k">WHERE</span>
	<span class="n">score</span><span class="p">.</span><span class="n">course_id</span> <span class="k">IN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">course</span><span class="p">.</span><span class="n">cid</span> <span class="k">FROM</span> <span class="n">course</span> <span class="k">WHERE</span> <span class="n">course</span><span class="p">.</span><span class="n">cname</span> <span class="o">=</span> <span class="s1">&#39;物理&#39;</span> <span class="p">)</span> 
<span class="k">HAVING</span>
	<span class="n">score</span><span class="p">.</span><span class="n">num</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</code></pre></div><p>4、查询平均成绩大于八十分的同学的姓名和平均成绩</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sname</span> <span class="k">AS</span> <span class="s1">&#39;姓名&#39;</span><span class="p">,</span>
	<span class="nf">avg</span><span class="p">(</span> <span class="n">score</span><span class="p">.</span><span class="n">num</span> <span class="p">)</span> <span class="k">AS</span> <span class="s1">&#39;平均成绩&#39;</span> 
<span class="k">FROM</span>
	<span class="n">score</span>
	<span class="k">RIGHT</span> <span class="k">JOIN</span> <span class="n">student</span> <span class="k">ON</span> <span class="n">score</span><span class="p">.</span><span class="n">student_id</span> <span class="o">=</span> <span class="n">student</span><span class="p">.</span><span class="n">sid</span> 
<span class="k">GROUP</span> <span class="k">BY</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sid</span> 
<span class="k">HAVING</span>
	<span class="nf">avg</span><span class="p">(</span> <span class="n">score</span><span class="p">.</span><span class="n">num</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">80</span><span class="p">;</span>
</code></pre></div><p>5、查询所有学生的学号，姓名，选课数，总成绩</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sname</span><span class="p">,</span>
	<span class="n">t1</span><span class="p">.</span><span class="n">sum_num</span><span class="p">,</span>
	<span class="n">t1</span><span class="p">.</span><span class="n">count_cid</span> 
<span class="k">FROM</span>
	<span class="n">student</span>
	<span class="k">INNER</span> <span class="k">JOIN</span> <span class="p">(</span>
<span class="k">SELECT</span>
	<span class="n">score</span><span class="p">.</span><span class="n">student_id</span><span class="p">,</span>
	<span class="nf">sum</span><span class="p">(</span> <span class="n">score</span><span class="p">.</span><span class="n">num</span> <span class="p">)</span> <span class="k">AS</span> <span class="n">sum_num</span><span class="p">,</span>
	<span class="nf">count</span><span class="p">(</span> <span class="n">course</span><span class="p">.</span><span class="n">cid</span> <span class="p">)</span> <span class="k">AS</span> <span class="n">count_cid</span> 
<span class="k">FROM</span>
	<span class="n">course</span>
	<span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">score</span> <span class="k">ON</span> <span class="n">course</span><span class="p">.</span><span class="n">cid</span> <span class="o">=</span> <span class="n">score</span><span class="p">.</span><span class="n">course_id</span> 
<span class="k">GROUP</span> <span class="k">BY</span>
	<span class="n">score</span><span class="p">.</span><span class="n">student_id</span> 
	<span class="p">)</span> <span class="k">AS</span> <span class="n">t1</span> <span class="k">ON</span> <span class="n">student</span><span class="p">.</span><span class="n">sid</span> <span class="o">=</span> <span class="n">t1</span><span class="p">.</span><span class="n">student_id</span><span class="p">;</span>
</code></pre></div><p>6、 查询姓李老师的个数</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="nf">count</span><span class="p">(</span> <span class="n">teacher</span><span class="p">.</span><span class="n">tname</span> <span class="p">)</span> 
<span class="k">FROM</span>
	<span class="n">teacher</span> 
<span class="k">WHERE</span>
	<span class="n">teacher</span><span class="p">.</span><span class="n">tname</span> <span class="k">LIKE</span> <span class="s1">&#39;李%&#39;</span><span class="p">;</span>
</code></pre></div><p>7、 查询没有报李平老师课的学生姓名</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sname</span> 
<span class="k">FROM</span>
	<span class="n">student</span> 
<span class="k">WHERE</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sid</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span>
<span class="k">SELECT</span>
	<span class="n">score</span><span class="p">.</span><span class="n">student_id</span> 
<span class="k">FROM</span>
	<span class="n">score</span> 
<span class="k">WHERE</span>
	<span class="n">score</span><span class="p">.</span><span class="n">course_id</span> <span class="k">IN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">course</span><span class="p">.</span><span class="n">cid</span> <span class="k">FROM</span> <span class="n">course</span> <span class="k">WHERE</span> <span class="n">course</span><span class="p">.</span><span class="n">teacher_id</span> <span class="k">IN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">teacher</span><span class="p">.</span><span class="n">tid</span> <span class="k">FROM</span> <span class="n">teacher</span> <span class="k">WHERE</span> <span class="n">teacher</span><span class="p">.</span><span class="n">tname</span> <span class="o">=</span> <span class="s1">&#39;李平老师&#39;</span> <span class="p">)</span> <span class="p">)</span> 
	<span class="p">);</span>
</code></pre></div><p>8、 查询物理课程比生物课程高的学生的学号</p>
<p>9、 查询没有同时选修物理课程和体育课程的学生姓名</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sname</span> 
<span class="k">FROM</span>
	<span class="n">student</span> 
<span class="k">WHERE</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sid</span> <span class="k">NOT</span> <span class="k">IN</span> <span class="p">(</span>
<span class="k">SELECT</span>
	<span class="n">score</span><span class="p">.</span><span class="n">student_id</span> 
<span class="k">FROM</span>
	<span class="n">score</span> 
<span class="k">WHERE</span>
	<span class="n">score</span><span class="p">.</span><span class="n">course_id</span> <span class="k">IN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">course</span><span class="p">.</span><span class="n">cid</span> <span class="k">FROM</span> <span class="n">course</span> <span class="k">WHERE</span> <span class="n">course</span><span class="p">.</span><span class="n">cname</span> <span class="o">=</span> <span class="s1">&#39;物理&#39;</span> <span class="k">OR</span> <span class="n">course</span><span class="p">.</span><span class="n">cname</span> <span class="o">=</span> <span class="s1">&#39;体育&#39;</span> <span class="p">)</span> 
<span class="k">GROUP</span> <span class="k">BY</span>
	<span class="n">score</span><span class="p">.</span><span class="n">student_id</span> 
<span class="k">HAVING</span>
	<span class="nf">count</span><span class="p">(</span> <span class="n">score</span><span class="p">.</span><span class="n">student_id</span> <span class="p">)</span> <span class="o">=</span> <span class="mi">1</span> 
	<span class="p">);</span>
</code></pre></div><p>10、查询挂科超过两门(包括两门)的学生姓名和班级</p>
<div class="highlight"><pre class="chroma"><code class="language-MYSQL" data-lang="MYSQL"><span class="k">SELECT</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sname</span><span class="p">,</span>
	<span class="n">class</span><span class="p">.</span><span class="n">caption</span> 
<span class="k">FROM</span>
	<span class="n">student</span>
	<span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">class</span> <span class="k">ON</span> <span class="n">student</span><span class="p">.</span><span class="n">class_id</span> <span class="o">=</span> <span class="n">class</span><span class="p">.</span><span class="n">cid</span> 
<span class="k">WHERE</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sid</span> <span class="k">IN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">score</span><span class="p">.</span><span class="n">student_id</span> <span class="k">FROM</span> <span class="n">score</span> <span class="k">WHERE</span> <span class="n">score</span><span class="p">.</span><span class="n">num</span> <span class="o">&lt;</span> <span class="mi">60</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">score</span><span class="p">.</span><span class="n">student_id</span> <span class="k">HAVING</span> <span class="nf">count</span><span class="p">(</span> <span class="n">student_id</span> <span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="p">);</span>
</code></pre></div><p>11、查询选修了所有课程的学生姓名</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sname</span> 
<span class="k">FROM</span>
	<span class="n">student</span> 
<span class="k">WHERE</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sid</span> <span class="k">IN</span> <span class="p">(</span>
<span class="k">SELECT</span>
	<span class="n">score</span><span class="p">.</span><span class="n">student_id</span> 
<span class="k">FROM</span>
	<span class="n">score</span> 
<span class="k">WHERE</span>
	<span class="n">score</span><span class="p">.</span><span class="n">course_id</span> <span class="k">IN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">course</span><span class="p">.</span><span class="n">cid</span> <span class="k">FROM</span> <span class="n">course</span> <span class="p">)</span> 
<span class="k">GROUP</span> <span class="k">BY</span>
	<span class="n">score</span><span class="p">.</span><span class="n">student_id</span> 
<span class="k">HAVING</span>
	<span class="nf">count</span><span class="p">(</span> <span class="n">score</span><span class="p">.</span><span class="n">student_id</span> <span class="p">)</span> <span class="o">=</span> <span class="mi">4</span> 
	<span class="p">)</span> <span class="p">;</span>
</code></pre></div><p>12、查询李平老师教的课程的所有成绩记录</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="n">score</span><span class="p">.</span><span class="n">num</span> <span class="k">AS</span> <span class="s1">&#39;成绩&#39;</span> 
<span class="k">FROM</span>
	<span class="n">score</span> 
<span class="k">WHERE</span>
	<span class="n">score</span><span class="p">.</span><span class="n">course_id</span> <span class="k">IN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">course</span><span class="p">.</span><span class="n">cid</span> <span class="k">FROM</span> <span class="n">course</span> <span class="k">WHERE</span> <span class="n">course</span><span class="p">.</span><span class="n">teacher_id</span> <span class="k">IN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">teacher</span><span class="p">.</span><span class="n">tid</span> <span class="k">FROM</span> <span class="n">teacher</span> <span class="k">WHERE</span> <span class="n">teacher</span><span class="p">.</span><span class="n">tname</span> <span class="o">=</span> <span class="s1">&#39;李平老师&#39;</span> <span class="p">)</span> <span class="p">);</span>
</code></pre></div><p>13、查询全部学生都选修了的课程号和课程名</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sname</span> <span class="k">AS</span> <span class="s1">&#39;学生姓名&#39;</span><span class="p">,</span>
	<span class="n">t1</span><span class="p">.</span><span class="n">course_id</span> <span class="k">AS</span> <span class="s1">&#39;课程编号&#39;</span><span class="p">,</span>
	<span class="n">t1</span><span class="p">.</span><span class="n">cname</span> <span class="k">AS</span> <span class="s1">&#39;课程名称&#39;</span> 
<span class="k">FROM</span>
	<span class="n">student</span>
	<span class="k">INNER</span> <span class="k">JOIN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">score</span><span class="p">.</span><span class="n">student_id</span><span class="p">,</span> <span class="n">score</span><span class="p">.</span><span class="n">course_id</span><span class="p">,</span> <span class="n">course</span><span class="p">.</span><span class="n">cname</span> <span class="k">FROM</span> <span class="n">score</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">course</span> <span class="k">ON</span> <span class="n">score</span><span class="p">.</span><span class="n">course_id</span> <span class="o">=</span> <span class="n">course</span><span class="p">.</span><span class="n">cid</span> <span class="p">)</span> <span class="k">AS</span> <span class="n">t1</span> <span class="k">ON</span> <span class="n">student</span><span class="p">.</span><span class="n">sid</span> <span class="o">=</span> <span class="n">t1</span><span class="p">.</span><span class="n">student_id</span><span class="p">;</span>
</code></pre></div><p>14、查询每门课程被选修的次数</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="n">course</span><span class="p">.</span><span class="n">cname</span> <span class="k">AS</span> <span class="s1">&#39;课程名称&#39;</span><span class="p">,</span>
	<span class="n">t1</span><span class="p">.</span><span class="n">t2</span> <span class="k">AS</span> <span class="s1">&#39;选修次数&#39;</span> 
<span class="k">FROM</span>
	<span class="n">course</span>
	<span class="k">INNER</span> <span class="k">JOIN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">score</span><span class="p">.</span><span class="n">course_id</span><span class="p">,</span> <span class="nf">count</span><span class="p">(</span> <span class="n">score</span><span class="p">.</span><span class="n">course_id</span> <span class="p">)</span> <span class="k">AS</span> <span class="n">t2</span> <span class="k">FROM</span> <span class="n">score</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">score</span><span class="p">.</span><span class="n">course_id</span> <span class="p">)</span> <span class="k">AS</span> <span class="n">t1</span> <span class="k">ON</span> <span class="n">course</span><span class="p">.</span><span class="n">cid</span> <span class="o">=</span> <span class="n">t1</span><span class="p">.</span><span class="n">course_id</span><span class="p">;</span>
</code></pre></div><p>15、查询之选修了一门课程的学生姓名和学号</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sname</span> <span class="k">AS</span> <span class="s1">&#39;学生姓名&#39;</span><span class="p">,</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sid</span> <span class="k">AS</span> <span class="s1">&#39;学号&#39;</span> 
<span class="k">FROM</span>
	<span class="n">student</span> 
<span class="k">WHERE</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sid</span> <span class="k">IN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">score</span><span class="p">.</span><span class="n">student_id</span> <span class="k">FROM</span> <span class="n">score</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">score</span><span class="p">.</span><span class="n">student_id</span> <span class="k">HAVING</span> <span class="nf">count</span><span class="p">(</span> <span class="n">score</span><span class="p">.</span><span class="n">student_id</span> <span class="p">)</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">);</span> 
</code></pre></div><p>16、查询所有学生考出的成绩并按从高到低排序（成绩去重）</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sname</span> <span class="k">AS</span> <span class="s1">&#39;姓名&#39;</span><span class="p">,</span>
	<span class="n">t1</span><span class="p">.</span><span class="n">num</span> <span class="k">AS</span> <span class="s1">&#39;成绩&#39;</span> 
<span class="k">FROM</span>
	<span class="n">student</span>
	<span class="k">INNER</span> <span class="k">JOIN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="k">DISTINCT</span> <span class="n">score</span><span class="p">.</span><span class="n">num</span><span class="p">,</span> <span class="n">score</span><span class="p">.</span><span class="n">student_id</span> <span class="k">AS</span> <span class="n">t2</span> <span class="k">FROM</span> <span class="n">score</span> <span class="p">)</span> <span class="k">AS</span> <span class="n">t1</span> <span class="k">ON</span> <span class="n">student</span><span class="p">.</span><span class="n">sid</span> <span class="o">=</span> <span class="n">t1</span><span class="p">.</span><span class="n">t2</span> 
<span class="k">ORDER</span> <span class="k">BY</span>
	<span class="n">t1</span><span class="p">.</span><span class="n">num</span> <span class="k">DESC</span><span class="p">;</span>
</code></pre></div><p>17、查询平均成绩大于85的学生姓名和平均成绩</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sname</span> <span class="k">AS</span> <span class="s1">&#39;姓名&#39;</span><span class="p">,</span>
	<span class="n">t1</span><span class="p">.</span><span class="n">avgnum</span> <span class="k">AS</span> <span class="s1">&#39;平均成绩&#39;</span> 
<span class="k">FROM</span>
	<span class="n">student</span>
	<span class="k">INNER</span> <span class="k">JOIN</span> <span class="p">(</span>
<span class="k">SELECT</span>
	<span class="n">score</span><span class="p">.</span><span class="n">student_id</span> <span class="k">AS</span> <span class="n">sid1</span><span class="p">,</span>
	<span class="nf">avg</span><span class="p">(</span> <span class="n">score</span><span class="p">.</span><span class="n">student_id</span> <span class="p">)</span> <span class="k">AS</span> <span class="n">avgnum</span> 
<span class="k">FROM</span>
	<span class="n">score</span> 
<span class="k">GROUP</span> <span class="k">BY</span>
	<span class="n">score</span><span class="p">.</span><span class="n">student_id</span> 
<span class="k">HAVING</span>
	<span class="nf">avg</span><span class="p">(</span> <span class="n">score</span><span class="p">.</span><span class="n">num</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">85</span> 
	<span class="p">)</span> <span class="k">AS</span> <span class="n">t1</span> <span class="k">ON</span> <span class="n">student</span><span class="p">.</span><span class="n">sid</span> <span class="o">=</span> <span class="n">t1</span><span class="p">.</span><span class="n">sid1</span><span class="p">;</span>
</code></pre></div><p>18、查询生物成绩不及格的学生姓名和对应生物分数</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sname</span> <span class="k">AS</span> <span class="s1">&#39;姓名&#39;</span><span class="p">,</span>
	<span class="n">t1</span><span class="p">.</span><span class="n">num</span> <span class="k">AS</span> <span class="s1">&#39;成绩&#39;</span> 
<span class="k">FROM</span>
	<span class="n">student</span>
	<span class="k">INNER</span> <span class="k">JOIN</span> <span class="p">(</span>
<span class="k">SELECT</span>
	<span class="n">score</span><span class="p">.</span><span class="n">student_id</span><span class="p">,</span>
	<span class="n">score</span><span class="p">.</span><span class="n">num</span> 
<span class="k">FROM</span>
	<span class="n">score</span> 
<span class="k">WHERE</span>
	<span class="n">score</span><span class="p">.</span><span class="n">course_id</span> <span class="k">IN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">course</span><span class="p">.</span><span class="n">cid</span> <span class="k">FROM</span> <span class="n">course</span> <span class="k">WHERE</span> <span class="n">course</span><span class="p">.</span><span class="n">cname</span> <span class="o">=</span> <span class="s1">&#39;生物&#39;</span> <span class="p">)</span> 
	<span class="k">AND</span> <span class="n">score</span><span class="p">.</span><span class="n">num</span> <span class="o">&lt;</span> <span class="mi">60</span> 
	<span class="p">)</span> <span class="k">AS</span> <span class="n">t1</span> <span class="k">ON</span> <span class="n">student</span><span class="p">.</span><span class="n">sid</span> <span class="o">=</span> <span class="n">t1</span><span class="p">.</span><span class="n">student_id</span><span class="p">;</span>
</code></pre></div><p>19、查询在所有选修了李平老师课程的学生中，这些课程(李平老师的课程，不是所有课程)平均成绩最高的学生姓名</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span>
	<span class="n">student</span><span class="p">.</span><span class="n">sname</span> <span class="k">AS</span> <span class="s1">&#39;姓名&#39;</span><span class="p">,</span>
	<span class="n">t1</span><span class="p">.</span><span class="n">t2</span> <span class="k">AS</span> <span class="s1">&#39;成绩&#39;</span> 
<span class="k">FROM</span>
	<span class="n">student</span>
	<span class="k">INNER</span> <span class="k">JOIN</span> <span class="p">(</span>
<span class="k">SELECT</span>
	<span class="n">score</span><span class="p">.</span><span class="n">student_id</span><span class="p">,</span>
	<span class="nf">avg</span><span class="p">(</span> <span class="n">score</span><span class="p">.</span><span class="n">num</span> <span class="p">)</span> <span class="k">AS</span> <span class="n">t2</span> 
<span class="k">FROM</span>
	<span class="n">score</span> 
<span class="k">WHERE</span>
	<span class="n">score</span><span class="p">.</span><span class="n">course_id</span> <span class="k">IN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">course</span><span class="p">.</span><span class="n">cid</span> <span class="k">FROM</span> <span class="n">course</span> <span class="k">WHERE</span> <span class="n">course</span><span class="p">.</span><span class="n">teacher_id</span> <span class="k">IN</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">teacher</span><span class="p">.</span><span class="n">tid</span> <span class="k">FROM</span> <span class="n">teacher</span> <span class="k">WHERE</span> <span class="n">teacher</span><span class="p">.</span><span class="n">tname</span> <span class="o">=</span> <span class="s1">&#39;李平老师&#39;</span> <span class="p">)</span> <span class="p">)</span> 
<span class="k">GROUP</span> <span class="k">BY</span>
	<span class="n">score</span><span class="p">.</span><span class="n">student_id</span> 
<span class="k">ORDER</span> <span class="k">BY</span>
	<span class="nf">avg</span><span class="p">(</span> <span class="n">score</span><span class="p">.</span><span class="n">num</span> <span class="p">)</span> <span class="k">DESC</span> 
	<span class="k">LIMIT</span> <span class="mi">1</span> 
	<span class="p">)</span> <span class="k">AS</span> <span class="n">t1</span> <span class="k">ON</span> <span class="n">student</span><span class="p">.</span><span class="n">sid</span> <span class="o">=</span> <span class="n">t1</span><span class="p">.</span><span class="n">student_id</span><span class="p">;</span>
</code></pre></div><p>20、查询每门课程成绩最好的前两名学生姓名</p>
<p>21、查询不同课程但成绩相同的学号，课程号，成绩</p>
<p>22、查询没学过“叶平”老师课程的学生姓名以及选修的课程名称；</p>
<p>23、查询所有选修了学号为1的同学选修过的一门或者多门课程的同学学号和姓名；</p>
<p>24、任课最多的老师中学生单科成绩最高的学生姓名</p>
]]></content>
		</item>
		
		<item>
			<title>MySQL之链接Python操作、SQL注入问题</title>
			<link>https://Eddy-622.github.io/posts/mysql%E4%B9%8B%E9%93%BE%E6%8E%A5python%E6%93%8D%E4%BD%9Csql%E6%B3%A8%E5%85%A5%E9%97%AE%E9%A2%98/</link>
			<pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/mysql%E4%B9%8B%E9%93%BE%E6%8E%A5python%E6%93%8D%E4%BD%9Csql%E6%B3%A8%E5%85%A5%E9%97%AE%E9%A2%98/</guid>
			<description>昨日内容回顾   连表操作
&amp;#34;&amp;#34;&amp;#34;由于在实际应用中，我们需要的数据很有可能是来自于多张表 这个时候我们可以采用多表查询的方式1:连表操作 连表操作的本质就是先将多张表拼接成一张表，然后基于这张拼接之后的表做单表查询 &amp;gt;&amp;gt;&amp;gt; 笛卡尔积 select * from emp,dep; 在涉及到多表查询SQL语句的编写过程中，为了避免字段冲突的问题 我们一般都会加上表名来做明确的区分，否则可能会报错 &amp;gt;&amp;gt;&amp;gt; 连表操作 inner join 将两张表都有对应关系的数据按照指定的条件拼接到一起 select * from emp inner join dep on emp.dep_id = dep.id; left join 以关键字left join左边的表为基准，展示左表所有的记录，没有的null填充 select * from emp left join dep on emp.dep_id = dep.id; right join 以关键字right join右边的表为基准，展示右表所有的记录，没有的null填充 select * from emp right join dep on emp.dep_id = dep.id; union 两张表所有的技术全部展示出来，各自没有对应的全部用null填充 select * from emp left join dep on emp.</description>
			<content type="html"><![CDATA[<h1 id="昨日内容回顾">昨日内容回顾</h1>
<ul>
<li>
<p>连表操作</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;由于在实际应用中，我们需要的数据很有可能是来自于多张表
</span><span class="s2">这个时候我们可以采用多表查询的方式1:连表操作
</span><span class="s2">连表操作的本质就是先将多张表拼接成一张表，然后基于这张拼接之后的表做单表查询
</span><span class="s2">  
</span><span class="s2">&gt;&gt;&gt; 笛卡尔积
</span><span class="s2">select * from emp,dep;
</span><span class="s2">  
</span><span class="s2">在涉及到多表查询SQL语句的编写过程中，为了避免字段冲突的问题
</span><span class="s2">我们一般都会加上表名来做明确的区分，否则可能会报错
</span><span class="s2">  
</span><span class="s2">&gt;&gt;&gt; 连表操作
</span><span class="s2">inner join
</span><span class="s2">  将两张表都有对应关系的数据按照指定的条件拼接到一起
</span><span class="s2">  select * from emp inner join dep on emp.dep_id = dep.id;
</span><span class="s2">    
</span><span class="s2">left join
</span><span class="s2">  以关键字left join左边的表为基准，展示左表所有的记录，没有的null填充
</span><span class="s2">  select * from emp left join dep on emp.dep_id = dep.id;
</span><span class="s2">  
</span><span class="s2">right join
</span><span class="s2">  以关键字right join右边的表为基准，展示右表所有的记录，没有的null填充
</span><span class="s2">  select * from emp right join dep on emp.dep_id = dep.id;
</span><span class="s2">  
</span><span class="s2">union
</span><span class="s2">  两张表所有的技术全部展示出来，各自没有对应的全部用null填充
</span><span class="s2">  select * from emp left join dep on emp.dep_id = dep.id
</span><span class="s2">  union
</span><span class="s2">  select * from emp right join dep on emp.dep_id = dep.id;&#34;&#34;&#34;</span>
</code></pre></div></li>
<li>
<p>子查询</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;将一张表的查询结果用括号括起来当做另外一条sql语句的查询条件，子查询其实就是我们实际生活中常见的解决问题的思路:分步操作
</span><span class="s2">eg:
</span><span class="s2">  select * from dep where dep.id = (
</span><span class="s2">      select emp.dep_id from emp where emp.name = &#39;jason&#39;
</span><span class="s2">  );&#34;&#34;&#34;</span>
</code></pre></div></li>
<li>
<p>多表查询总结</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;有时候在查询一些比较复杂的问题，可能需要将连表操作和子查询结合使用&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>多表查询练习题</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;在书写较为复杂的sql语句的时候不要想着一步到位
</span><span class="s1">  
</span><span class="s1">在书写sql的时候针对关键字select后面写什么，我们一般都是先用*号占位，最后再回来修改*对应的具体内容
</span><span class="s1">  
</span><span class="s1">不要上来就写sql语句，可以先用中文将大致思路先写出来
</span><span class="s1">  
</span><span class="s1"> 9、查询挂科超过两门(包括两门)的学生姓名和班级
</span><span class="s1">&gt;&gt;&gt; 1.先明确学生成绩在哪张表
</span><span class="s1">-- 	select * from score;
</span><span class="s1">&gt;&gt;&gt; 2.先筛选出所有分数小于60分的数据
</span><span class="s1">-- select * from score where score.num &lt; 60;
</span><span class="s1">&gt;&gt;&gt; 3.按照学生分组统计每个学生挂科的数量 筛选出超过两门(包括两门)
</span><span class="s1">-- select score.student_id from score where score.num &lt; 60 
</span><span class="s1">-- 	GROUP BY score.student_id
</span><span class="s1">-- 	HAVING COUNT(score.num) &gt;= 2;
</span><span class="s1">&gt;&gt;&gt; 4.确认姓名和班级不属于一张表 所以先将学生和班级表凭借起来
</span><span class="s1">-- select * from student INNER JOIN class on student.class_id = class.cid;
</span><span class="s1">&gt;&gt;&gt; 5.根据我们获取到的学生id号去拼接之后的表中筛选出我们需要的数据
</span><span class="s1">SELECT
</span><span class="s1">  student.sname,
</span><span class="s1">  class.caption 
</span><span class="s1">FROM
</span><span class="s1">  student
</span><span class="s1">  INNER JOIN class ON student.class_id = class.cid 
</span><span class="s1">WHERE
</span><span class="s1">  student.sid IN ( 
</span><span class="s1">      SELECT score.student_id 
</span><span class="s1">      FROM score 
</span><span class="s1">      WHERE score.num &lt; 60 
</span><span class="s1">      GROUP BY score.student_id 
</span><span class="s1">      HAVING COUNT( score.num ) &gt;= 2 );&#39;&#39;&#39;</span>
</code></pre></div></li>
</ul>
<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>python如何链接MySQL并操作</li>
<li>SQL注入问题及解决方案</li>
<li>尝试着书写注册登录功能(以MySQL作为数据库不再以文件)</li>
<li>视图</li>
<li>触发器</li>
<li>存储过程</li>
<li>事务(重要)</li>
<li>流程控制</li>
<li>索引(概念)</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h3 id="python如何链接mysql并操作">python如何链接MySQL并操作</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;我们在使用python的时候，一定要知道这个家伙背后有很多很多功能模块
</span><span class="s2">几乎能够涵盖你所有的业务需求，你只需要找到对应的模块并学习使用即可
</span><span class="s2">最多是站在巨人的肩膀上稍微修改修改即可
</span><span class="s2">
</span><span class="s2">如果我们想用python来充当mysql的客户端需要下载一个第三方模块
</span><span class="s2">
</span><span class="s2">下载
</span><span class="s2">pip3 install pymysql
</span><span class="s2">
</span><span class="s2">基本使用
</span><span class="s2">
</span><span class="s2">***********************************
</span><span class="s2">在给py文件起名字的时候一定不要跟模块名冲突
</span><span class="s2">***********************************
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">&gt;&gt;&gt; coding:utf8
</span><span class="s2">&gt;&gt;&gt; author:jason
</span><span class="s2">
</span><span class="s2">import pymysql
</span><span class="s2">
</span><span class="s2">&gt;&gt;&gt; 1.创建链接对象
</span><span class="s2">conn = pymysql.connect(
</span><span class="s2">    &gt;&gt;&gt; 数据库的ip地址
</span><span class="s2">    host=&#39;127.0.0.1&#39;,
</span><span class="s2">    &gt;&gt;&gt; 数据库的port号
</span><span class="s2">    port=3306,  &gt;&gt;&gt; MySQL默认的端口号就是3306
</span><span class="s2">    &gt;&gt;&gt; 用户名
</span><span class="s2">    user=&#39;root&#39;,
</span><span class="s2">    &gt;&gt;&gt; 密码
</span><span class="s2">    password=&#39;admin123&#39;,
</span><span class="s2">    &gt;&gt;&gt; 一定要指定你要操作哪个库
</span><span class="s2">    database=&#39;s3_02&#39;,
</span><span class="s2">    &gt;&gt;&gt; 字符编码
</span><span class="s2">    charset=&#39;utf8&#39;  &gt;&gt;&gt; 这里的编码不要加横杠utf-8
</span><span class="s2">)
</span><span class="s2">&gt;&gt;&gt; 2.生成游标对象(类似于终端里面的光标 等待你输入sql)
</span><span class="s2">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)
</span><span class="s2">&gt;&gt;&gt; 3.自己编写sql语句借助于模块发送给服务端
</span><span class="s2">sql = &#39;select * from course;&#39;
</span><span class="s2">&gt;&gt;&gt; 4.将sql语句发送给服务端执行
</span><span class="s2">affect_rows = cursor.execute(sql)  &gt;&gt;&gt; 返回值是执行该sql所影响的数据行数
</span><span class="s2">&gt;&gt;&gt; 5.获取sql语句的查询结果
</span><span class="s2">res = cursor.fetchall()
</span><span class="s2">print(res)
</span><span class="s2">&gt;&gt;&gt; 数据描述不够明确((1, &#39;生物&#39;, 1), (2, &#39;物理&#39;, 2), (3, &#39;体育&#39;, 3), (4, &#39;美术&#39;, 2))
</span><span class="s2">&gt;&gt;&gt; 如果能够组织成字典的形式返回就完美了  只需要加一个配置即可cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)
</span><span class="s2">&gt;&gt;&gt; [{&#39;cid&#39;: 1, &#39;cname&#39;: &#39;生物&#39;, &#39;teacher_id&#39;: 1}, 
</span><span class="s2">&gt;&gt;&gt; {&#39;cid&#39;: 2, &#39;cname&#39;: &#39;物理&#39;, &#39;teacher_id&#39;: 2}, 
</span><span class="s2">&gt;&gt;&gt; {&#39;cid&#39;: 3, &#39;cname&#39;: &#39;体育&#39;, &#39;teacher_id&#39;: 3}, 
</span><span class="s2">&gt;&gt;&gt; {&#39;cid&#39;: 4, &#39;cname&#39;: &#39;美术&#39;, &#39;teacher_id&#39;: 2}]&#34;&#34;&#34;</span>
</code></pre></div><h3 id="sql注入">SQL注入</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">&gt;&gt;&gt; coding:utf8
</span><span class="s1">&gt;&gt;&gt; author:jason
</span><span class="s1">
</span><span class="s1">import pymysql
</span><span class="s1">
</span><span class="s1">&gt;&gt;&gt; 1.创建链接对象
</span><span class="s1">conn = pymysql.connect(
</span><span class="s1">    &gt;&gt;&gt; 数据库的ip地址
</span><span class="s1">    host=&#39;127.0.0.1&#39;,
</span><span class="s1">    &gt;&gt;&gt; 数据库的port号
</span><span class="s1">    port=3306,  &gt;&gt;&gt; MySQL默认的端口号就是3306
</span><span class="s1">    &gt;&gt;&gt; 用户名
</span><span class="s1">    user=&#39;root&#39;,
</span><span class="s1">    &gt;&gt;&gt; 密码
</span><span class="s1">    password=&#39;admin123&#39;,
</span><span class="s1">    &gt;&gt;&gt; 一定要指定你要操作哪个库
</span><span class="s1">    database=&#39;s3_03&#39;,
</span><span class="s1">    &gt;&gt;&gt; 字符编码
</span><span class="s1">    charset=&#39;utf8&#39;  &gt;&gt;&gt; 这里的编码不要加横杠utf-8
</span><span class="s1">)
</span><span class="s1">&gt;&gt;&gt; 2.生成游标对象(类似于终端里面的光标 等待你输入sql)
</span><span class="s1">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)
</span><span class="s1">
</span><span class="s1">&gt;&gt;&gt; 结合MySQL实现用户的登录功能
</span><span class="s1">&gt;&gt;&gt; 3.先获取用户的用户名和密码
</span><span class="s1">name = input(&#39;name&gt;&gt;&gt;:&#39;)
</span><span class="s1">password = input(&#39;password&gt;&gt;&gt;:&#39;)
</span><span class="s1">&gt;&gt;&gt; 4.拼接SQL语句并发送给服务端执行
</span><span class="s1">sql = &#34;select * from userinfo where name=&#39;</span><span class="si">%s</span><span class="s1">&#39; and password=&#39;</span><span class="si">%s</span><span class="s1">&#39;;&#34;%(name,password)
</span><span class="s1">print(sql)
</span><span class="s1">cursor.execute(sql)
</span><span class="s1">&gt;&gt;&gt; 5.判断结果展示相应提示信息
</span><span class="s1">res = cursor.fetchall()
</span><span class="s1">print(res)
</span><span class="s1">if res:
</span><span class="s1">    print(&#39;登录成功&#39;)
</span><span class="s1">else:
</span><span class="s1">    print(&#39;用户名或密码错误&#39;)
</span><span class="s1">
</span><span class="s1">神奇的现象1:
</span><span class="s1">    只需要知道用户名就可以直接登录
</span><span class="s1">    利用了MySQL的注释
</span><span class="s1">    select * from userinfo where name=&#39;jason&#39; -- asjdklaj&#39; and password=&#39;&#39;;
</span><span class="s1">神奇的现象2:
</span><span class="s1">    select * from userinfo where name=&#39;xxx&#39; or 1=1 -- hasdjalsdj&#39; and password=&#39;&#39;;
</span><span class="s1">    利用了MySQL的注释和逻辑运算
</span><span class="s1">    不需要用户名和密码居然也能通过校验
</span><span class="s1">    
</span><span class="s1">总结:这种现象就叫做SQL注入
</span><span class="s1">    就是利用一些特殊符号的组合达到特殊含义情况下混淆正常的语句执行
</span><span class="s1">
</span><span class="s1">在我们的实际生活中其实处处都在解决SQL注入的问题
</span><span class="s1">比如当你在注册一个账号的时候经常会被提示不能使用特殊符号
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h3 id="注册功能">注册功能</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;&gt;&gt;&gt; coding:utf8
</span><span class="s1">&gt;&gt;&gt; author:jason
</span><span class="s1">
</span><span class="s1">import pymysql
</span><span class="s1">
</span><span class="s1">&gt;&gt;&gt; 1.创建链接对象
</span><span class="s1">conn = pymysql.connect(
</span><span class="s1">    &gt;&gt;&gt; 数据库的ip地址
</span><span class="s1">    host=&#39;127.0.0.1&#39;,
</span><span class="s1">    &gt;&gt;&gt; 数据库的port号
</span><span class="s1">    port=3306,  &gt;&gt;&gt; MySQL默认的端口号就是3306
</span><span class="s1">    &gt;&gt;&gt; 用户名
</span><span class="s1">    user=&#39;root&#39;,
</span><span class="s1">    &gt;&gt;&gt; 密码
</span><span class="s1">    password=&#39;admin123&#39;,
</span><span class="s1">    &gt;&gt;&gt; 一定要指定你要操作哪个库
</span><span class="s1">    database=&#39;s3_03&#39;,
</span><span class="s1">    &gt;&gt;&gt; 字符编码
</span><span class="s1">    charset=&#39;utf8&#39;  &gt;&gt;&gt; 这里的编码不要加横杠utf-8
</span><span class="s1">)
</span><span class="s1">&gt;&gt;&gt; 2.生成游标对象(类似于终端里面的光标 等待你输入sql)
</span><span class="s1">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)
</span><span class="s1">
</span><span class="s1">&gt;&gt;&gt; 3.获取用户的用户名和密码
</span><span class="s1">username = input(&#39;username&gt;&gt;&gt;:&#39;).strip()
</span><span class="s1">password = input(&#39;password&gt;&gt;&gt;:&#39;).strip()
</span><span class="s1">
</span><span class="s1">&gt;&gt;&gt; 4.校验当前用户名是否已存在
</span><span class="s1">sql = &#39;select * from userinfo where name=</span><span class="si">%s</span><span class="s1">&#39;
</span><span class="s1">cursor.execute(sql,username)
</span><span class="s1">res = cursor.fetchall()
</span><span class="s1">if not res:
</span><span class="s1">    &gt;&gt;&gt; 5.写入数据库
</span><span class="s1">    sql = &#39;insert into userinfo(name,password) values(</span><span class="si">%s</span><span class="s1">,</span><span class="si">%s</span><span class="s1">)&#39;
</span><span class="s1">    cursor.execute(sql,(username,password))
</span><span class="s1">    conn.commit()  &gt;&gt;&gt; 确认此次操作可执行
</span><span class="s1">    print(&#39;注册成功&#39;)
</span><span class="s1">else:
</span><span class="s1">    print(&#39;用户名已存在&#39;)
</span><span class="s1">&#39;&#39;&#39;</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">当你对数据库进行 新增 编辑 删除操作的时候都需要二次确认
</span><span class="s2">只有查询操作可以直接执行
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h3 id="pymysql方法补充">pymysql方法补充</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">&gt;&gt;&gt; 由于针对表的 插入数据 编辑数据 删除数据每次都需要确认操作，代码书写太过繁琐
</span><span class="s1">&gt;&gt;&gt; 1.创建链接对象
</span><span class="s1">conn = pymysql.connect(
</span><span class="s1">    ...
</span><span class="s1">    &gt;&gt;&gt; 自动确认
</span><span class="s1">    autocommit=True
</span><span class="s1">)
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">&#34;&#34;&#34;
</span><span class="s1">针对获取sql语句查询的结果三个方法 其实内部都有一个类似于指针的概念
</span><span class="s1">我们也可以控制指针的移动
</span><span class="s1">&#34;&#34;&#34;
</span><span class="s1">res = cursor.fetchall()  &gt;&gt;&gt; [{&#39;id&#39;: 1, &#39;name&#39;: &#39;jasonNB&#39;, &#39;password&#39;: &#39;123&#39;}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;tony&#39;, &#39;password&#39;: &#39;123&#39;}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;kevin&#39;, &#39;password&#39;: &#39;123&#39;}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;tom&#39;, &#39;password&#39;: &#39;123&#39;}]
</span><span class="s1">print(res)
</span><span class="s1">&gt;&gt;&gt; cursor.scroll(-2,&#39;relative&#39;)  &gt;&gt;&gt; 相对于指针当前位置 前后移动 正数就是往右 负数就是往左
</span><span class="s1">cursor.scroll(1,&#39;absolute&#39;)  &gt;&gt;&gt; 相对于数据开头 前后移动 正数就是往右 负数就是往左
</span><span class="s1">res = cursor.fetchall() 
</span><span class="s1">print(res)  &gt;&gt;&gt; [{&#39;id&#39;: 3, &#39;name&#39;: &#39;kevin&#39;, &#39;password&#39;: &#39;123&#39;}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;tom&#39;, &#39;password&#39;: &#39;123&#39;}]
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">一次性插入多条数据可以使用
</span><span class="s1">sql = &#39;insert into userinfo(name,password) values(</span><span class="si">%s</span><span class="s1">,</span><span class="si">%s</span><span class="s1">)&#39;
</span><span class="s1">user_list = [(&#39;egon&#39;,&#39;123&#39;),(&#39;oscar&#39;,&#39;123&#39;),(&#39;owen&#39;,&#39;123&#39;),(&#39;jerry&#39;,&#39;123&#39;)]
</span><span class="s1">cursor.executemany(sql,user_list)
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h3 id="视图">视图</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">我们之前已经学过了一张表的查询结果可以看成是存在内存中的虚拟表
</span><span class="s1">那么视图的意思就是将该虚拟表存储起来方便以后使用
</span><span class="s1">
</span><span class="s1">create view student2class as
</span><span class="s1">(select * from student inner join class on student.class_id = class.cid);
</span><span class="s1">
</span><span class="s1">创建出来的视图表是没有键，只有数据，视图使用的频率不高，我们只需要了解即可&#39;&#39;&#39;</span>
</code></pre></div><h3 id="触发器">触发器</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;在满足对某张表数据的增、删、改的情况下，自动触发的功能称之为触发器
</span><span class="s1">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 为何要用触发器
</span><span class="s1">    触发器专门针对我们对某一张表数据增insert、删delete、改update的行为，这类行为一旦执行
</span><span class="s1">    就会触发触发器的执行，即自动运行另外一段sql代码
</span><span class="s1">
</span><span class="s1">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 创建触发器语法
</span><span class="s1">create trigger 触发器的名字 before/after insert/update/delete on 表名 for each row
</span><span class="s1">begin
</span><span class="s1">	sql语句  &gt;&gt;&gt; 触发器触发之后自动执行sql语句
</span><span class="s1">end
</span><span class="s1">&#34;&#34;&#34;
</span><span class="s1">触发器总共有六种情况可以触发
</span><span class="s1">	1.在对表数据进行新增之前
</span><span class="s1">	2.在对表数据进行新增之后
</span><span class="s1">	3.在对表数据进行修改之前
</span><span class="s1">	4.在对表数据进行修改之后
</span><span class="s1">	5.在对表数据进行删除之前
</span><span class="s1">	6.在对表数据进行删除之后
</span><span class="s1">&#34;&#34;&#34;
</span><span class="s1">
</span><span class="s1">&gt;&gt;&gt; 案例
</span><span class="s1">CREATE TABLE cmd (
</span><span class="s1">    id INT PRIMARY KEY auto_increment,
</span><span class="s1">    USER CHAR (32),
</span><span class="s1">    priv CHAR (10),
</span><span class="s1">    cmd CHAR (64),
</span><span class="s1">    sub_time datetime, &gt;&gt;&gt;提交时间
</span><span class="s1">    success enum (&#39;yes&#39;, &#39;no&#39;) &gt;&gt;&gt;0代表执行失败
</span><span class="s1">);
</span><span class="s1">
</span><span class="s1">CREATE TABLE errlog (
</span><span class="s1">    id INT PRIMARY KEY auto_increment,
</span><span class="s1">    err_cmd CHAR (64),
</span><span class="s1">    err_time datetime
</span><span class="s1">);
</span><span class="s1">
</span><span class="s1">delimiter $$  &gt;&gt;&gt; 将mysql默认的结束符由;换成$$
</span><span class="s1">create trigger tri_after_insert_cmd after insert on cmd for each row
</span><span class="s1">begin
</span><span class="s1">    if NEW.success = &#39;no&#39; then  &gt;&gt;&gt; 新记录都会被MySQL封装成NEW对象
</span><span class="s1">        insert into errlog(err_cmd,err_time) values(NEW.cmd,NEW.sub_time);
</span><span class="s1">    end if;
</span><span class="s1">end $$
</span><span class="s1">delimiter ;  &gt;&gt;&gt; 结束之后记得再改回来，不然后面结束符就都是$$了
</span><span class="s1">
</span><span class="s1">&gt;&gt;&gt;往表cmd中插入记录，触发触发器，根据IF的条件决定是否插入错误日志
</span><span class="s1">INSERT INTO cmd (
</span><span class="s1">    USER,
</span><span class="s1">    priv,
</span><span class="s1">    cmd,
</span><span class="s1">    sub_time,
</span><span class="s1">    success
</span><span class="s1">)
</span><span class="s1">VALUES
</span><span class="s1">    (&#39;egon&#39;,&#39;0755&#39;,&#39;ls -l /etc&#39;,NOW(),&#39;yes&#39;),
</span><span class="s1">    (&#39;egon&#39;,&#39;0755&#39;,&#39;cat /etc/passwd&#39;,NOW(),&#39;no&#39;),
</span><span class="s1">    (&#39;egon&#39;,&#39;0755&#39;,&#39;useradd xxx&#39;,NOW(),&#39;no&#39;),
</span><span class="s1">    (&#39;egon&#39;,&#39;0755&#39;,&#39;ps aux&#39;,NOW(),&#39;yes&#39;);
</span><span class="s1">
</span><span class="s1">&gt;&gt;&gt; 查询errlog表记录
</span><span class="s1">select * from errlog;
</span><span class="s1">&gt;&gt;&gt; 查看触发器
</span><span class="s1">show triggers;
</span><span class="s1">&gt;&gt;&gt; 删除触发器
</span><span class="s1">drop trigger tri_after_insert_cmd;&#39;&#39;&#39;</span>
</code></pre></div><h3 id="sql语句结束符补充">SQL语句结束符补充</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;我们都知道sql语句的结束符是分号，但是我们有时候需要修改sql语句的结束符
</span><span class="s1">默认情况下
</span><span class="s1">	;
</span><span class="s1">也可以修改
</span><span class="s1">	delimiter $$  &gt;&gt;&gt; 将sql语句的结束符修改为$$  只在当前窗口临时生效&#39;&#39;&#39;</span>
</code></pre></div><h3 id="事务重要">事务(重要)</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;事务有四大特性(ACID)
</span><span class="s1">	A原子性:一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做
</span><span class="s1">  C一致性:事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的
</span><span class="s1">  I隔离性:一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰
</span><span class="s1">  D持久性:持久性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响
</span><span class="s1">    
</span><span class="s1">案例:
</span><span class="s1">  jason需要给egon还钱，但是jason用的交通银行卡，旁边有一台招商银行的ATM，egon用的是中国银行卡
</span><span class="s1">  现在jason需要用招商银行的ATM扣交通银行的钱还给中国银行卡
</span><span class="s1">  	1.招商银行ATM机器给交通银行发送请求扣除jason账户的钱
</span><span class="s1">    2.中国银行发送请求增加egon账户的钱
</span><span class="s1">特殊情况:
</span><span class="s1">  	当刚好把jason的钱扣了，突然断网了服务器奔溃了总之就是给中国银行发送的请求丢失了，导致jason钱没了，egon没收到钱
</span><span class="s1"> 
</span><span class="s1">基于上述问题，为了保证数据操作过程中的安全性，我们引入了事务的概念
</span><span class="s1">	将扣钱和加钱操作放入一个事务中，两者要么都成功要么一个都别成功
</span><span class="s1">  即不成功的情况下全部回退到执行操作之前的状态
</span><span class="s1">  
</span><span class="s1">事务的使用
</span><span class="s1">start transaction
</span><span class="s1">sql语句  &gt;&gt;&gt; 这些sql语句就属于同一个事务
</span><span class="s1">&gt;&gt;&gt; 如果不成功或者想回退
</span><span class="s1">rollback;  &gt;&gt;&gt; 回退到执行事务之前的状态
</span><span class="s1">&gt;&gt;&gt; 如果事务执行完没有任何问题 需要确认成功
</span><span class="s1">commit;  &gt;&gt;&gt; commit确认之后就无法回退了&#39;&#39;&#39;</span>
</code></pre></div><h3 id="存储过程">存储过程</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;MySQL中的存储过程类似于我们python里面学习的自定义函数
</span><span class="s1">
</span><span class="s1">语法结构
</span><span class="s1">&gt;&gt;&gt; 定义
</span><span class="s1">delimiter $$
</span><span class="s1">create procedure p1()
</span><span class="s1">begin
</span><span class="s1">	select * from dep;
</span><span class="s1">end $$
</span><span class="s1">delimiter ;
</span><span class="s1">
</span><span class="s1">&gt;&gt;&gt; 调用
</span><span class="s1">call p1()
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">&gt;&gt;&gt; 简单使用(无参函数)
</span><span class="s1">delimiter $$
</span><span class="s1">create procedure p1()
</span><span class="s1">begin
</span><span class="s1">	select * from user;
</span><span class="s1">end $$
</span><span class="s1">delimiter ;
</span><span class="s1">
</span><span class="s1">&gt;&gt;&gt; 复杂使用(有参函数)
</span><span class="s1">delimiter $$
</span><span class="s1">create procedure p2(
</span><span class="s1">    in m int,  &gt;&gt;&gt; in表示这个参数必须只能是传入不能被返回出去
</span><span class="s1">    in n int,  
</span><span class="s1">    out res int  &gt;&gt;&gt; out表示这个参数可以被返回出去，还有一个inout表示即可以传入也可以被返回出去
</span><span class="s1">)
</span><span class="s1">begin
</span><span class="s1">    select * from user where id &gt; m and id &lt; n;
</span><span class="s1">    set res=0;  &gt;&gt;&gt; 用来标志存储过程是否执行
</span><span class="s1">end $$
</span><span class="s1">delimiter ;
</span><span class="s1">
</span><span class="s1">定义一个变量
</span><span class="s1">set @res=10
</span><span class="s1">查看变量对应的值
</span><span class="s1">select @res;
</span><span class="s1">调用存储过程
</span><span class="s1">call p1(0,3,@res)&#39;&#39;&#39;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>MySQL之多表查询、连接表、子查询、Nevicat</title>
			<link>https://Eddy-622.github.io/posts/mysql%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%AD%90%E6%9F%A5%E8%AF%A2%E8%BF%9E%E6%8E%A5%E8%A1%A8/</link>
			<pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/mysql%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%AD%90%E6%9F%A5%E8%AF%A2%E8%BF%9E%E6%8E%A5%E8%A1%A8/</guid>
			<description>今日内容概要   多表操作的两大方法
  Navicat软件的使用
能够让你通过鼠标点点点的操作，来完成对数据库的增删改查
  多表查询练习题(课上一起写五道练习题)
  python如何操作MySQL
  今日内容详细 多表操作的两大方法 &amp;#34;&amp;#34;&amp;#34;我们需要的数据可能来自于多张表 数据准备 &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;建表 create table dep( id int primary key auto_increment, name varchar(20) ); create table emp( id int primary key auto_increment, name varchar(20), sex enum(&amp;#39;male&amp;#39;,&amp;#39;female&amp;#39;) not null default &amp;#39;male&amp;#39;, age int, dep_id int ); &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;插入数据 insert into dep values (200,&amp;#39;技术&amp;#39;), (201,&amp;#39;人力资源&amp;#39;), (202,&amp;#39;销售&amp;#39;), (203,&amp;#39;运营&amp;#39;), (205,&amp;#39;财务&amp;#39;) ; insert into emp(name,sex,age,dep_id) values (&amp;#39;jason&amp;#39;,&amp;#39;male&amp;#39;,18,200), (&amp;#39;egon&amp;#39;,&amp;#39;female&amp;#39;,48,201), (&amp;#39;kevin&amp;#39;,&amp;#39;male&amp;#39;,18,201), (&amp;#39;nick&amp;#39;,&amp;#39;male&amp;#39;,28,202), (&amp;#39;owen&amp;#39;,&amp;#39;male&amp;#39;,18,203), (&amp;#39;jerry&amp;#39;,&amp;#39;female&amp;#39;,18,204);&amp;#34;&amp;#34;&amp;#34; 连接表的概念 &amp;#34;&amp;#34;&amp;#34;select * from dep,emp; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 结果是一个笛卡尔积(了解) &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 我们要的不是全部对应一遍，而是按照相同的条件做对应关系 select * from dep,emp where dep.</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>
<p>多表操作的两大方法</p>
</li>
<li>
<p>Navicat软件的使用</p>
<p>能够让你通过鼠标点点点的操作，来完成对数据库的增删改查</p>
</li>
<li>
<p>多表查询练习题(课上一起写五道练习题)</p>
</li>
<li>
<p>python如何操作MySQL</p>
</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h3 id="多表操作的两大方法">多表操作的两大方法</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;我们需要的数据可能来自于多张表
</span><span class="s2">
</span><span class="s2">数据准备
</span><span class="s2">&gt;&gt;&gt;&gt;&gt;建表
</span><span class="s2">create table dep(
</span><span class="s2">id int primary key auto_increment,
</span><span class="s2">name varchar(20) 
</span><span class="s2">);
</span><span class="s2">
</span><span class="s2">create table emp(
</span><span class="s2">id int primary key auto_increment,
</span><span class="s2">name varchar(20),
</span><span class="s2">sex enum(&#39;male&#39;,&#39;female&#39;) not null default &#39;male&#39;,
</span><span class="s2">age int,
</span><span class="s2">dep_id int
</span><span class="s2">);
</span><span class="s2">
</span><span class="s2">&gt;&gt;&gt;&gt;&gt;插入数据
</span><span class="s2">insert into dep values
</span><span class="s2">(200,&#39;技术&#39;),
</span><span class="s2">(201,&#39;人力资源&#39;),
</span><span class="s2">(202,&#39;销售&#39;),
</span><span class="s2">(203,&#39;运营&#39;),
</span><span class="s2">(205,&#39;财务&#39;)
</span><span class="s2">;
</span><span class="s2">
</span><span class="s2">insert into emp(name,sex,age,dep_id) values
</span><span class="s2">(&#39;jason&#39;,&#39;male&#39;,18,200),
</span><span class="s2">(&#39;egon&#39;,&#39;female&#39;,48,201),
</span><span class="s2">(&#39;kevin&#39;,&#39;male&#39;,18,201),
</span><span class="s2">(&#39;nick&#39;,&#39;male&#39;,28,202),
</span><span class="s2">(&#39;owen&#39;,&#39;male&#39;,18,203),
</span><span class="s2">(&#39;jerry&#39;,&#39;female&#39;,18,204);&#34;&#34;&#34;</span>

</code></pre></div><h3 id="连接表的概念">连接表的概念</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;select * from dep,emp;
</span><span class="s2">&gt;&gt;&gt;&gt;&gt; 结果是一个笛卡尔积(了解)
</span><span class="s2">
</span><span class="s2">&gt;&gt;&gt;&gt;&gt; 我们要的不是全部对应一遍，而是按照相同的条件做对应关系
</span><span class="s2">select * from dep,emp where dep.id = emp.dep_id;
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">设计到多表操作的情况，非常容易出现两张表字段相同的情况
</span><span class="s2">这个时候我们都会习惯性的在字段前面加上该字段所载的表名
</span><span class="s2">来明确到底是哪张表的哪个字段
</span><span class="s2">
</span><span class="s2">select emp.name,dep.name from emp,dep where dep.id = emp.dep_id;
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h3 id="多表查询方式1连接表">多表查询方式1:连接表</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;内连接
</span><span class="s2">	inner join
</span><span class="s2">	select * from emp inner join dep on dep.id = emp.dep_id;
</span><span class="s2">
</span><span class="s2">  inner join是连接表的关键字
</span><span class="s2">  on后面跟的是连接表的连接条件
</span><span class="s2">  
</span><span class="s2">  inner join只会连接两张表都有的数据，两张表中没有对应关系的数据都会被直接剔除
</span><span class="s2">
</span><span class="s2">  
</span><span class="s2">  
</span><span class="s2">左连接
</span><span class="s2">	left join
</span><span class="s2">	select * from emp left join dep on dep.id = emp.dep_id;
</span><span class="s2">
</span><span class="s2">  以left join左边的表为基准，保留左边表中所有的数据
</span><span class="s2">  如果没有对应项，则直接使用null填充
</span><span class="s2">
</span><span class="s2">  
</span><span class="s2">右连接
</span><span class="s2">	right join
</span><span class="s2">  select * from emp right join dep on dep.id = emp.dep_id;
</span><span class="s2">
</span><span class="s2">	以right join右边的表为基准，保留右边表中所有的数据
</span><span class="s2">  如果没有对应项，则直接使用null填充
</span><span class="s2">
</span><span class="s2">  
</span><span class="s2">全连接(了解)
</span><span class="s2">	union
</span><span class="s2">  select * from emp left join dep on dep.id = emp.dep_id
</span><span class="s2">  union
</span><span class="s2">  select * from emp right join dep on dep.id = emp.dep_id;
</span><span class="s2">  
</span><span class="s2">总结:
</span><span class="s2">  学习完上述方法之后，其实我们就已经掌握了连接N多张表的方法
</span><span class="s2">  先连接两张表然后将两张表的结果当做一张表再去连接其他表，依次往复其实我们就可以连接N多张表&#34;&#34;&#34;</span>
</code></pre></div><h3 id="多表查询方式2子查询">多表查询方式2:子查询</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">子查询其实就是我们日常生活中解决问题的最基本的方法即:分步操作
</span><span class="s2">在MySQL中子查询的定义:将一张表的查询结果当做另外一条SQL语句的查询条件
</span><span class="s2">
</span><span class="s2">比如:我们想查员工jason所在的部门名称
</span><span class="s2">	1.先去员工表中查询出jason对应的部门id
</span><span class="s2">	2.拿着部门id去部门表中查询部门名称
</span><span class="s2">&#34;&#34;&#34;</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">select emp.dep_id from emp where emp.name=&#39;jason&#39;;
</span><span class="s2">select dep.name from dep where dep.id = 200;
</span><span class="s2">
</span><span class="s2">&gt;&gt;&gt;&gt;&gt; 一旦一条sql语句需要被当做条件那么只需要在该sql语句前后加上括号即可
</span><span class="s2">select dep.name from dep 
</span><span class="s2">					where dep.id = (select emp.dep_id from emp where emp.name=&#39;jason&#39;);
</span><span class="s2">&#39;&#39;&#39;
</span><span class="s2">当子查询的条件是多个的情况下上述的等号我们习惯用in来代替即可
</span><span class="s2">&#39;&#39;&#39;
</span><span class="s2">
</span><span class="s2">&gt;&gt;&gt;&gt;&gt; 2.每个部门最新入职的员工(依据昨天的员工表18条数据的) 了解
</span><span class="s2">&gt;&gt;&gt;&gt;&gt; 思路：先查每个部门最新入职的员工，再按部门对应上联表查询
</span><span class="s2">select t1.id,t1.name,t1.hire_date,t1.post,t2.* from emp as t1
</span><span class="s2">inner join
</span><span class="s2">(select post,max(hire_date) as max_date from emp group by post) as t2
</span><span class="s2">on t1.post = t2.post
</span><span class="s2">where t1.hire_date = t2.max_date
</span><span class="s2">;&#34;&#34;&#34;</span>
</code></pre></div><h3 id="总结">总结</h3>
<pre><code class="language-PYTHO" data-lang="PYTHO">'''设计到多表查询，往往可能都要连接表操作和子查询配合使用'''
</code></pre><h3 id="补充">补充</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">group_concat
</span><span class="s1">	select group_concat(name,&#34;:&#34;,age) from emp group by id;
</span><span class="s1">concat
</span><span class="s1">	select concat(name,&#39;:&#39;,sex,&#39;:&#39;,age,&#39;:&#39;,dep_id) from emp;
</span><span class="s1">concat_ws
</span><span class="s1">	当连接多个字段信息的连接符一致的时候，我们可以使用concat_ws节省书写量
</span><span class="s1">  select concat_ws(&#39;:&#39;,name,sex,age,dep_id) from emp;
</span><span class="s1">  
</span><span class="s1">&gt;&gt;&gt;&gt;&gt;exists(了解)
</span><span class="s1">EXISTS关字键字表示存在。在使用EXISTS关键字时，内层查询语句不返回查询的记录，
</span><span class="s1">而是返回一个真假值，True或False。
</span><span class="s1">当返回True时，外层查询语句将进行查询
</span><span class="s1">当返回值为False时，外层查询语句不进行查询。
</span><span class="s1">select * from emp
</span><span class="s1">    where exists
</span><span class="s1">    (select id from dep where id &gt; 3);
</span><span class="s1">
</span><span class="s1">select * from emp
</span><span class="s1">    where exists
</span><span class="s1">    (select id from dep where id &gt; 250);&#39;&#39;&#39;</span>
</code></pre></div><h3 id="navicat使用">Navicat使用</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">可以充当很多数据库软件的客户端
</span><span class="s2">并且提供了很多简便的用于操作数据库的方法(鼠标点点点)
</span><span class="s2">
</span><span class="s2">下载与安装
</span><span class="s2">	https://www.cr173.com/soft/126934.html
</span><span class="s2">推荐参考:
</span><span class="s2">	https://www.cnblogs.com/Kathrine/p/12844846.html
</span><span class="s2">    
</span><span class="s2">直接点击next安装即可，无需额外的设置
</span><span class="s2">
</span><span class="s2">使用特点
</span><span class="s2">	讲很多sql语句的操作给你封装成了点点点的操作
</span><span class="s2">  但是你需要知道的是虽然你用的是点点点，但是软件内部其实是自动帮你书写了对应的sql语句发送给了服务端执行
</span><span class="s2">  
</span><span class="s2">*********************************************************
</span><span class="s2">在使用该软件的时候我们除了可以鼠标点点点之外，也可以自己修改sql语句
</span><span class="s2">*********************************************************
</span><span class="s2">
</span><span class="s2">*********************************************************
</span><span class="s2">MySQL中的注释
</span><span class="s2">第一种
</span><span class="s2">	&gt;&gt;&gt;&gt;&gt; 注释
</span><span class="s2">第二种
</span><span class="s2">	-- 注释
</span><span class="s2">**********************************************************
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h3 id="作业多表查询练习">作业：多表查询练习</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">数据准备
</span><span class="s2">  &gt;&gt;&gt;建表
</span><span class="s2">create table dep(
</span><span class="s2">id int primary key auto_increment,
</span><span class="s2">name varchar(20) 
</span><span class="s2">);
</span><span class="s2">
</span><span class="s2">create table emp(
</span><span class="s2">id int primary key auto_increment,
</span><span class="s2">name varchar(20),
</span><span class="s2">sex enum(&#39;male&#39;,&#39;female&#39;) not null default &#39;male&#39;,
</span><span class="s2">age int,
</span><span class="s2">dep_id int
</span><span class="s2">);
</span><span class="s2">
</span><span class="s2">  &gt;&gt;&gt;插入数据
</span><span class="s2">insert into dep values
</span><span class="s2">(200,&#39;技术&#39;),
</span><span class="s2">(201,&#39;人力资源&#39;),
</span><span class="s2">(202,&#39;销售&#39;),
</span><span class="s2">(203,&#39;运营&#39;),
</span><span class="s2">(205,&#39;财务&#39;)
</span><span class="s2">;
</span><span class="s2">
</span><span class="s2">insert into emp(name,sex,age,dep_id) values
</span><span class="s2">(&#39;jason&#39;,&#39;male&#39;,18,200),
</span><span class="s2">(&#39;egon&#39;,&#39;female&#39;,48,201),
</span><span class="s2">(&#39;kevin&#39;,&#39;male&#39;,18,201),
</span><span class="s2">(&#39;nick&#39;,&#39;male&#39;,28,202),
</span><span class="s2">(&#39;owen&#39;,&#39;male&#39;,18,203),
</span><span class="s2">(&#39;jerry&#39;,&#39;female&#39;,18,204);
</span><span class="s2">
</span><span class="s2">    
</span><span class="s2">    1、查询所有的课程的名称以及对应的任课老师姓名
</span><span class="s2">  SELECT
</span><span class="s2">  	teacher.tname,
</span><span class="s2">  	course.cname 
</span><span class="s2">  FROM
</span><span class="s2">  	teacher
</span><span class="s2">  	INNER JOIN course ON teacher.tid = course.teacher_id;
</span><span class="s2">  SELECT
</span><span class="s2">  	teacher.tname,
</span><span class="s2">  	course.cname 
</span><span class="s2">  FROM
</span><span class="s2">  	teacher
</span><span class="s2">  	INNER JOIN course ON teacher.tid = course.teacher_id;
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">  2.查询平均成绩大于八十分的同学的姓名和平均成绩
</span><span class="s2">  先算出学生的平均成绩 选择大于80的
</span><span class="s2">  SELECT
</span><span class="s2">  	student.sname,
</span><span class="s2">  	t1.avg_num 
</span><span class="s2">  FROM
</span><span class="s2">  	student
</span><span class="s2">  	INNER JOIN (
</span><span class="s2">  SELECT
</span><span class="s2">  	student_id,
</span><span class="s2">  	avg( score.num ) AS avg_num 
</span><span class="s2">  FROM
</span><span class="s2">  	score 
</span><span class="s2">  GROUP BY
</span><span class="s2">  	score.student_id 
</span><span class="s2">  HAVING
</span><span class="s2">  	avg( score.num ) &gt; 80 
</span><span class="s2">  	) AS t1 ON student.sid = t1.student_id;
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">  3.查询没有报李平老师课的学生姓名
</span><span class="s2">  SELECT
</span><span class="s2">  	student.sname 
</span><span class="s2">  FROM
</span><span class="s2">  	student 
</span><span class="s2">  WHERE
</span><span class="s2">  	student.sid NOT IN (
</span><span class="s2">  SELECT DISTINCT
</span><span class="s2">  	score.student_id 
</span><span class="s2">  FROM
</span><span class="s2">  	score 
</span><span class="s2">  WHERE
</span><span class="s2">  	score.course_id IN (
</span><span class="s2">  SELECT
</span><span class="s2">  	t1.cid 
</span><span class="s2">  FROM
</span><span class="s2">  	( SELECT * FROM course INNER JOIN teacher ON course.teacher_id = teacher.tid ) AS t1 
</span><span class="s2">  WHERE
</span><span class="s2">  	t1.tname = &#39;李平老师&#39; 
</span><span class="s2">  	) 
</span><span class="s2">  	);
</span><span class="s2">  
</span><span class="s2">
</span><span class="s2">4、查询没有同时选修物理课程和体育课程的学生姓名
</span><span class="s2">  SELECT
</span><span class="s2">  	student.sname 
</span><span class="s2">  FROM
</span><span class="s2">  	student 
</span><span class="s2">  WHERE
</span><span class="s2">  	student.sid IN (
</span><span class="s2">  	SELECT
</span><span class="s2">  		score.student_id 
</span><span class="s2">  	FROM
</span><span class="s2">  		score 
</span><span class="s2">  	WHERE
</span><span class="s2">  		score.course_id IN ( SELECT course.cid FROM course WHERE course.cname IN ( &#39;物理&#39;, &#39;体育&#39; ) ) 
</span><span class="s2">  	GROUP BY
</span><span class="s2">  		score.student_id 
</span><span class="s2">  	HAVING
</span><span class="s2">  	count( score.course_id ) = 1 
</span><span class="s2">  	);
</span><span class="s2">
</span><span class="s2">    
</span><span class="s2">5.找出挂科两门以上的学生姓名及班级
</span><span class="s2">INNER JOIN class ON student.class_id = class.cid 
</span><span class="s2">WHERE
</span><span class="s2">	student.sid IN (
</span><span class="s2">SELECT
</span><span class="s2">	score.student_id 
</span><span class="s2">FROM
</span><span class="s2">	score 
</span><span class="s2">WHERE
</span><span class="s2">	score.num &lt;= 60 GROUP BY score.student_id HAVING count( score.student_id ) &gt;= 2 
</span><span class="s2">	);
</span><span class="s2">	
</span><span class="s2">	
</span><span class="s2">	
</span><span class="s2">基于11.11的表格
</span><span class="s2">查询平均年龄在25岁以上的部门名
</span><span class="s2">
</span><span class="s2">SELECT post FROM emp GROUP BY post HAVING avg(age)&gt;25;
</span><span class="s2">
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>MySQL之单表查询，关键字，字段修改</title>
			<link>https://Eddy-622.github.io/posts/mysql%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%85%B3%E9%94%AE%E5%AD%97%E5%AD%97%E6%AE%B5%E4%BF%AE%E6%94%B9/</link>
			<pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/mysql%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%85%B3%E9%94%AE%E5%AD%97%E5%AD%97%E6%AE%B5%E4%BF%AE%E6%94%B9/</guid>
			<description>今日内容概要   表关系判断之一对一
  修改表的SQL语句补充
  复制表(了解)
  单表查询关键字的使用
selectfrom wheregroup byhavingdistinctlimitorder byregexp  多表查询
  今日内容详细 表关系判断之一对一 1.qq用户表2.客户表和学生表有时候一张表里面的数据量太多并且有大部分数据不是经常需要使用的，这个时候我们可以基于表关系的知识将一张表拆分为两张表，然后绑定表关系以用户表和用户详情表为例1.先站在用户表的基础上问一个用户能否对应多个用户详情信息不可以2.再站在用户详情表的基础上问一个用户详情能否对应多个用户信息不可以结论:双方都不可以，那么表关系就是&amp;quot;一对一&amp;quot;或者&amp;quot;没有关系&amp;quot;针对一对一外键字段建在任何一方都可以但是建议你建在查询频率较高的表中SQL语句实现create table user(id int primary key auto_increment,name varchar(32),age int,detail_id int unqiue,foreign key(detail_id) references userDetail(id));create table userDetail(id int primary key auto_increment,addr varchar(32),phone int)表关系的总结 &amp;quot;&amp;quot;&amp;quot;我们学习了如何判断表关系以及如何建立表关系，但是在实际工作中遇到有关系的表不一定非要用外键去建立表关系因为当表特别多的时候，如果频繁的使用外键会导致表关系非常的复杂，操作起来关联性太强耦合程度太高我们可以在sql语句层面建立表与表之间的逻辑关系比如:在修改用户表的时候房屋表也要跟着改，那么我们只需要将修改用户表的sql语句和修改房屋表的sql语句放在一起执行&amp;quot;&amp;quot;&amp;quot;修改表的SQL语句补充 &amp;quot;&amp;quot;&amp;quot;1.</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>
<p>表关系判断之一对一</p>
</li>
<li>
<p>修改表的SQL语句补充</p>
</li>
<li>
<p>复制表(了解)</p>
</li>
<li>
<p>单表查询关键字的使用</p>
<div class="highlight"><pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">select</span>
<span class="k">from</span> 
<span class="k">where</span>
<span class="k">group</span> <span class="k">by</span>
<span class="k">having</span>
<span class="k">distinct</span>
<span class="k">limit</span>
<span class="k">order</span> <span class="k">by</span>
<span class="k">regexp</span>
</code></pre></div></li>
<li>
<p>多表查询</p>
</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h3 id="表关系判断之一对一">表关系判断之一对一</h3>
<pre><code>
1.qq用户表
2.客户表和学生表



有时候一张表里面的数据量太多并且有大部分数据不是经常需要使用的，这个时候我们可以基于表关系的知识将一张表拆分为两张表，然后绑定表关系

以用户表和用户详情表为例
	1.先站在用户表的基础上
    	问一个用户能否对应多个用户详情信息
        	不可以
    2.再站在用户详情表的基础上
    	问一个用户详情能否对应多个用户信息
        	不可以
结论:双方都不可以，那么表关系就是&quot;一对一&quot;或者&quot;没有关系&quot;
针对一对一
    	外键字段建在任何一方都可以但是建议你建在查询频率较高的表中
    
    
SQL语句实现
create table user(
	id int primary key auto_increment,
    name varchar(32),
    age int,
    detail_id int unqiue,
    foreign key(detail_id) references userDetail(id)
);
create table userDetail(
	id int primary key auto_increment,
    addr varchar(32),
    phone int
)
</code></pre><h3 id="表关系的总结">表关系的总结</h3>
<pre><code>&quot;&quot;&quot;
我们学习了如何判断表关系以及如何建立表关系，但是在实际工作中
遇到有关系的表不一定非要用外键去建立表关系
因为当表特别多的时候，如果频繁的使用外键会导致表关系非常的复杂，操作起来关联性太强耦合程度太高
我们可以在sql语句层面建立表与表之间的逻辑关系
	比如:在修改用户表的时候房屋表也要跟着改，那么我们只需要将
        修改用户表的sql语句和修改房屋表的sql语句放在一起执行&quot;&quot;&quot;
</code></pre><h3 id="修改表的sql语句补充">修改表的SQL语句补充</h3>
<pre><code>&quot;&quot;&quot;
1.修改表的表名
	alter table t1 rename t2;
2.修改表的字段类型
	alter table t1 modify id varchar(32);
3.修改表的字段名
	alter table t1 change id nid int;
4.添加额外的字段  &gt;&gt;&gt;&gt;&gt; 默认在尾部追加字段
	alter table t1 add password int;
5.添加额外的字段  &gt;&gt;&gt;&gt;&gt; 自定义位置
	alter table t1 add gender enum('male','female') after name;
6.添加额外的字段  &gt;&gt;&gt;&gt;&gt; 直接在表的开头
	alter table t1 add fid int first;
7.删除字段
	alter table t1 drop fid;
&quot;&quot;&quot;
</code></pre><h3 id="复制表了解">复制表（了解）</h3>
<pre><code>&quot;&quot;&quot;
sql语句的查询结果其实我们可以看成是一张存在于内存中的虚拟表

create table t789 select * from dep;  &gt;&gt;&gt;&gt;&gt; 将后面表的查询结果直接作为新表的数据
&gt;&gt;&gt;&gt;&gt; 上述复制表的语法只复制表数据不复制表结构

create table t999 like dep;  &gt;&gt;&gt;&gt;&gt; 复制表结构不要表数据
&quot;&quot;&quot;
</code></pre><h3 id="单表查询">单表查询</h3>
<pre><code>&quot;&quot;&quot;
create table emp(
  id int primary key auto_increment,
  name varchar(20) not null,
  sex enum('male','female') not null default 'male', &gt;&gt;&gt;&gt;&gt;大部分是男的
  age int(3) unsigned not null default 28,
  hire_date date not null,
  post varchar(50),
  post_comment varchar(100),
  salary double(15,2),
  office int, &gt;&gt;&gt;&gt;&gt;一个部门一个屋子
  depart_id int
);

&gt;&gt;&gt;&gt;&gt;插入记录
&gt;&gt;&gt;&gt;&gt;三个部门：教学，销售，运营
insert into emp(name,sex,age,hire_date,post,salary,office,depart_id) values
('jason','male',18,'20170301','张江第一帅形象代言',7300.33,401,1), &gt;&gt;&gt;&gt;&gt;以下是教学部
('tom','male',78,'20150302','teacher',1000000.31,401,1),
('kevin','male',81,'20130305','teacher',8300,401,1),
('tony','male',73,'20140701','teacher',3500,401,1),
('owen','male',28,'20121101','teacher',2100,401,1),
('jack','female',18,'20110211','teacher',9000,401,1),
('jenny','male',18,'19000301','teacher',30000,401,1),
('sank','male',48,'20101111','teacher',10000,401,1),
('哈哈','female',48,'20150311','sale',3000.13,402,2),&gt;&gt;&gt;&gt;&gt;以下是销售部门
('呵呵','female',38,'20101101','sale',2000.35,402,2),
('西西','female',18,'20110312','sale',1000.37,402,2),
('乐乐','female',18,'20160513','sale',3000.29,402,2),
('拉拉','female',28,'20170127','sale',4000.33,402,2),
('僧龙','male',28,'20160311','operation',10000.13,403,3), &gt;&gt;&gt;&gt;&gt;以下是运营部门
('程咬金','male',18,'19970312','operation',20000,403,3),
('程咬银','female',18,'20130311','operation',19000,403,3),
('程咬铜','male',18,'20150411','operation',18000,403,3),
('程咬铁','female',18,'20140512','operation',17000,403,3);

&gt;&gt;&gt;&gt;&gt;ps：如果在windows系统中，插入中文字符，select的结果为空白，可以将所有字符编码统一设置成gbk&quot;&quot;&quot;
</code></pre><h3 id="查询语句的书写顺序和执行顺序">查询语句的书写顺序和执行顺序</h3>
<pre><code>&quot;&quot;&quot;
select * from emp where id&gt;3;

关键字的书写顺序
select
from
where

关键字的执行顺序
from
where
select

&gt;&gt;&gt;&gt;&gt; 书写顺序和执行顺序不需要刻意的去记忆，你就按照书写的习惯从左往右书写即可
&quot;&quot;&quot;
</code></pre><h3 id="查询关键字之where筛选">查询关键字之where(筛选)</h3>
<pre><code>&quot;&quot;&quot;
where是用来做数据的筛选操作
&gt;&gt;&gt;&gt;&gt; 1.查询id大于等于3小于等于6的数据
select id,name from emp where id &gt;= 3 and id &lt;= 6;
select *  from emp where id between 3 and 6;  

&gt;&gt;&gt;&gt;&gt; 2.查询薪资是20000或者18000或者17000的数据
select * from emp where salary=20000 or salary=18000 or salary=17000;
select * from emp where salary in (20000,18000,17000);

&gt;&gt;&gt;&gt;&gt; 3.查询员工姓名中包含字母o的员工的姓名和薪资

模糊查询
	关键字 like
	关键符号
		%:匹配任意个数的任意字符
			eg:
				%j只要字符串末尾是j的都能匹配到
				%j%只要有j的都能匹配到
				
		_:匹配单个个数的任意字符
			eg:
				_j只能匹配尾部是j的两位字符
				_j_只能匹配中间是j的三位字符

select name,salary from emp where name like '%o%';

&gt;&gt;&gt;&gt;&gt; 4.查询员工姓名是由四个字符组成的员工姓名和薪资
select name,salary from emp where name like '____';
select name,salary from emp where char_length(name) = 4;

&gt;&gt;&gt;&gt;&gt; 5.查询id小于3或者大于6的数据
select * from emp where id&lt;3 or id&gt;6;
select *  from emp where id not between 3 and 6; 

&gt;&gt;&gt;&gt;&gt; 6.查询岗位描述为空的员工的姓名和岗位名称
select name,post from emp where post_comment=null;  &gt;&gt;&gt;&gt;&gt; 不行
select name,post from emp where post_comment is NULL;  &gt;&gt;&gt;&gt;&gt; 可以
'''针对null不能用等号需要用is'''
&quot;&quot;&quot;
</code></pre><h3 id="查询关键字之group-by分组">查询关键字之group by(分组)</h3>
<pre><code>&quot;&quot;&quot;
分组
	将单个单个的数据按照一定的条件分门别类，之后以分类之后的整体作为运算集
1.按照部门进行分组
select * from emp group by post;

需要注意的是在MySQL5.6版本及之前的版本上述语法不会报错
但是真正情况下分组之后不能够再获取到分组内单个数据的信息，只能拿到分组的依据不能直接再获取到单个数据信息
MySQL5.7及之后的版本会直接报错

我们需要设置严格模式，让它符合分组之后的规律

set global sql_mode = 'STRICT_TRANS_TABLES,ONLY_FULL_GROUP_BY';
select post from emp group by post;

2.获取每个部门的最高工资
select post,max(salary) from emp group by post;

3.获取每个部门的最低工资
select post,min(salary) from emp group by post;

4.获取每个部门的平均工资
select post,avg(salary) from emp group by post;

5.获取每个部门的总和工资
select post,sum(salary) from emp group by post;

6.获取每个部门的人数
select post,count(id) from emp group by post;

7.查询按照部门分组之后的每个部门名称和每个部门下员工姓名
select post,group_concat(name) from emp group by post;

group_concat用于分组之后获取非分组依据的其他字段数据
括号里面可以接受多个数据 展示的时候会自动帮你拼接到一起展示出来

8.查询按照部门分组之后的每个部门名称和每个部门下员工姓名和薪资
select post,group_concat(name,':',salary) from emp group by post;
select post,group_concat(name,'_NB') from emp group by post;


concat功能跟group_concat是一致的 
只不过concat只能用于分组之前
group_concat用于分组之后

&gt;&gt;&gt;&gt;&gt; 查询每个人的年薪
select name,salary*12 as annual_salary from emp;
select name,salary*12 annual_salary from emp;  &gt;&gt;&gt;&gt;&gt; as可以省略

9.统计各部门年龄在30岁以上的员工平均工资
	1.先筛选出年龄在30岁以上的员工
    2.再按照部门分组运算即可
select post,avg(salary) from emp where age&gt;30 group by post;
&quot;&quot;&quot;
</code></pre><h3 id="查询关键之having过滤">查询关键之having(过滤)</h3>
<pre><code>&quot;&quot;&quot;
where是分组之前用于数据的筛选
having是分组之后用于数据的筛选
&quot;&quot;&quot;
'''
1.统计各部门年龄在30岁以上的员工平均工资，并且保留平均工资大于10000的部门
select post,avg(salary) from emp 
			where age&gt;30 
    		group by post 
        	having avg(salary) &gt; 10000;
'''
</code></pre><h3 id="查询关键字之distinct去重">查询关键字之distinct(去重)</h3>
<pre><code>'''
去重的前提是数据必须是一模一样的才可以去重

select distinct post from emp;
'''
</code></pre><h3 id="查询关键字之order-by排序">查询关键字之order by(排序)</h3>
<pre><code>&quot;&quot;&quot;
select * from emp order by salary  &gt;&gt;&gt;&gt;&gt; 默认是升序
select * from emp order by salary asc;  &gt;&gt;&gt;&gt;&gt; asc升序的意思 默认可以不写
select * from emp order by salary desc;  &gt;&gt;&gt;&gt;&gt; 降序

排序的时候如果出现了相同值的情况 那么我们可以指定多个排序规则
select * from emp order by age asc,salary desc;
&gt;&gt;&gt;&gt;&gt; 先按照年龄升序排序 如果年龄相同再按照薪资降序排序
&quot;&quot;&quot;
</code></pre><h3 id="查询关键字之limit限制数据条数">查询关键字之limit(限制数据条数)</h3>
<pre><code>&quot;&quot;&quot;

limit的使用场景最常见的就是数据的分页展示
select * from emp limit 5;  &gt;&gt;&gt;&gt;&gt; 只获取前五条数据
select * from emp limit 5,5;  &gt;&gt;&gt;&gt;&gt; 第一个数字表示起始位置 第二个数字表示数据个数

&gt;&gt;&gt;&gt;&gt; 求薪资最高的用户的用户名和薪资
	1.选按照薪资降序排序
    2.再利用limit只取第一条
select name,salary from emp order by salary desc limit 1;
&quot;&quot;&quot;
</code></pre><h3 id="查询关键字之regexp正则表达式">查询关键字之regexp(正则表达式)</h3>
<pre><code>&quot;&quot;&quot;
正则表达式
	通过一些符合的组合从字符串中筛选出你想要的内容
爬虫的时候再具体讲解
&quot;&quot;&quot;
'''
select * from emp where name regexp '^j.*(n|y)$';
^j.*(n|y)$ 
	&gt;&gt;&gt;&gt;&gt; 匹配字符串
    1.必须是以字母j开头
    2.必须是以字母n或者y结尾
    3.中间可以是任意个数任意字符

补充:正则表达式是一门独立的语言，任何学科任何语言都可以学习使用，规律是一模一样的不受其他语言的影响
参考书籍:《正则指引》'''
</code></pre><h3 id="聚合函数">聚合函数</h3>
<pre><code>'''
聚合函数是在分组之后使用的
max		最大值
min		最小值
count	计数
avg		平均值
sum		求和
'''
</code></pre><h3 id="修改展示字段">修改展示字段</h3>
<pre><code>'''
&gt;&gt;&gt;&gt;&gt; 关键字as可以给字段起别名 用于展示的时候显示出来给用户看
select post as '部门',max(salary) as '最高薪资' from emp group by post;
&gt;&gt;&gt;&gt;&gt; 并且as可以省略不写  但是建议你不要省略(容易造成混淆)
select post '部门',max(salary) '最高薪资' from emp group by post;
'''
</code></pre><h3 id="作业">作业</h3>
<pre><code>&quot;&quot;&quot;
刚开始查询表，一定要按照最基本的步骤，先确定是哪张表，再确定查这张表有没有限制条件，再确定是否需要分类，最后再确定需要什么字段对应的信息
1. 查询岗位名以及岗位包含的所有员工名字
2. 查询岗位名以及各岗位内包含的员工个数
3. 查询公司内男员工和女员工的个数
4. 查询岗位名以及各岗位的平均薪资
5. 查询岗位名以及各岗位的最高薪资
6. 查询岗位名以及各岗位的最低薪资
7. 查询男员工与男员工的平均薪资，女员工与女员工的平均薪资&quot;&quot;&quot;
</code></pre>]]></content>
		</item>
		
		<item>
			<title>MySQL之完整语法、外键、约束条件</title>
			<link>https://Eddy-622.github.io/posts/mysql%E5%AE%8C%E6%95%B4%E8%AF%AD%E6%B3%95%E4%B8%BB%E9%94%AE%E5%A4%96%E9%94%AE/</link>
			<pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/mysql%E5%AE%8C%E6%95%B4%E8%AF%AD%E6%B3%95%E4%B8%BB%E9%94%AE%E5%A4%96%E9%94%AE/</guid>
			<description>昨日内容回顾   存储引擎
&amp;#39;&amp;#39;&amp;#39;查看存储引擎show engines;InnoDBMyISAMMemoryBlackHolecreate table t1(id int) engine=memory;&amp;#39;&amp;#39;&amp;#39;  基本SQL语句
&amp;#39;&amp;#39;&amp;#39;针对库show databases;show create database db1;create database db1;alter database db1 charset=&amp;#39;gbk&amp;#39;;drop database db1;针对表select database();use db1;show tables;show create table t1;describe t1;desc t1;create table t1(id int);alter table t1 modify id tinyiny;alter table t1 change id nid int;alter table t1 rename t2;drop table t1;针对记录select * from t1;select id,username from t1;select User,Hostname from mysql.</description>
			<content type="html"><![CDATA[<h1 id="昨日内容回顾">昨日内容回顾</h1>
<ul>
<li>
<p>存储引擎</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">查看存储引擎
</span><span class="s1">show engines;
</span><span class="s1">  
</span><span class="s1">  
</span><span class="s1">InnoDB
</span><span class="s1">MyISAM
</span><span class="s1">Memory
</span><span class="s1">BlackHole
</span><span class="s1">  
</span><span class="s1">create table t1(id int) engine=memory;
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>基本SQL语句</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;针对库
</span><span class="s1">show databases;
</span><span class="s1">show create database db1;
</span><span class="s1">create database db1;
</span><span class="s1">alter database db1 charset=&#39;gbk&#39;;
</span><span class="s1">drop database db1;
</span><span class="s1">  
</span><span class="s1"> 针对表
</span><span class="s1">select database();
</span><span class="s1">use db1;
</span><span class="s1">show tables;
</span><span class="s1">show create table t1;
</span><span class="s1">describe t1;
</span><span class="s1">desc t1;
</span><span class="s1">create table t1(id int);
</span><span class="s1">alter table t1 modify id tinyiny;
</span><span class="s1">alter table t1 change id nid int;
</span><span class="s1">alter table t1 rename t2;
</span><span class="s1">drop table t1;
</span><span class="s1">  
</span><span class="s1"> 针对记录
</span><span class="s1">select * from t1;
</span><span class="s1">select id,username from t1;
</span><span class="s1">select User,Hostname from mysql.user;
</span><span class="s1">insert into t1 values(1,&#39;jason&#39;);
</span><span class="s1">insert into t1(id,username) values(1,&#39;jasonNB&#39;);
</span><span class="s1">insert into t1 values(1,&#39;jason&#39;),(...),(...);
</span><span class="s1">update t1 set username=&#39;egon&#39; where username=&#39;jason&#39;;
</span><span class="s1">delete from t1 where id=1;&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>数据类型</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;整型
</span><span class="s1">  tinyint
</span><span class="s1">    smallint
</span><span class="s1">    int
</span><span class="s1">    bigint
</span><span class="s1">    默认都是带正负号，你也可以在创建表的时候规定不带
</span><span class="s1">    create table t1(id int unsigned);
</span><span class="s1">     整型后面括号里面的数字其实没有限制作用...定义整型的时候不需要你自己书写后面的数字
</span><span class="s1">      
</span><span class="s1">浮点型
</span><span class="s1">  float(255,30)
</span><span class="s1">    double(255,30)
</span><span class="s1">    decimal(65,30)
</span><span class="s1">     精确度不一致
</span><span class="s1">    日常开发中很多看似需要用数字存储的数据其实都可以使用字符串来存储
</span><span class="s1">  
</span><span class="s1">字符类型
</span><span class="s1">  char定长
</span><span class="s1">    varchar不定长
</span><span class="s1">     char_length()统计数据长度
</span><span class="s1">  
</span><span class="s1">日期类型
</span><span class="s1">  datetime
</span><span class="s1">    date
</span><span class="s1">    year
</span><span class="s1">    time
</span><span class="s1">  
</span><span class="s1">枚举与集合类型
</span><span class="s1">  enum
</span><span class="s1">    set&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>sql_mode严格模式</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39; 查看sql_mode
</span><span class="s1">show variables like &#39;%mode%&#39;;
</span><span class="s1"> 修改
</span><span class="s1">set global sql_mode = &#34;STRICT_TRANS_TABLES&#34;;
</span><span class="s1">set global sql_mode = &#34;PAD_CHAR_TO_FULL_LENGTH&#34;;&#39;&#39;&#39;</span>
</code></pre></div></li>
</ul>
<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>
<p>创建表的完整语法</p>
</li>
<li>
<p>字段的约束条件</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">unsigned  &gt;&gt;&gt;&gt;去正负号
</span><span class="s1">zerofill  &gt;&gt;&gt;&gt;空值用0填充
</span><span class="s1">  
</span><span class="s1">not null    &gt;&gt;&gt;&gt;&gt; 非空
</span><span class="s1">default       &gt;&gt;&gt;&gt; 默认值
</span><span class="s1">unique       &gt;&gt;&gt;&gt;唯一
</span><span class="s1">primary key(重要) &gt;&gt;&gt;&gt; 主键 
</span><span class="s1">auto_increment &gt;&gt;&gt;&gt;&gt;  自增&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>外键(创建表与表之间的关系)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">一对多
</span><span class="s1">多对多
</span><span class="s1">一对一
</span><span class="s1">没有关系&#39;&#39;&#39;</span>
</code></pre></div></li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h3 id="创建表的完整语法">创建表的完整语法</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;create table 表名(
</span><span class="s1">	字段名1 字段类型(数字) 约束条件 约束条件,
</span><span class="s1">    字段名2 字段类型(数字) 约束条件 约束条件,
</span><span class="s1">    字段名3 字段类型(数字) 约束条件 约束条件
</span><span class="s1">);
</span><span class="s1">
</span><span class="s1">1.数字和约束条件是可选的,而字段名和字段类型则是必需的
</span><span class="s1">2.最后一行字段定义不要加逗号
</span><span class="s1">
</span><span class="s1">create table t1(
</span><span class="s1">	id int unsigned,
</span><span class="s1">    name char(4)
</span><span class="s1">);&#39;&#39;&#39;</span>
</code></pre></div><h3 id="约束条件">约束条件</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34; 
</span><span class="s2">not null非空
</span><span class="s2">create table t2(
</span><span class="s2">	id int,
</span><span class="s2">    name varchar(32) not null
</span><span class="s2">);
</span><span class="s2">insert into t2(name) values(null);
</span><span class="s2">
</span><span class="s2">
</span><span class="s2"> default默认值
</span><span class="s2">create table t3(
</span><span class="s2">	id int,
</span><span class="s2">    name varchar(32) default &#39;jasonNB&#39;,
</span><span class="s2">    gender enum(&#39;male&#39;,&#39;female&#39;,&#39;others&#39;) default &#39;male&#39;
</span><span class="s2">);
</span><span class="s2">
</span><span class="s2"> unique唯一
</span><span class="s2"> 单列唯一
</span><span class="s2">create table t4(
</span><span class="s2">	id int,
</span><span class="s2">    name varchar(32) unique
</span><span class="s2">);
</span><span class="s2"> 联合唯一
</span><span class="s2">create table t5(
</span><span class="s2">	id int,
</span><span class="s2">    host varchar(32),
</span><span class="s2">    port int,
</span><span class="s2">    unique(host,port)
</span><span class="s2">);
</span><span class="s2">
</span><span class="s2"> primary key主键
</span><span class="s2">
</span><span class="s2">1.在约束条件上相等于not null + unique非空且唯一
</span><span class="s2">
</span><span class="s2">create table t6(
</span><span class="s2">	id int primary key
</span><span class="s2">);
</span><span class="s2">
</span><span class="s2">2.在创建表的时候InnoDB引擎规定了一张表必须有且只有一个主键
</span><span class="s2">	2.1 如果你没有primary key但是有非空且唯一的字段(not null unique)
</span><span class="s2">		它会从上往下将第一个非空且唯一的字段自动升级为主键
</span><span class="s2">	2.2 如果你没有任何的主键和其他键字段，那么InnoDB会采用内部隐藏的一个字段作为你表的主键，但是这个隐藏字段你在查询数据的时候是无法使用的
</span><span class="s2">
</span><span class="s2">补充:主键可以加快数据的查询速度，类似于书的目录
</span><span class="s2">
</span><span class="s2">create table t12(
</span><span class="s2">	  id int,
</span><span class="s2">      name char(16),
</span><span class="s2">      age int not null unique,   自动升级为主键
</span><span class="s2">      addr char(16) not null unique
</span><span class="s2">);
</span><span class="s2">
</span><span class="s2"> 联合主键(了解)
</span><span class="s2">create table t13(
</span><span class="s2">	  ip char(16),
</span><span class="s2">      port int,
</span><span class="s2">      primary key(ip,port)
</span><span class="s2">);
</span><span class="s2">&#39;&#39;&#39;总结:主键字段一般都用id字段(nid sid uid)&#39;&#39;&#39;
</span><span class="s2">
</span><span class="s2">
</span><span class="s2"> auto_increment自增
</span><span class="s2">create table t14(
</span><span class="s2">	id int primary key auto_increment,
</span><span class="s2">    name varchar(32)
</span><span class="s2">);
</span><span class="s2">&#39;&#39;&#39;auto_increment不能给普通的整型字段使用 一般都是直接给主键使用的&#39;&#39;&#39;
</span><span class="s2">
</span><span class="s2">总结:
</span><span class="s2">    以后我们使用SQL语句创建表的时候针对主键字段就是下面的固定写法
</span><span class="s2">    id int primary key auto_increment
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h3 id="主键的补充">主键的补充</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">1.主键的递增不会因为删除数据而变化
</span><span class="s1">	delete from 
</span><span class="s1">2.如果你真的想让主键从头开始计数
</span><span class="s1">	truncate t1&#39;&#39;&#39;</span>
</code></pre></div><h3 id="外键">外键</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39; 
</span><span class="s1">创建一张员工表
</span><span class="s1">id   name   age   dep_name   dep_desc
</span><span class="s1">
</span><span class="s1"> 上述表的缺点
</span><span class="s1">1.结构不清晰(重点是员工还是部门)
</span><span class="s1">2.浪费存储空间
</span><span class="s1">3.数据的扩展性极差
</span><span class="s1">
</span><span class="s1"> 如何解决上述问题
</span><span class="s1">将表进行拆分
</span><span class="s1">id   name   age
</span><span class="s1">
</span><span class="s1">id    dep_name   dep_desc
</span><span class="s1">
</span><span class="s1"> 数据之间的对应关系
</span><span class="s1">外键字段
</span><span class="s1">	建立表与表之间的关系&#39;&#39;&#39;</span>
</code></pre></div><h3 id="小技巧">小技巧</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;判断表与表之间的关系只需要
</span><span class="s1">换位思考
</span><span class="s1">站在双方的角度思考问题&#39;&#39;&#39;</span>
</code></pre></div><h3 id="一对多">一对多</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">1.先站在员工表
</span><span class="s2">	员工表里面的一条数据能否对应部门表里面的多条数据
</span><span class="s2">     翻译:一个员工能否对应多个部门
</span><span class="s2">  	结论:不可以
</span><span class="s2">2.在站在部门表
</span><span class="s2">	部门表里面的一条数据能否对应员工表里面的多条数据
</span><span class="s2">    翻译:一个部门能否有多个员工
</span><span class="s2">     结论:可以
</span><span class="s2">换位思考之后发现结论是:一个可以一个不可以
</span><span class="s2">那么员工表与部门表之间的关系就是&#34;一对多&#34;
</span><span class="s2">
</span><span class="s2"> 先定义出基表
</span><span class="s2"> 再添加外键
</span><span class="s2">create table emp(
</span><span class="s2">	id int primary key auto_increment,
</span><span class="s2">    name varchar(32),
</span><span class="s2">    age int,
</span><span class="s2">    dep_id int,
</span><span class="s2">    foreign key(dep_id) references dep(id) 
</span><span class="s2">); 声明emp表里面的dep_id字段是外键字段 并且跟dep表里的id字段关联
</span><span class="s2">create table dep(
</span><span class="s2">	id int primary key auto_increment,
</span><span class="s2">    dep_name varchar(32),
</span><span class="s2">    dep_desc varchar(255)
</span><span class="s2">);
</span><span class="s2">
</span><span class="s2">************************************************
</span><span class="s2">针对一对多的外键关系，外键字段建在多的一方
</span><span class="s2">************************************************
</span><span class="s2">
</span><span class="s2">insert into dep(dep_name,dep_desc) values(&#39;外交部&#39;,&#39;搞外交&#39;),(&#39;讲师部&#39;,&#39;教书育人&#39;),(&#39;技术部&#39;,&#39;技术能力有限部门&#39;);
</span><span class="s2">insert into emp(name,age,dep_id) values(&#39;jason&#39;,18,1);
</span><span class="s2">insert into emp(name,age,dep_id) values(&#39;egon&#39;,73,4);&#34;&#34;&#34;</span>
</code></pre></div><h3 id="外键字段的约束">外键字段的约束</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">1.在创建表的时候一定要先创建被关联表
</span><span class="s1">2.在录入数据的时候一定要先保证被关联表里面有数据
</span><span class="s1">3.外键字段的值只能是被关联表字段里面出现过的值
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h3 id="级联更新级联删除">级联更新级联删除</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">1.修改被关联表的被关联字段(不可以)
</span><span class="s2">	update dep set id=200 where id=1;
</span><span class="s2">2.删除被关联表里面的数据项(不可以)
</span><span class="s2">	delete from dep where id=1;
</span><span class="s2">    
</span><span class="s2"> create table emp1(
</span><span class="s2">	id int primary key auto_increment,
</span><span class="s2">    name varchar(32),
</span><span class="s2">    age int,
</span><span class="s2">    dep_id int,
</span><span class="s2">    foreign key(dep_id) references dep1(id) 
</span><span class="s2">    on update cascade 
</span><span class="s2">    on delete cascade
</span><span class="s2">);
</span><span class="s2"> 声明emp表里面的dep_id字段是外键字段 并且跟dep表里的id字段关联
</span><span class="s2">create table dep1(
</span><span class="s2">	id int primary key auto_increment,
</span><span class="s2">    dep_name varchar(32),
</span><span class="s2">    dep_desc varchar(255)
</span><span class="s2">);&#34;&#34;&#34;</span>
</code></pre></div><h3 id="多对多">多对多</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">以书籍表与作者表为例
</span><span class="s2">1.先站在书籍表
</span><span class="s2">	一本书能否对应多个作者
</span><span class="s2">    	可以
</span><span class="s2">2.再站在作者表
</span><span class="s2">	一个作者能否写多本书
</span><span class="s2">    	可以
</span><span class="s2">结论:如果换位思考之后结论是两个都可以
</span><span class="s2">     那么表关系就是多对多
</span><span class="s2"> 
</span><span class="s2">create table book(
</span><span class="s2">	id int primary key auto_increment,
</span><span class="s2">    title varchar(32),
</span><span class="s2">    price float(18,2),
</span><span class="s2">    author_id int,
</span><span class="s2">    foreign key(author_id) references author(id)
</span><span class="s2">    on update cascade
</span><span class="s2">    on delete cascade
</span><span class="s2">);
</span><span class="s2">
</span><span class="s2">create table author(
</span><span class="s2">	id int primary key auto_increment,
</span><span class="s2">    name varchar(32),
</span><span class="s2">    phone int,
</span><span class="s2">    book_id int,
</span><span class="s2">    foreign key(book_id) references book(id)
</span><span class="s2">    on update cascade
</span><span class="s2">    on delete cascade
</span><span class="s2">);
</span><span class="s2">
</span><span class="s2">************************************************
</span><span class="s2">★多对多外键字段需要你重新创建一张表来专门记录表关系
</span><span class="s2">************************************************
</span><span class="s2">
</span><span class="s2">create table book(
</span><span class="s2">	id int primary key auto_increment,
</span><span class="s2">    title varchar(32),
</span><span class="s2">    price float(18,2)
</span><span class="s2">);
</span><span class="s2">
</span><span class="s2">create table author(
</span><span class="s2">	id int primary key auto_increment,
</span><span class="s2">    name varchar(32),
</span><span class="s2">    phone int
</span><span class="s2">);
</span><span class="s2">create table book2author(
</span><span class="s2">	id int primary key auto_increment,
</span><span class="s2">    book_id int,
</span><span class="s2">    author_id int,
</span><span class="s2">    foreign key(author_id) references author(id)
</span><span class="s2">    on update cascade
</span><span class="s2">    on delete cascade,
</span><span class="s2">    foreign key(book_id) references book(id)
</span><span class="s2">    on update cascade
</span><span class="s2">    on delete cascade
</span><span class="s2">);
</span><span class="s2">注意事项
</span><span class="s2">1.两张关系表自身不需要做任何的外键字段
</span><span class="s2">2.在录入数据的时候也不需要考虑先录入后录入的问题
</span><span class="s2">3.在针对第三张关系表的时候需要注意约束
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>MySQL之基本语句，数据类型</title>
			<link>https://Eddy-622.github.io/posts/mysql%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
			<pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/mysql%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
			<description>今日内容概要   基本的SQL的语句
对数据库的增删改查
对表的增删改查
对记录的增删改查
  数据库存储引擎
  MySQL中的数据类型
  今日内容详细 基本的SQL语句
&amp;#34;&amp;#34;&amp;#34;针对数据库的增删改查查看show databases; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;查看所有的数据库show create database 数据库名字； &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;单独查指定的数据库create database 数据库名字； &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;创建数据库alter database 数据库名字 charset=&amp;#39;gbk&amp;#39;; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;更改数据库的字符编码drop database 数据库名字; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;删除数据库针对表的增删改查如何查看当前在哪个库下select database();切换数据库use 数据库名；查看show tables; .&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;查看当前库下的所有表show create table 表名； &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;查看指定的表信息describe 表明; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;查看指定表结构desc 表名；增create table 表名(字段名 字段类型); &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;新建表格改alter table 表名 modify 字段名 字段的数据类型; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;更改字段的数据类型alter table 表名 change 字段名 新字段名 字段类型;	&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;改字段名alter table 表名 rename 新表名; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;改表名删drop table 表名;针对记录的增删改查select * from 表名;	&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;查看指定表的所有数据select * from 库名.</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>
<p>基本的SQL的语句</p>
<p>对数据库的增删改查</p>
<p>对表的增删改查</p>
<p>对记录的增删改查</p>
</li>
<li>
<p>数据库存储引擎</p>
</li>
<li>
<p>MySQL中的数据类型</p>
</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<p>基本的SQL语句</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">针对数据库的增删改查
</span><span class="s2">查看
</span><span class="s2">show databases;   				&gt;&gt;&gt;&gt;&gt;查看所有的数据库
</span><span class="s2">show create database 数据库名字； &gt;&gt;&gt;&gt;&gt;单独查指定的数据库
</span><span class="s2">create database 数据库名字；      &gt;&gt;&gt;&gt;&gt;创建数据库
</span><span class="s2">alter database 数据库名字 charset=&#39;gbk&#39;; 	&gt;&gt;&gt;&gt;&gt;更改数据库的字符编码
</span><span class="s2">drop database 数据库名字;  		&gt;&gt;&gt;&gt;&gt;删除数据库
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">针对表的增删改查
</span><span class="s2">如何查看当前在哪个库下
</span><span class="s2">	select database();
</span><span class="s2">切换数据库
</span><span class="s2">	use 数据库名；
</span><span class="s2">
</span><span class="s2">查看
</span><span class="s2">show tables; 			.&gt;&gt;&gt;&gt;&gt;查看当前库下的所有表
</span><span class="s2">show create table 表名；  &gt;&gt;&gt;&gt;&gt;查看指定的表信息
</span><span class="s2">describe 表明;           &gt;&gt;&gt;&gt;&gt;查看指定表结构
</span><span class="s2">desc 表名；
</span><span class="s2">
</span><span class="s2">增
</span><span class="s2">create table 表名(字段名 字段类型);  &gt;&gt;&gt;&gt;&gt;新建表格
</span><span class="s2">
</span><span class="s2">改
</span><span class="s2">alter table 表名 modify 字段名 字段的数据类型; 			&gt;&gt;&gt;&gt;&gt;更改字段的数据类型
</span><span class="s2">alter table 表名 change 字段名 新字段名 字段类型;		&gt;&gt;&gt;&gt;&gt;改字段名
</span><span class="s2">alter table 表名 rename 新表名; 						&gt;&gt;&gt;&gt;&gt;改表名
</span><span class="s2">
</span><span class="s2">删
</span><span class="s2">drop table 表名;
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">针对记录的增删改查
</span><span class="s2">select * from 表名;			&gt;&gt;&gt;&gt;&gt;查看指定表的所有数据
</span><span class="s2">
</span><span class="s2">select * from 库名.表名; 		&gt;&gt;&gt;&gt;&gt;查看其它库下的表数据
</span><span class="s2">
</span><span class="s2">增
</span><span class="s2">insert into 表名 values(数据1，数据2);		&gt;&gt;&gt;&gt;&gt;按照字段顺序给表增数据
</span><span class="s2">insert into 表名(字段名1，字段名2，字段名3)values(数据1，数据2，数据3)；
</span><span class="s2">						&gt;&gt;&gt;&gt;&gt;自定字段顺序给表增数据
</span><span class="s2">    
</span><span class="s2">nsert into 表名 values(数据1,数据2),(数据1,数据2),(数据1,数据2),(数据1,数据2);
</span><span class="s2">						&gt;&gt;&gt;&gt;&gt;增加多条数据
</span><span class="s2">
</span><span class="s2">改
</span><span class="s2">update 表名 set username=&#39;jasonNB&#39; where username=&#39;jason&#39;;
</span><span class="s2">&#39;&#39;&#39;将表里面username字段是jason的数据修改为jasonNB&#39;&#39;&#39;
</span><span class="s2">
</span><span class="s2">删
</span><span class="s2">delete from 表名 where id=1;  		&gt;&gt;&gt;&gt;&gt;将id等于1的数据删除
</span><span class="s2">delete from 表名;  					&gt;&gt;&gt;&gt;&gt;将整个表里面的数据全部删除
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="mysql中的数据类型">Mysql中的数据类型</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">整型
</span><span class="s2">tinyint
</span><span class="s2">smallint
</span><span class="s2">int
</span><span class="s2">bigint
</span><span class="s2">不同的整型类型能够储存的数字最大范围不同，并且数字带有正负号，需要牺牲一位来存储正负号
</span><span class="s2">验证整型默认都是带正负号还是不带
</span><span class="s2">create table t1 (id tinyint);
</span><span class="s2">insert into t1 values(256);
</span><span class="s2">验证查看结果志存到了127 说明默认是带正负号的
</span><span class="s2">
</span><span class="s2">☆规定整型不带正负号
</span><span class="s2">create table t1(id tinyint unsigned);
</span><span class="s2">
</span><span class="s2">整型的括号里数字意义表示的为展示的长度
</span><span class="s2">不够位数默认的是用空格填充
</span><span class="s2">设置使用不够用0填充
</span><span class="s2">☆create table t1 (id int zerofill);
</span><span class="s2">
</span><span class="s2">总结：
</span><span class="s2">	整型括号的数字其实我们不需要在意，直接使用默认的即可，不需要自己指定数字，完全没有意义。
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="浮点型">浮点型</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">float (255,30)  &gt;&gt;&gt;&gt;总共255位，小数占30位
</span><span class="s2">double(255,30)	&gt;&gt;&gt;&gt;总共255位，小数占30位		
</span><span class="s2">decimal(65,30)	&gt;&gt;&gt;&gt;总共65位，小数占30位
</span><span class="s2">
</span><span class="s2">三者的区别在于精确度不同
</span><span class="s2">decimal&gt;double&gt;float
</span><span class="s2">
</span><span class="s2">讨论：结合实际情况采用不同精确度的数据类型
</span><span class="s2">补充：
</span><span class="s2">	生活中看似有很多需要使用整型或者浮点型的数据
</span><span class="s2">    其实内部又可能都是直接存的字符串
</span><span class="s2">    在取出来的时候手动转型，操作完毕之后再转会字符串存入
</span><span class="s2">    
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="字符类型">字符类型</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">char(4)  &gt;&gt;&gt;&gt;&gt; 最多只能存4个字符 少了用空格填充至四个，多了直接报错
</span><span class="s2">varchar(4) &gt;&gt;&gt;&gt;&gt;  最多只能存4个字符 少了有几个存几个，多了直接报错
</span><span class="s2">&#39;&#39;&#39;针对字符类型括号后面的数组表示的就是存储限制&#39;&#39;&#39;
</span><span class="s2">create table t10(username char(4));
</span><span class="s2">create table t11(username varchar(4));
</span><span class="s2">
</span><span class="s2">&#39;&#39;&#39;验证char在存储数据的时候是固定长度的&#39;&#39;&#39;
</span><span class="s2">char_length() &gt;&gt;&gt;&gt;&gt;用来统计字符的个数
</span><span class="s2">我们在使用上述方法去统计char字段长度的时候发现无法得出正确的结论
</span><span class="s2">因为MySQL内部在存储的时候确实是按照固定长度存储的，但是在取出来的时候回自动帮你把填充的空格移除，如果你不想让MySQL做自动的处理需要再加一个严格模式配置
</span><span class="s2">set global sql_mode=&#39;STRICT_TRANS_TABLES,PAD_CHAR_TO_FULL_LENGTH&#39;;
</span><span class="s2">
</span><span class="s2">&#39;&#39;&#39;验证varchar在存储数据的时候长度不是固定的&#39;&#39;&#39;
</span><span class="s2">
</span><span class="s2">&#39;&#39;&#39;讨论char与varchar优缺点&#39;&#39;&#39;
</span><span class="s2">char
</span><span class="s2">	优点:整存整取  存取数据的速度快
</span><span class="s2">     缺点:浪费存储空间
</span><span class="s2">     jasonegon kevintony wusiralex 
</span><span class="s2">   	 存的五位五位的存取得时候五位五位的取
</span><span class="s2">varchar
</span><span class="s2">	优点:节省存储空间
</span><span class="s2">     缺点:存取数据的速度没有char快
</span><span class="s2">     1bytes+jason1bytes+egon1bytes+kevin1bytes+tony1bytes+wusir1bytes+alex  
</span><span class="s2">     存的时候需要给数据生成一个报头，取得时候先读报头再读取真实数据长度
</span><span class="s2">我们以后是用char还是varchar？
</span><span class="s2">	结合实际情况
</span><span class="s2">    目前比较推荐使用varchar
</span><span class="s2">    以前基本上使用的都是char
</span><span class="s2">&#34;&#34;&#34;</span>
    
</code></pre></div><h4 id="严格模式">严格模式</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">我们应该做到数据如果不符合要求，不让存储直接报错
</span><span class="s2">如果你的MySQL版本是5.6及以下需要你自己设置
</span><span class="s2">如果你的MySQL版本是5.7及以上则不需要自己设置
</span><span class="s2">
</span><span class="s2">如何查看SQL_MODEL
</span><span class="s2">show variables like &#39;%mode%&#39;;
</span><span class="s2">
</span><span class="s2">修改严格模式
</span><span class="s2">set global sql_mode=&#39;STRICT_TRANS_TABLES&#39;;
</span><span class="s2">&#39;&#39;&#39;一定要退出客户端重新进入&#39;&#39;&#39;
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="时间类型">时间类型</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">datetime  年月日时分秒
</span><span class="s1">date	年月日
</span><span class="s1">year	年
</span><span class="s1">time	时分秒
</span><span class="s1">create table t1(
</span><span class="s1">	id int,
</span><span class="s1">	username varchar(22),
</span><span class="s1">	register_time datatime,
</span><span class="s1">	birthday date,
</span><span class="s1">	work_time year
</span><span class="s1">);&#39;&#39;&#39;</span>

</code></pre></div><h4 id="枚举与集合">枚举与集合</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">枚举  		enum
</span><span class="s2">	多选一
</span><span class="s2">create table t12(
</span><span class="s2">	id int,
</span><span class="s2">	username varchar(22),
</span><span class="s2">	gender enum(&#39;男&#39;，’女)
</span><span class="s2">);
</span><span class="s2">
</span><span class="s2">集合			set
</span><span class="s2">	多选多（支持多选一）
</span><span class="s2">create table t13(
</span><span class="s2">	id int,
</span><span class="s2">	username varchar(33),
</span><span class="s2">	hobby set(&#39;music&#39;,&#39;video&#39;,&#39;play&#39;)
</span><span class="s2">);&#34;&#34;&#34;</span>
</code></pre></div><p>当一张表的字段特别多造成cmd窗口展示不全出现混乱的情况</p>
<p>在查询语句的末尾加上\G</p>
<p>select * from mysql.user \G;</p>
]]></content>
		</item>
		
		<item>
			<title>MySQL之下载安装</title>
			<link>https://Eddy-622.github.io/posts/mysql%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/</link>
			<pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/mysql%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/</guid>
			<description>数据库 软件开发架构 &amp;#34;&amp;#34;&amp;#34;1.c/s架构c:client 客户端s:server 服务端2.b/s架构b:broswer:浏览器s:server 服务器服务端就类似于是一家家的店客户端就类似于是去店里消费的客人c/s架构下我们客人要想体验服务，就必须下载对应服务的app客户端b/s架构下我们要想体验服务，必须要挨个下载对应的app，只需要使用浏览器即可我们之前下载的一个个app其实本质就是客户端# b/s架构本质上也是c/s架构&amp;#34;&amp;#34;&amp;#34;数据库的演变过程 单机游戏
&amp;#39;&amp;#39;&amp;#39;1.不用联网2.计算机与计算机之间游戏数据不共享数据都是保存的各自的本地(数据彼此不共享)&amp;#39;&amp;#39;&amp;#39;联网游戏
&amp;#39;&amp;#39;&amp;#39;1.得有互联网2.游戏数据是共享的数据彼此都是共享的&amp;#39;&amp;#39;&amp;#39;总结:其实数据库软件本质上还是c/s架构的软件
数据库的作用 文件存储数据
&amp;#39;&amp;#39;&amp;#39;用户Ajason:123用户Bjason|123用户Cjason~123每个人存储数据的格式是千差万别的，程序兼容性非常的差&amp;#39;&amp;#39;&amp;#39;按照数据类型的不同创建不同的文件夹处理
&amp;#39;&amp;#39;&amp;#39;存储数据的文件一般情况下我们都会默认放在一个data文件夹内虽然没有解决数据格式的问题，但是统一了数据存储位置的问题&amp;#39;&amp;#39;&amp;#39;数据库软件
&amp;#39;&amp;#39;&amp;#39;1.针对数据的存储有固定的格式2.针对数据的存储位置也做了限制(统一都存在数据库服务端)&amp;#39;&amp;#39;&amp;#39;数据库的分类 &amp;#39;&amp;#39;&amp;#39;1.关系型数据库MySQL、Oracle、PostgreSQL、MariaDB(跟MySQL很像)、DB2、SQL server、sqlite特点:1.存储数据基本上都是以表结构的形式(表结构 表字段 字段类型)2.表与表之间可以创建代码层面上的关系(后续课程会详细的讲)用户表房屋表虽然数据库软件有很多，但是内部原理的都是一样的，尤其是当你学会了MySQL之后，再去学其他的数据库软件非常的轻松2.</description>
			<content type="html"><![CDATA[<h1 id="数据库">数据库</h1>
<h3 id="软件开发架构">软件开发架构</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">1.c/s架构
</span><span class="s2">	c:client  客户端
</span><span class="s2">     s:server  服务端
</span><span class="s2">    
</span><span class="s2">    
</span><span class="s2">2.b/s架构
</span><span class="s2">	b:broswer:浏览器
</span><span class="s2">    s:server  服务器
</span><span class="s2">        
</span><span class="s2">
</span><span class="s2">服务端就类似于是一家家的店
</span><span class="s2">客户端就类似于是去店里消费的客人
</span><span class="s2">
</span><span class="s2">c/s架构下
</span><span class="s2">	我们客人要想体验服务，就必须下载对应服务的app客户端
</span><span class="s2">b/s架构下
</span><span class="s2">	我们要想体验服务，必须要挨个下载对应的app，只需要使用浏览器即可
</span><span class="s2">
</span><span class="s2">我们之前下载的一个个app其实本质就是客户端
</span><span class="s2">
</span><span class="s2"># b/s架构本质上也是c/s架构
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h3 id="数据库的演变过程">数据库的演变过程</h3>
<p>单机游戏</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">1.不用联网
</span><span class="s1">2.计算机与计算机之间游戏数据不共享
</span><span class="s1">
</span><span class="s1">数据都是保存的各自的本地(数据彼此不共享)
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><p>联网游戏</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">1.得有互联网
</span><span class="s1">2.游戏数据是共享的
</span><span class="s1">
</span><span class="s1">数据彼此都是共享的
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><p>总结:其实数据库软件本质上还是c/s架构的软件</p>
<h3 id="数据库的作用">数据库的作用</h3>
<p>文件存储数据</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">用户A
</span><span class="s1">	jason:123
</span><span class="s1">用户B
</span><span class="s1">	jason|123
</span><span class="s1">用户C
</span><span class="s1">	jason~123
</span><span class="s1">每个人存储数据的格式是千差万别的，程序兼容性非常的差
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><p>按照数据类型的不同创建不同的文件夹处理</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">存储数据的文件一般情况下我们都会默认放在一个data文件夹内
</span><span class="s1">
</span><span class="s1">虽然没有解决数据格式的问题，但是统一了数据存储位置的问题
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><p>数据库软件</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">1.针对数据的存储有固定的格式
</span><span class="s1">2.针对数据的存储位置也做了限制(统一都存在数据库服务端)
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h3 id="数据库的分类">数据库的分类</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">1.关系型数据库
</span><span class="s1">	MySQL、Oracle、PostgreSQL、MariaDB(跟MySQL很像)、DB2、SQL server、sqlite
</span><span class="s1">	特点:
</span><span class="s1">        1.存储数据基本上都是以表结构的形式(表结构 表字段 字段类型)
</span><span class="s1">        2.表与表之间可以创建代码层面上的关系(后续课程会详细的讲)
</span><span class="s1">        	用户表
</span><span class="s1">            房屋表
</span><span class="s1">	虽然数据库软件有很多，但是内部原理的都是一样的，尤其是当你学会了MySQL之后，再去学其他的数据库软件非常的轻松
</span><span class="s1">    
</span><span class="s1">
</span><span class="s1">2.非关系型数据库
</span><span class="s1">	redis、mongoDB(后续讲爬虫会讲到)、memcache(被redis取代了)
</span><span class="s1">	特点:
</span><span class="s1">        1.存储数据没有表结构，基本上都是以key:value键值对的形式
</span><span class="s1">        2.数据与数据之间无法创建代码层面上的关系
</span><span class="s1">        &#39;&#39;&#39;</span>
</code></pre></div><h3 id="mysql简介">MySQL简介</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">MySQL仅仅只是一款基于C/S架构开发的数据库软件
</span><span class="s1">
</span><span class="s1">	MySQL服务端
</span><span class="s1">		
</span><span class="s1">
</span><span class="s1">	MySQL客户端
</span><span class="s1">    
</span><span class="s1">学习阶段我们可以下载一个MySQL的压缩包，里面包含了MySQL的服务端和客户端
</span><span class="s1">可以让学习的用户在自己的机器上有服务端和客户端从而摆脱必须要联网才能学习的麻烦
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">由于可以充当MySQL的客户端非常的多，会导致语言沟通的障碍
</span><span class="s1">为了解决这个问题，我们统一了数据库语
</span><span class="s1">	SQL语句(客户端与服务端沟通交流的媒介)
</span><span class="s1">  
</span><span class="s1"> 总结:SQL语句的由来其实体现的就是&#34;统一&#34;思想
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h3 id="mysql下载与安装">MySQL下载与安装</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">MySQL的版本问题
</span><span class="s1">    1.MySQL5.6
</span><span class="s1">    2.MySQL5.7
</span><span class="s1">    3.MySQL8.0
</span><span class="s1">在IT行业，我们基本上不会轻易的尝试新版本的软件，尤其是运行的好好的没有任何问题的项目，我们更不会傻吧垃圾的去更新软件版本
</span><span class="s1">
</span><span class="s1">针对MySQL的版本问题，目前市面上使用的最多的恰恰是MySQL5.6版本
</span><span class="s1">使用哪个版本其实问题不大，因为内部的SQL语句都是一样的
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">下载地址
</span><span class="s1">https://www.mysql.com/
</span><span class="s1"> 
</span><span class="s1">解压
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h3 id="mysql的目录结构">MySQL的目录结构</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">bin文件夹
</span><span class="s1">	都是用来存放可执行文件
</span><span class="s1">data文件夹
</span><span class="s1">	MySQL存放数据的地方
</span><span class="s1">my-default.ini
</span><span class="s1">	MySQL的配置文件
</span><span class="s1">Readme
</span><span class="s1">	类似于软件说明书，主要用于介绍软件功能、打广告等
</span><span class="s1">	&#39;&#39;&#39;</span>
</code></pre></div><h3 id="mysql的启动">MySQL的启动</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">在bin目录下
</span><span class="s1">    mysqld.exe 	MySQL服务端
</span><span class="s1">    
</span><span class="s1">    mysql.exe	MySQL客户端
</span><span class="s1">    
</span><span class="s1">如何启动
</span><span class="s1">	一定要先启动服务端才可以用客户端去连接
</span><span class="s1">
</span><span class="s1">如果在启动服务的时候出现了类似于课上的报错，不要慌，百度搜索即可解决问题
</span><span class="s1">    
</span><span class="s1">在启动的时候最好是用管理员的身份运行的cmd窗口
</span><span class="s1">
</span><span class="s1">客户端链接MySQL需要输入用户名和密码
</span><span class="s1">	mysql -uroot -p
</span><span class="s1">初始MySQL管理员是没有密码的，你直接enter即可
</span><span class="s1">	如果你直接输入mysql那么你会以游客模式的身份进入(权限非常的少)
</span><span class="s1">	&#39;&#39;&#39;</span>
</code></pre></div><h3 id="环境变量的配置">环境变量的配置</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;1.将mysqld.exe和mysql.exe所在的文件路径添加到环境变量中&#39;&#39;&#39;</span>
</code></pre></div><h3 id="系统服务">系统服务</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">将MySQL的服务端制作成系统服务(开机自启动)
</span><span class="s2">
</span><span class="s2">1.保证你的MySQL服务端关闭的情况下
</span><span class="s2">	用管理员身份打开cmd窗口
</span><span class="s2">
</span><span class="s2">2.制作系统服务
</span><span class="s2">	mysqld --install
</span><span class="s2">   
</span><span class="s2">3.启动服务
</span><span class="s2">	第一次制作系统服务之后需要你主动启动一次
</span><span class="s2">    	1.命令行
</span><span class="s2">        	net start mysql
</span><span class="s2">            # net stop mysql 停止服务
</span><span class="s2">        2.操作界面点点点即可
</span><span class="s2">        	右键启动即可
</span><span class="s2">	完毕之后，后续就无需手动启动了，会随着计算机的开机和关机自动启动和关闭
</span><span class="s2">  
</span><span class="s2">4.移除服务
</span><span class="s2">	mysqld --remove
</span><span class="s2">    
</span><span class="s2">
</span><span class="s2">如何查看当前计算机内部所有的服务
</span><span class="s2">	1.windows+r调出输入框
</span><span class="s2">		services.msc
</span><span class="s2">	2.任务栏直接鼠标右键选择任务管理器
</span><span class="s2">		查看正在运行的服务
</span><span class="s2">	3.命令行
</span><span class="s2">		tasklisk
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h3 id="mysql的重要概念">MySQL的重要概念</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">数据库					文件夹
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">数据表					文件夹里面的一个个文件
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">数据记录				文件里面的一行行数据
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h3 id="简单的sql操作">简单的SQL操作</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">在链接到MySQL服务端之后，所有的SQL语句结束符是分号
</span><span class="s1">
</span><span class="s1">1.客户端链接服务端
</span><span class="s1">	mysql -uroot -p
</span><span class="s1">    
</span><span class="s1">2.查看所有的数据库
</span><span class="s1">	show databases;
</span><span class="s1">    
</span><span class="s1">3.退出服务端命令(可以不加分号)
</span><span class="s1">	exit
</span><span class="s1">     quit
</span><span class="s1">  
</span><span class="s1">4.取消之前没有加分号的命令
</span><span class="s1">	\c
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h3 id="设置密码">设置密码</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">1.直接在cmd窗口内输入命令(不进去MySQL服务端)
</span><span class="s1">	mysqladmin -u用户名 -p旧密码 password 新密码
</span><span class="s1">    # 第一次修改
</span><span class="s1">    mysqladmin -uroot -p password 123
</span><span class="s1">    # 第二次修改
</span><span class="s1">    mysqladmin -uroot -p123 password 123456
</span><span class="s1">    
</span><span class="s1">2.进入MySQL服务端之后输入SQL语句
</span><span class="s1">	set password=PASSWORD(&#39;新密码&#39;);
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h3 id="忘记密码">忘记密码</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">1.关闭你的MySQL服务端
</span><span class="s1">	net stop mysql
</span><span class="s1">2.以跳过授权表的方式重新启动MySQL服务端
</span><span class="s1">	mysqld --skip-grant-tables
</span><span class="s1">3.修改忘记密码用户的密码
</span><span class="s1">	update mysql.user set password=password(&#39;jason123&#39;) where user=&#39;root&#39; and 
</span><span class="s1">    host = &#39;localhost&#39;;
</span><span class="s1">4.先关闭之前命令行启动的服务端，然后正常启动MySQL服务端
</span><span class="s1">	net start mysql
</span><span class="s1">5.重新输入用户名和密码的方式
</span><span class="s1">	mysql -uroot -p
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h3 id="配置文件">配置文件</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1"># 查看当前MySQL的基本信息
</span><span class="s1">\s
</span><span class="s1">
</span><span class="s1"># 统一MySQL的字符编码
</span><span class="s1">mysql默认的配置文件不要修改，拷贝一份再修改
</span><span class="s1">	my.ini
</span><span class="s1">
</span><span class="s1">只需要拷贝固定的配置即可
</span><span class="s1">	[mysqld]
</span><span class="s1">    character-set-server=utf8
</span><span class="s1">    collation-server=utf8_general_ci
</span><span class="s1">
</span><span class="s1">    [client]
</span><span class="s1">    default-character-set=utf8
</span><span class="s1">
</span><span class="s1">    [mysql]
</span><span class="s1">    default-character-set=utf8
</span><span class="s1"># 修改配置文件之后一定要重启服务端才能生效
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Python之常用模块，面向对象，类</title>
			<link>https://Eddy-622.github.io/posts/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E9%9D%A2%E5%90%91%E5%AF%B9%E7%B1%BB/</link>
			<pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E9%9D%A2%E5%90%91%E5%AF%B9%E7%B1%BB/</guid>
			<description>今日内容   常用模块
random模块、时间模块、hashlib模块
  面向对象
什么是对象，什么是类，如何创建类，如何创建对象，基本使用
  今日内容详细 常用模块 python的精髓在于模块，不论是什么功能都可能已经有前人写好打包好的模块供我们使用，所以遇到问题应该先找一下有没有模块已经实现了我想要的功能或大致实现，以减少时间提高效率
&amp;#34;&amp;#34;&amp;#34;利用random随机模块实现随机验证码五位随机验证码，每一位都可以是大写字母小写字母或者数字★ 必备基础知识点英文大小写26个字母与十进制的ASCII码表对应关系A-Z &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 65-90a-z &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 97-122★chr 通过数值表达式把数值转换编码表现的字符这里可以利用for循环 循环五次每一次循环产生三个数据，大写字母，小写字母和数字三个里面随机选取一位import random &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;导入random模块code = &amp;#39;&amp;#39; 将产生的数据拼接到字符串中for i in range(5): &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;for循环五次random_upper = chr(random.randint(65,90))&amp;gt;&amp;gt;&amp;gt;&amp;gt;从65-90数字中随机抽取并通过chr转换为数值表达式所表达的字符产生随机的大写字符random_lower = chr(random.randint(97,122))&amp;gt;&amp;gt;&amp;gt;&amp;gt;产生随机的小写字符random_int = str(random.randint(0,9))&amp;gt;&amp;gt;&amp;gt;&amp;gt;产生随机数字 并转换为字符串格式temp = random.choice([random_supper,random_lower,random_int])&amp;gt;&amp;gt;&amp;gt;&amp;gt;三个随机数字随机抽取一个赋值给tempcode += temp&amp;gt;&amp;gt;&amp;gt;&amp;gt; 五位随机数拼接到code中print(code)把封装成函数def get_code(n) &amp;gt;&amp;gt;&amp;gt;&amp;gt;需要产生n位的随机验证码，code = &amp;#39;&amp;#39; 将产生的数据拼接到字符串中for i in range(n): &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;for循环五次random_upper = chr(random.</description>
			<content type="html"><![CDATA[<h1 id="今日内容">今日内容</h1>
<ul>
<li>
<p>常用模块</p>
<p>random模块、时间模块、hashlib模块</p>
</li>
<li>
<p>面向对象</p>
<p>什么是对象，什么是类，如何创建类，如何创建对象，基本使用</p>
</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h4 id="常用模块">常用模块</h4>
<p>python的精髓在于模块，不论是什么功能都可能已经有前人写好打包好的模块供我们使用，所以遇到问题应该先找一下有没有模块已经实现了我想要的功能或大致实现，以减少时间提高效率</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">利用random随机模块实现随机验证码
</span><span class="s2">五位随机验证码，每一位都可以是大写字母小写字母或者数字
</span><span class="s2">
</span><span class="s2">★ 必备基础知识点
</span><span class="s2"> 英文大小写26个字母与十进制的ASCII码表对应关系
</span><span class="s2">    A-Z    &gt;&gt;&gt;&gt;&gt;   65-90
</span><span class="s2">    a-z    &gt;&gt;&gt;&gt;&gt;   97-122
</span><span class="s2">    
</span><span class="s2">★chr  通过数值表达式把数值转换编码表现的字符
</span><span class="s2">
</span><span class="s2">这里可以利用for循环  循环五次
</span><span class="s2">每一次循环产生三个数据，大写字母，小写字母和数字
</span><span class="s2">三个里面随机选取一位
</span><span class="s2">import random         &gt;&gt;&gt;&gt;&gt;导入random模块
</span><span class="s2">code = &#39;&#39;   将产生的数据拼接到字符串中
</span><span class="s2">for i in range(5):    &gt;&gt;&gt;&gt;&gt;for循环五次
</span><span class="s2">    random_upper = chr(random.randint(65,90))
</span><span class="s2">    &gt;&gt;&gt;&gt;从65-90数字中随机抽取并通过chr转换为数值表达式所表达的字符
</span><span class="s2">    	产生随机的大写字符
</span><span class="s2">    random_lower = chr(random.randint(97,122))
</span><span class="s2">    &gt;&gt;&gt;&gt;产生随机的小写字符
</span><span class="s2">    random_int = str(random.randint(0,9))
</span><span class="s2">    &gt;&gt;&gt;&gt;产生随机数字 并转换为字符串格式
</span><span class="s2">    temp = random.choice([random_supper,random_lower,random_int])
</span><span class="s2">    &gt;&gt;&gt;&gt;三个随机数字随机抽取一个赋值给temp
</span><span class="s2">    code += temp
</span><span class="s2">    &gt;&gt;&gt;&gt; 五位随机数拼接到code中
</span><span class="s2">print(code)
</span><span class="s2">
</span><span class="s2">把封装成函数
</span><span class="s2">def get_code(n)        &gt;&gt;&gt;&gt;需要产生n位的随机验证码，
</span><span class="s2">code = &#39;&#39;   将产生的数据拼接到字符串中
</span><span class="s2">    for i in range(n):    &gt;&gt;&gt;&gt;&gt;for循环五次
</span><span class="s2">        random_upper = chr(random.randint(65,90))
</span><span class="s2">        &gt;&gt;&gt;&gt;从65-90数字中随机抽取并通过chr转换为数值表达式所表达的字符
</span><span class="s2">            产生随机的大写字符
</span><span class="s2">        random_lower = chr(random.randint(97,122))
</span><span class="s2">        &gt;&gt;&gt;&gt;产生随机的小写字符
</span><span class="s2">        random_int = str(random.randint(0,9))
</span><span class="s2">        &gt;&gt;&gt;&gt;产生随机数字 并转换为字符串格式
</span><span class="s2">        temp = random.choice([random_supper,random_lower,random_int])
</span><span class="s2">        &gt;&gt;&gt;&gt;三个随机数字随机抽取一个赋值给temp
</span><span class="s2">        code += temp
</span><span class="s2">        &gt;&gt;&gt;&gt; 五位随机数拼接到code中
</span><span class="s2">    return(code)
</span><span class="s2">
</span><span class="s2">res = get_code(10)
</span><span class="s2">print(res)
</span><span class="s2">&#34;&#34;&#34;</span>

</code></pre></div><h4 id="时间模块">时间模块</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">time           时间模块
</span><span class="s2">datatime       时间日期模块
</span><span class="s2">都是内置模块,可以直接使用
</span><span class="s2">
</span><span class="s2">时间数据三大类型
</span><span class="s2">1。时间戳    &gt;&gt;&gt;&gt;时间戳表达的是从1970.1.1 00：00至今所过的秒数
</span><span class="s2">2.结构化时间（用来给机器识别的）
</span><span class="s2">3.格式化时间（用来给人看的）
</span><span class="s2">
</span><span class="s2">import time   导入时间模块
</span><span class="s2">print(time.time())  获取时间戳
</span><span class="s2">
</span><span class="s2">时间戳可以用来计算某一段代码执行的时间
</span><span class="s2">拿上面的随机验证码模块举例
</span><span class="s2">def get_code(n)        &gt;&gt;&gt;&gt;需要产生n位的随机验证码，
</span><span class="s2">code = &#39;&#39;   将产生的数据拼接到字符串中
</span><span class="s2">    for i in range(n):    &gt;&gt;&gt;&gt;&gt;for循环五次
</span><span class="s2">        random_upper = chr(random.randint(65,90))
</span><span class="s2">        &gt;&gt;&gt;&gt;从65-90数字中随机抽取并通过chr转换为数值表达式所表达的字符
</span><span class="s2">            产生随机的大写字符
</span><span class="s2">        random_lower = chr(random.randint(97,122))
</span><span class="s2">        &gt;&gt;&gt;&gt;产生随机的小写字符
</span><span class="s2">        random_int = str(random.randint(0,9))
</span><span class="s2">        &gt;&gt;&gt;&gt;产生随机数字 并转换为字符串格式
</span><span class="s2">        temp = random.choice([random_supper,random_lower,random_int])
</span><span class="s2">        &gt;&gt;&gt;&gt;三个随机数字随机抽取一个赋值给temp
</span><span class="s2">        code += temp
</span><span class="s2">        &gt;&gt;&gt;&gt; 五位随机数拼接到code中
</span><span class="s2">    return(code)
</span><span class="s2">
</span><span class="s2">start_time = time.time()
</span><span class="s2">res = get_code(10)
</span><span class="s2">print(res)
</span><span class="s2">end_time = time.time()
</span><span class="s2">print(&#39;运行时间：</span><span class="si">%s</span><span class="s2">&#39;%(start_time-end_time))
</span><span class="s2">
</span><span class="s2">格式化时间
</span><span class="s2">res = time.stiftime(&#39;%Y/%m/</span><span class="si">%d</span><span class="s2"> %H:%M:%S&#39;)
</span><span class="s2">print(res)   &gt;&gt;&gt; 2020/11/05 10:13:07
</span><span class="s2">res1 = time.strftime(&#39;%Y/%m/</span><span class="si">%d</span><span class="s2"> </span><span class="si">%X</span><span class="s2">&#39;)
</span><span class="s2">print(res1)   &gt;&gt;&gt;2020/11/05 10:13:07
</span><span class="s2">        
</span><span class="s2">结构化时间
</span><span class="s2">print(time.struct_time((2020,11,11,1,1,1,1,1,1)))
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">import datetime
</span><span class="s2">print(datetime.datetime.today())  # 2020-11-05 10:16:38.606066
</span><span class="s2">print(datetime.date.today())  # 2020-11-05
</span><span class="s2">from datetime import datetime,date
</span><span class="s2">print(datetime.today())
</span><span class="s2">print(date.today())
</span><span class="s2">
</span><span class="s2">date     年月日
</span><span class="s2">datetime    年月日 时分秒
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="加密模块">加密模块</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">import hushlib
</span><span class="s2">
</span><span class="s2">pwd = &#39;eddy666&#39;
</span><span class="s2">
</span><span class="s2">使用md5算法进行加密
</span><span class="s2">md5 = hashlib.md5()
</span><span class="s2">将铭文数据传入md5中
</span><span class="s2">md5.updata(pwd.encode(utf8))   传入的数据必须是二进制类型
</span><span class="s2">获取加密后的密文结果
</span><span class="s2">res = md5.hexdigest()
</span><span class="s2">print(res)
</span><span class="s2">
</span><span class="s2">密文越长则表示加密算法越复杂
</span><span class="s2">
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="面向对象">面向对象</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">什么是对象
</span><span class="s2">	对象就是一系列数据和功能的结合体
</span><span class="s2">    
</span><span class="s2">数据
</span><span class="s2">username = eddy
</span><span class="s2">password = 123
</span><span class="s2">功能
</span><span class="s2">def index():
</span><span class="s2">    print(username,password)
</span><span class="s2">    
</span><span class="s2">数据相当于我们做饭是用的原材料，蔬菜，肉之类的，而功能就是做饭时用到的
</span><span class="s2">锅碗瓢盆，对象则就是二者结合一起的产物
</span><span class="s2">
</span><span class="s2">什么是类
</span><span class="s2">	类是对象公共的数据和功能结合体，用来减少对象内代码的书写
</span><span class="s2">    减少代码冗余
</span><span class="s2">    
</span><span class="s2">    我们可以把同一类对象相同的数据与功能存放在类里，而无需每一个对象都重复存一份，这样每个对象里面就只存自己独有的数据，极大的节省了空间。所以，如果说对象是用来存放数据与功能的容器，那么类则是用来存放多个对象相同的数据与功能的容器。
</span><span class="s2">    &#34;&#34;&#34;</span>
</code></pre></div><h4 id="面对对象与编程">面对对象与编程</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">面对对象编程的基本思路
</span><span class="s2">以开发一个选课系例为例，先考虑学生对象
</span><span class="s2"># 学生的数据有
</span><span class="s2">学校
</span><span class="s2">名字
</span><span class="s2">年龄
</span><span class="s2">性别
</span><span class="s2"># 学生的功能有
</span><span class="s2">选课
</span><span class="s2">
</span><span class="s2"># 学生对象1：
</span><span class="s2">    数据:
</span><span class="s2">        学校=清华大学
</span><span class="s2">        姓名=李建刚
</span><span class="s2">        性别=男
</span><span class="s2">        年龄=28
</span><span class="s2">    功能：
</span><span class="s2">        选课
</span><span class="s2"># 学生对象2：
</span><span class="s2">    数据:
</span><span class="s2">        学校=清华大学
</span><span class="s2">        姓名=王大力
</span><span class="s2">        性别=女
</span><span class="s2">        年龄=18
</span><span class="s2">    功能：
</span><span class="s2">        选课
</span><span class="s2"># 学生对象3：
</span><span class="s2">    数据:
</span><span class="s2">        学校=清华大学
</span><span class="s2">        姓名=牛嗷嗷
</span><span class="s2">        性别=男
</span><span class="s2">        年龄=38
</span><span class="s2">    功能：
</span><span class="s2">        选课
</span><span class="s2">        
</span><span class="s2"># 学生类
</span><span class="s2">    相同的特征:
</span><span class="s2">        学校=清华大学
</span><span class="s2">    相同的功能：
</span><span class="s2">        选课
</span><span class="s2">        
</span><span class="s2">        
</span><span class="s2">★ 代码层面如何定义类
</span><span class="s2">class Student：
</span><span class="s2">	school = &#39;清华大学&#39;
</span><span class="s2">    def choose_course(self):
</span><span class="s2">        pass
</span><span class="s2">    
</span><span class="s2">类的语法结构
</span><span class="s2">1.class 是定义类的关键字
</span><span class="s2">2.Student 是类名 （类名的首字母大写）
</span><span class="s2">3。注释  解释这个类的一些信息
</span><span class="s2">4.类体代码   （就是多个对象公共的数据和功能存放地）
</span><span class="s2">
</span><span class="s2">★代码层面如何产生对象
</span><span class="s2"> 类名+()  即可产生对象
</span><span class="s2">    st1 = Student()
</span><span class="s2">    st2 = Student()
</span><span class="s2">    st3 = Student()
</span><span class="s2">    
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="如何查看对象类一切皆对象里面的名字">如何查看对象/类（一切皆对象）里面的名字</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">如何产看对象/类里面的数据
</span><span class="s2">print(类名.__dict__)  查看类里面所有的名字
</span><span class="s2">print(对象名.__dict__) 查看对象里面的数据
</span><span class="s2">
</span><span class="s2">类
</span><span class="s2">    公共的数据
</span><span class="s2">    公共的功能
</span><span class="s2">对象1
</span><span class="s2">    数据1
</span><span class="s2">    功能1
</span><span class="s2">对象2
</span><span class="s2">    数据1
</span><span class="s2">    功能1
</span><span class="s2">对象3
</span><span class="s2">    数据1
</span><span class="s2">    功能1
</span><span class="s2">三个对象都仅仅只有公共的数据和功能，自己没有独有的数据和功能
</span><span class="s2">
</span><span class="s2">针对双下划线开头双下划綫结尾的变量名我们在读的时候
</span><span class="s2">最标准的读法是 双下xxx
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="如何让对象有自己独有的数据">如何让对象有自己独有的数据</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">就是在定义类的时候在类体代码中加一个__init__即可
</span><span class="s2">class Student:
</span><span class="s2">    school = &#39;老男孩大学&#39;
</span><span class="s2">
</span><span class="s2">    固定写法 让类在产生对象的时候可以让对象有自己独有的数据
</span><span class="s2">    def __init__(self, username, gender, age):
</span><span class="s2">        固定写法 init函数里面有几个形式参数下面就按照固定的句式写几行代码
</span><span class="s2">        self.username = username
</span><span class="s2">        self.gender = gender
</span><span class="s2">        self.age = age
</span><span class="s2">       
</span><span class="s2">    def choose_course(self):
</span><span class="s2">        pass
</span><span class="s2">st1 = Student(&#39;jason&#39;,&#39;male&#39;,18)
</span><span class="s2">st2 = Student(&#39;egon&#39;,&#39;female&#39;,73)
</span><span class="s2">st3 = Student(&#39;alex&#39;,&#39;male&#39;,84)
</span><span class="s2">print(Student.__dict__)
</span><span class="s2">print(st1.__dict__)
</span><span class="s2">print(st2.__dict__)
</span><span class="s2">print(st3.__dict__)
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">{&#39;__module__&#39;: &#39;__main__&#39;, &#39;school&#39;: &#39;老男孩大学&#39;, &#39;__init__&#39;: &lt;function Student.__init__ at 0x0000001D30DA98C8&gt;, &#39;choose_course&#39;: &lt;function Student.choose_course at 0x0000001D30DA9950&gt;, &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;Student&#39; objects&gt;, &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;Student&#39; objects&gt;, &#39;__doc__&#39;: None}
</span><span class="s2">{&#39;username&#39;: &#39;jason&#39;, &#39;gender&#39;: &#39;male&#39;, &#39;age&#39;: 18}
</span><span class="s2">{&#39;username&#39;: &#39;egon&#39;, &#39;gender&#39;: &#39;female&#39;, &#39;age&#39;: 73}
</span><span class="s2">{&#39;username&#39;: &#39;alex&#39;, &#39;gender&#39;: &#39;male&#39;, &#39;age&#39;: 84}
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="如何访问数据">如何访问数据</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">访问对象的数据
</span><span class="s2">使用句点符 . 
</span><span class="s2">eg；
</span><span class="s2">print(st1.username)
</span><span class="s2">print(st2.age)
</span><span class="s2">
</span><span class="s2">访问类的数据
</span><span class="s2">print(Student.School)
</span><span class="s2">
</span><span class="s2">对象直接访问类的数据
</span><span class="s2">print(st1.school)
</span><span class="s2">print(st1.choose_course)
</span><span class="s2">
</span><span class="s2">数据的查找顺序
</span><span class="s2">1.先从对象自己里面找
</span><span class="s2">2.没有匹配数据后才会从类里面的公共数据查找
</span><span class="s2">3.对象的类也找不到则会从类的父类里找
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="绑定方法与非绑定方法">绑定方法与非绑定方法</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">class Student:
</span><span class="s2">    school = &#39;老男孩大学&#39;
</span><span class="s2">    def __init__(self, username, gender, age):
</span><span class="s2">        self.username = username
</span><span class="s2">        self.gender = gender
</span><span class="s2">        self.age = age
</span><span class="s2">     绑定给对象的方法
</span><span class="s2">    def choose_course(self):
</span><span class="s2">        &#39;&#39;&#39;self哪个对象来调用 这个self就指代哪个对象&#39;&#39;&#39;
</span><span class="s2">        print(&#39;self:&#39;,self)
</span><span class="s2">        print(&#39;</span><span class="si">%s</span><span class="s2"> is choosing course&#39;</span><span class="si">%s</span><span class="s2">elf.username)
</span><span class="s2">     绑定给类的方法
</span><span class="s2">    @classmethod
</span><span class="s2">    def get_cls(cls):
</span><span class="s2">        print(cls)
</span><span class="s2">     普通函数
</span><span class="s2">    @staticmethod
</span><span class="s2">    def get_func(self):
</span><span class="s2">        print(self)
</span><span class="s2">
</span><span class="s2">        
</span><span class="s2">类中定义的函数 默认都是绑定给对象的
</span><span class="s2">对象来调 会自动将对象当做第一个参数自动传入
</span><span class="s2">st1.choose_course()  ==   st1.choose_course(st1)
</span><span class="s2">st2.choose_course()  ==   st2.choose_course(st2)
</span><span class="s2">st3.choose_course()  ==   st3.choose_course(st3)
</span><span class="s2">
</span><span class="s2">修改类里面的参数
</span><span class="s2">st1.username = &#39;jasonNBNB&#39;    &gt;&gt;&gt;&gt;&gt;加赋值符号就是设值
</span><span class="s2">print(st1.username)
</span><span class="s2">
</span><span class="s2">类来调 有几个参数就需要自己手动传几个 不会自动传入
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">绑定给类的方法
</span><span class="s2">    类来调会自动将类当做第一个参数传入
</span><span class="s2">    对象来调也不需要传参数 会自动找到该对象的类传入
</span><span class="s2">普通函数
</span><span class="s2">    不管谁来调 都需要自己手动传参数
</span><span class="s2">    
</span><span class="s2">Student.get_cls()   &gt;&gt;&gt;&gt;get_cls  默认绑定给类，自动将类的参数传入函数
</span><span class="s2">print(Student)
</span><span class="s2">st1.get_cls()  
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">Student.get_func()
</span><span class="s2">st1.get_func()     不管谁调用都需要手动输入参数
</span><span class="s2">
</span><span class="s2">总结:
</span><span class="s2">在类中定义的函数我们一般情况下不叫函数
</span><span class="s2">叫方法
</span><span class="s2">在类中的数据我们也不叫数据
</span><span class="s2">叫属性
</span><span class="s2">并且属性有时候既可以指代数据也可以指代功能
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="面向对象的三大特性">面向对象的三大特性</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">1.封装
</span><span class="s1">	将数据和功能封装到了类/对象里面
</span><span class="s1">2.继承
</span><span class="s1">	一个类可以继承多个父类，继承之后就可以拥有该类的一切
</span><span class="s1">3.多态
</span><span class="s1">	一种事物的多种形态
</span><span class="s1">    
</span><span class="s1">封装之隐藏变量
</span><span class="s1">	class MyClass:
</span><span class="s1">    	school = &#39;oldboy&#39;
</span><span class="s1">    	__username = &#39;jason&#39;
</span><span class="s1">		
</span><span class="s1">    obj = MyClass()
</span><span class="s1">    print(obj.school)
</span><span class="s1">    &#39;&#39;&#39;</span>
    <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    在定义类的时候 如果变量名前面加了两个下划线
</span><span class="s1">    那么该变量会变成隐藏变量 外界无法直接访问
</span><span class="s1">    __username      变形成     _MyClass__username
</span><span class="s1">    __变量名        变形成     _类名__变量名
</span><span class="s1">    &#39;&#39;&#39;</span>
    <span class="k">print</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">_MyClass__username</span><span class="p">)</span>
    
 
<span class="s1">&#39;继承&#39;</span>
	<span class="k">class</span> <span class="nc">P1</span><span class="p">:</span>
    <span class="k">pass</span>

    <span class="k">class</span> <span class="nc">P2</span><span class="p">:</span>
        <span class="k">pass</span>

    <span class="k">class</span> <span class="nc">S1</span><span class="p">(</span><span class="n">P1</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">class</span> <span class="nc">S2</span><span class="p">(</span><span class="n">P1</span><span class="p">,</span><span class="n">P2</span><span class="p">):</span>
        <span class="k">pass</span>
    <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    在类定义的时候类名后面可以加括号
</span><span class="s1">    括号里面可以书写你想要继承的类的名字
</span><span class="s1">    并且在python不单单支持单继承
</span><span class="s1">    还支持多继承
</span><span class="s1">    &#39;&#39;&#39;</span>
	<span class="s1">&#39;&#39;&#39;
</span><span class="s1">     如何查看类的父类
</span><span class="s1">     print(S1.__bases__)  # (&lt;class &#39;__main__.P1&#39;&gt;,)
</span><span class="s1">     print(S2.__bases__)  # (&lt;class &#39;__main__.P1&#39;&gt;, &lt;class &#39;__main__.P2&#39;&gt;)
</span><span class="s1">    
</span><span class="s1">     print(P1.__bases__)  # (&lt;class &#39;object&#39;&gt;,)
</span><span class="s1">     print(P2.__bases__)  # (&lt;class &#39;object&#39;&gt;,)
</span><span class="s1">	&#39;&#39;&#39;</span>
    <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    在python3中 类如果没有继承任何的父类
</span><span class="s1">    那么这个类会默认继承object
</span><span class="s1">    &#39;&#39;&#39;</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    经典类
</span><span class="s2">        不继承任何的类包括object
</span><span class="s2">        只有在python2中才有经典类
</span><span class="s2">    新式类
</span><span class="s2">        继承了object或者其子类的类
</span><span class="s2">    
</span><span class="s2">    class PPP(object):
</span><span class="s2">        username = &#39;jason666&#39;
</span><span class="s2">    class PP1(PPP):
</span><span class="s2">        username = &#39;jason4&#39;
</span><span class="s2">
</span><span class="s2">    class PP2(PPP):
</span><span class="s2">        username = &#39;jason5&#39;
</span><span class="s2">
</span><span class="s2">    class PP3(PPP):
</span><span class="s2">        username = &#39;jason6&#39;
</span><span class="s2">
</span><span class="s2">    class P1(PP1):
</span><span class="s2">        username = &#39;jason1&#39;
</span><span class="s2">    class P2(PP2):
</span><span class="s2">        username = &#39;jason2&#39;
</span><span class="s2">    class P3(PP3):
</span><span class="s2">        username = &#39;jason3&#39;
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">    class SS1(P1,P2,P3):
</span><span class="s2">         username = &#39;egon&#39;
</span><span class="s2">         def __init__(self,username):
</span><span class="s2">             self.username = username
</span><span class="s2">        pass
</span><span class="s2">
</span><span class="s2">     obj1 = SS1(&#39;alex&#39;)
</span><span class="s2">     print(obj1.username)
</span><span class="s2">     obj2 = SS1()
</span><span class="s2">     print(obj2.username)
</span><span class="s2">     当多继承的情况发生的时候 我们可以根据mro方法直接确定查找的顺序
</span><span class="s2">    print(SS1.mro())
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    [
</span><span class="s2">    &lt;class &#39;__main__.SS1&#39;&gt;, 
</span><span class="s2">    &lt;class &#39;__main__.P1&#39;&gt;, 
</span><span class="s2">    &lt;class &#39;__main__.P2&#39;&gt;, 
</span><span class="s2">    &lt;class &#39;__main__.P3&#39;&gt;, 
</span><span class="s2">    &lt;class &#39;object&#39;&gt;]
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="s2">&#34;&#34;&#34;
</span><span class="s2">    广度优先(菱形继承)
</span><span class="s2">    [
</span><span class="s2">    &lt;class &#39;__main__.SS1&#39;&gt;,
</span><span class="s2">     &lt;class &#39;__main__.P1&#39;&gt;, 
</span><span class="s2">     &lt;class &#39;__main__.PP1&#39;&gt;, 
</span><span class="s2">     &lt;class &#39;__main__.P2&#39;&gt;, 
</span><span class="s2">     &lt;class &#39;__main__.PP2&#39;&gt;, 
</span><span class="s2">     &lt;class &#39;__main__.P3&#39;&gt;, 
</span><span class="s2">     &lt;class &#39;__main__.PP3&#39;&gt;, 
</span><span class="s2">     &lt;class &#39;__main__.PPP&#39;&gt;, 
</span><span class="s2">     &lt;class &#39;object&#39;&gt;]
</span><span class="s2">    &#34;&#34;&#34;</span>
    
<span class="s2">&#34;&#34;&#34;    
</span><span class="s2">多态
</span><span class="s2">	 我们可以在不考虑三者类型的情况下直接使用统计三个对象的长度
</span><span class="s2">    s.__len__()
</span><span class="s2">    l.__len__()
</span><span class="s2">    t.__len__()
</span><span class="s2">
</span><span class="s2">     Python内置了一个统一的接口
</span><span class="s2">    len(s)
</span><span class="s2">    len(l)
</span><span class="s2">    len(t)
</span><span class="s2">    
</span><span class="s2">  	鸭子类型
</span><span class="s2">    	如果你看上去像鸭子，走路像鸭子，说话像鸭子
</span><span class="s2">        那么你就是鸭子!!!
</span><span class="s2">        
</span><span class="s2">    linux系统一切皆文件
</span><span class="s2">   	二者看起来都像文件,因而就可以当文件一样去用，然而它们并没有直接的关系
</span><span class="s2">    class Txt: #Txt类有两个与文件类型同名的方法，即read和write
</span><span class="s2">        def read(self):
</span><span class="s2">            pass
</span><span class="s2">        def write(self):
</span><span class="s2">            pass
</span><span class="s2">
</span><span class="s2">    class Disk: #Disk类也有两个与文件类型同名的方法：read和write
</span><span class="s2">        def read(self):
</span><span class="s2">            pass
</span><span class="s2">        def write(self):
</span><span class="s2">            pass
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Python之函数分类，形参实参，结构，模块</title>
			<link>https://Eddy-622.github.io/posts/python%E5%87%BD%E6%95%B0%E5%88%86%E7%B1%BB%E5%BD%A2%E5%8F%82%E5%AE%9E%E5%8F%82%E7%BB%93%E6%9E%84%E6%A8%A1%E5%9D%97/</link>
			<pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/python%E5%87%BD%E6%95%B0%E5%88%86%E7%B1%BB%E5%BD%A2%E5%8F%82%E5%AE%9E%E5%8F%82%E7%BB%93%E6%9E%84%E6%A8%A1%E5%9D%97/</guid>
			<description>今日内容概要   函数
认识学会基本的函数定义，基本的函数使用
  模块
  面向对象
认识，学会如何定义类，如何产生对象，基本的面向对象概念，使用
  今日内容详细 函数 &#39;&#39;&#39;函数相对于是工具，能够提前准备好之后在反复的使用，无需重复制造，可以大大的减少我们的工作时间，提高我们的工作效率在python中函数必须要先定义（创造）之后才能使用函数的定义★ 1.函数在定义阶段只检查语法不执行代码def get_user():username = input(&#39;username&amp;gt;&amp;gt;&amp;gt;:&#39;)password = input(&#39;password&amp;gt;&amp;gt;&amp;gt;:&#39;)print(&#39;%s:%s&#39;%(username,password))★2.函数的调用函数名+括号会执行函数体内部的代码get_user()&#39;&#39;&#39;函数的语法结构 &amp;#34;&amp;#34;&amp;#34;函数的语法结构def get_user():&amp;#39;&amp;#39;&amp;#39;注释&amp;#39;&amp;#39;&amp;#39;username = input(&amp;#39;username&amp;gt;&amp;gt;&amp;gt;:&amp;#39;)password = input(&amp;#39;password&amp;gt;&amp;gt;&amp;gt;:&amp;#39;)print(&amp;#39;%s:%s&amp;#39;(username,password))return &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;返回值1.def 是定义函数的关键字2.get_user 是函数名(类似于变量名，起的时候注意做到见名知意)3.(参数1，参数2) 括号里面可以放参数，意思是在调用函数的时候可以给函数的内部传输额外的数据4.参数 外界传递给函数内部的数据（不是必须的）5.函数的注释 用来解释该函数的功能、使用方式、注意事项6.函数体代码 函数真正的功能逻辑7.return 函数执行完毕之后返回给调用者的信息（该关键字也不是必须的）结构def 函数名 (参数1，参数2，...):&amp;#39;&amp;#39;&amp;#39;函数的注释&amp;#39;&amp;#39;&amp;#39;函数体代码return 返回值&amp;#34;&amp;#34;&amp;#34;函数的分类 &amp;#39;&amp;#39;&amp;#39;1.</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>
<p>函数</p>
<p>认识学会基本的函数定义，基本的函数使用</p>
</li>
<li>
<p>模块</p>
</li>
<li>
<p>面向对象</p>
<p>认识，学会如何定义类，如何产生对象，基本的面向对象概念，使用</p>
</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h4 id="函数">函数</h4>
<pre><code class="language-pythom" data-lang="pythom">'''
函数相对于是工具，能够提前准备好之后在反复的使用，无需重复制造，可以大大的减少我们的工作时间，提高我们的工作效率
在python中函数必须要先定义（创造）之后才能使用

函数的定义
★ 1.函数在定义阶段只检查语法不执行代码
def get_user():
    username = input('username&gt;&gt;&gt;:')
    password = input('password&gt;&gt;&gt;:')
    print('%s:%s'%(username,password))
★2.函数的调用
函数名+括号
	会执行函数体内部的代码
	
get_user()
'''
</code></pre><h4 id="函数的语法结构">函数的语法结构</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">函数的语法结构
</span><span class="s2">
</span><span class="s2">def get_user():
</span><span class="s2">    &#39;&#39;&#39;注释&#39;&#39;&#39;
</span><span class="s2">    username = input(&#39;username&gt;&gt;&gt;:&#39;)
</span><span class="s2">    password = input(&#39;password&gt;&gt;&gt;:&#39;)
</span><span class="s2">    print(&#39;</span><span class="si">%s</span><span class="s2">:</span><span class="si">%s</span><span class="s2">&#39;(username,password))
</span><span class="s2">    return     &gt;&gt;&gt;&gt;&gt;返回值
</span><span class="s2">
</span><span class="s2">1.def   是定义函数的关键字
</span><span class="s2">2.get_user  是函数名(类似于变量名，起的时候注意做到见名知意)
</span><span class="s2">3.(参数1，参数2) 括号里面可以放参数，意思是在调用函数的时候可以给函数的内部传输额外的数据
</span><span class="s2">4.参数  外界传递给函数内部的数据（不是必须的）
</span><span class="s2">5.函数的注释  用来解释该函数的功能、使用方式、注意事项
</span><span class="s2">6.函数体代码  函数真正的功能逻辑
</span><span class="s2">7.return   函数执行完毕之后返回给调用者的信息（该关键字也不是必须的）
</span><span class="s2">
</span><span class="s2"> 结构
</span><span class="s2">    def  函数名 (参数1，参数2，...):
</span><span class="s2">        &#39;&#39;&#39;函数的注释&#39;&#39;&#39;
</span><span class="s2">        函数体代码
</span><span class="s2">        return   返回值
</span><span class="s2">&#34;&#34;&#34;</span>

</code></pre></div><h4 id="函数的分类">函数的分类</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">1.无参函数：定义函数的时候括号内没有参数
</span><span class="s1">def index():
</span><span class="s1">    print(&#39;这是一段字符串&#39;)
</span><span class="s1">    
</span><span class="s1">2.有参函数：定义函数的时候括号里有参数，那么在调用该函数的时候也必须传参数
</span><span class="s1">def index(x,y):
</span><span class="s1">    print(x,y)
</span><span class="s1">    
</span><span class="s1">3.空函数：没有具体的函数代码
</span><span class="s1">def index():
</span><span class="s1">    pass
</span><span class="s1">
</span><span class="s1">★空函数多用于做前期的项目架构（空函数列举全部的功能之后再填充函数体代码）
</span><span class="s1">
</span><span class="s1">eg:贾维斯功能开发
</span><span class="s1">函数不单单可以理解为是工具还可以看成是具有一定功能的功能
</span><span class="s1">
</span><span class="s1">def talk():
</span><span class="s1">    pass
</span><span class="s1">def run():
</span><span class="s1">    pass
</span><span class="s1">def fight():
</span><span class="s1">    pass
</span><span class="s1">def read():
</span><span class="s1">    pass
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h4 id="函数的返回值">函数的返回值</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">def index():
</span><span class="s1">    print(&#39;这是一段字符串&#39;)
</span><span class="s1">    return  
</span><span class="s1">1.函数体代码中没有return关键字的时候
</span><span class="s1">res = index()  &gt;&gt;&gt;将index执行之后的返回值（结果）赋值给res
</span><span class="s1">print(res)  &gt;&gt;&gt;None
</span><span class="s1">  结论：没有return关键字函数默认返回None
</span><span class="s1"> 
</span><span class="s1">2.函数体代码中有return关键字但是后面没有值
</span><span class="s1">res = index ()  &gt;&gt;&gt;将index执行之后的返回值(结果)赋值给res
</span><span class="s1">print(res)       &gt;&gt;&gt;&gt;None
</span><span class="s1">  结论：有return关键字但是后面没有值照样返回None
</span><span class="s1">    
</span><span class="s1">3.函数体代码中有return关键字，并且有单个值
</span><span class="s1">def index():
</span><span class="s1">    print(&#39;这是一段字符串&#39;)
</span><span class="s1">    return 123
</span><span class="s1">res = index()   
</span><span class="s1">print(res)  &gt;&gt;&gt;&gt;&gt;  123
</span><span class="s1">	结论：return后面写什么函数就会返回什么
</span><span class="s1">    
</span><span class="s1">4.函数体代码中有return关键字，并且后面有多个值
</span><span class="s1">def index():
</span><span class="s1">    print(&#39;这是一段字符串&#39;)
</span><span class="s1">    return 111，222，333，444
</span><span class="s1">res = index()  
</span><span class="s1">print(res)  &gt;&gt;&gt;&gt;&gt;&gt;(111,222,333,444)
</span><span class="s1">	结论：return后面写多个值，默认自动组织成元组的形式返回
</span><span class="s1">    
</span><span class="s1">★return除了有返回值的功能之外，还有一个功能就是立刻结束函数的运行
</span><span class="s1">类似于break对while循环的作用
</span><span class="s1">当函数体遇到return的时候会立刻结束
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><p>函数的参数概念</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">形式参数
</span><span class="s2">	在函数的定义阶段，括号内写的参数都叫形式参数(类似于变量名)
</span><span class="s2">    	可以简称为形参
</span><span class="s2">def index(x,y):           &gt;&gt;&gt;&gt;(x,y) 都为形式参数
</span><span class="s2">        print(x,y)
</span><span class="s2">
</span><span class="s2">实际参数
</span><span class="s2">	在函数的调用阶段，括号内穿的参数都教实际参数（类似于变量的值）
</span><span class="s2">    	可以简称为实参
</span><span class="s2"> def index(x,y):
</span><span class="s2">        print(x,y)
</span><span class="s2">    index(1,2)           &gt;&gt;&gt;&gt;&gt;&gt;&gt;(1,2)为实际参数
</span><span class="s2">    
</span><span class="s2">形式参数于实际参数之间的联系
</span><span class="s2">	在函数调用阶段括号内传入的实际参数会赋值给形式参数
</span><span class="s2">    当函数运行结束之后两者又会解开关系
</span><span class="s2">     def index(x,y):
</span><span class="s2">        print(x,y) 
</span><span class="s2">    index(1,2)             &gt;&gt;&gt;&gt;&gt; x = 1  y = 2
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="函数的参数">函数的参数</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">位置参数
</span><span class="s2">def index(x,y):
</span><span class="s2">     print(x,y)
</span><span class="s2"> index(111)           &gt;&gt;&gt;&gt;&gt;   报错：给少了不行
</span><span class="s2"> index(111,222)       &gt;&gt;&gt;&gt;&gt;   运行结果：111 222  &gt;&gt;&gt;&gt;要几个就给几个
</span><span class="s2"> index(111,222,333)   &gt;&gt;&gt;&gt;&gt;   报错：给多了也不行
</span><span class="s2">
</span><span class="s2">按照位置的先后顺序传值
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">关键字参数
</span><span class="s2"> def index(x,y,z):
</span><span class="s2">     print(x,y,z)
</span><span class="s2"> index(y=111,x=222)
</span><span class="s2"> index(y=111,222)             &gt;&gt;&gt;&gt;&gt;&gt; 报错  关键字参数必须在位置参数的后面
</span><span class="s2"> index(222,z=666,y=111)       &gt;&gt;&gt;&gt;&gt;&gt;符合
</span><span class="s2"> index(222,x=666,y=111,z=222)  
</span><span class="s2">    
</span><span class="s2">指名道姓的给形式参数传值 可以打破位置的限制
</span><span class="s2">
</span><span class="s2">注意事项
</span><span class="s2">    1.关键字参数必须在位置参数的后面
</span><span class="s2">    2.形式参数在传实际参数的时候不能给多个
</span><span class="s2">
</span><span class="s2">补充
</span><span class="s2">    函数我们有时候也称之为方法
</span><span class="s2">    
</span><span class="s2">   
</span><span class="s2">
</span><span class="s2">默认参数
</span><span class="s2">
</span><span class="s2">在函数定义阶段就已经给形式参数赋值
</span><span class="s2">    当用户不给数据的时候就用默认的
</span><span class="s2">    当用户给了数据的时候就用用户的
</span><span class="s2">    
</span><span class="s2"> def register(username, gender=&#39;male&#39;):   &gt;&gt;&gt;&gt;&gt;这里gender的默认参数为male
</span><span class="s2">     print(&#39;姓名:</span><span class="si">%s</span><span class="s2">,性别:</span><span class="si">%s</span><span class="s2">&#39; % (username, gender))
</span><span class="s2">       则只需要输入姓名，性别默认则为male
</span><span class="s2">       如果不是，则需要手动输入参数
</span><span class="s2">eg：
</span><span class="s2">register(&#39;jason&#39;)
</span><span class="s2">register(&#39;kevin&#39;)
</span><span class="s2">register(&#39;egon&#39;)
</span><span class="s2">register(&#39;queen&#39;,&#39;female&#39;)
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">可变长参数
</span><span class="s2"> def index(x,*y):
</span><span class="s2">     print(&#39;from index&#39;)
</span><span class="s2">     print(&#39;x:&#39;,x)
</span><span class="s2">     print(&#39;y:&#39;,y)
</span><span class="s2"> 无论传多少个位置参数函数都可以正常执行
</span><span class="s2"> index(1,2,2,2,2,2,2,3,4,4,5,6,7,6,4,5,67,5,4,5,6,5)
</span><span class="s2">
</span><span class="s2"> def index(x,**y):
</span><span class="s2">     print(&#39;from index&#39;)
</span><span class="s2">     print(&#39;x:&#39;,x)
</span><span class="s2">     print(&#39;y:&#39;,y)
</span><span class="s2"> 无论传多少个关键参数函数都可以正常执行
</span><span class="s2"> index(1,y=2,z=3,u=1)
</span><span class="s2">
</span><span class="s2">    
</span><span class="s2">*
</span><span class="s2">    在形式参数中，用于接收多余的位置参数
</span><span class="s2">    组织成元祖的形式赋值给*后面的变量名
</span><span class="s2">**
</span><span class="s2">    在形式参数中，用于接收多余的关键字参数
</span><span class="s2">    组织成字典的形式赋值给**后面的变量名
</span><span class="s2">
</span><span class="s2">    
</span><span class="s2">    
</span><span class="s2"> 定义一个函数无论传多少个位置参数和关键字参数都能够正常执行
</span><span class="s2"> def index(*a,**b):
</span><span class="s2">     print(&#39;a:&#39;,a)
</span><span class="s2">     print(&#39;b:&#39;,b)
</span><span class="s2">
</span><span class="s2"> index()
</span><span class="s2"> index(111,222,2,2,2,2,23,3,4,5)
</span><span class="s2"> index(a=1,b=2,c=2)
</span><span class="s2"> index(111,222,33,a=1,d=2)
</span><span class="s2">
</span><span class="s2">    
</span><span class="s2">由于我们以后再写函数的时候不知道该函数将来可能会接收什么参数
</span><span class="s2">所以我们在定义函数的时候一般情况下都是用*和**
</span><span class="s2">并且由于使用频率较高 两个符号后面的变量名我们统一使用
</span><span class="s2">    args
</span><span class="s2">    kwargs
</span><span class="s2">
</span><span class="s2">def index(*args,**kwargs):
</span><span class="s2">    pass
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">
</span><span class="s2"> 补充
</span><span class="s2"> *和**不单单可以在形式参数中使用还可以在实际参数中使用
</span><span class="s2">l = [111,22,33,44,55,]
</span><span class="s2">d = {&#39;a&#39;:111,&#39;b&#39;:222,&#39;c&#39;:333}
</span><span class="s2"> def index1(*a):
</span><span class="s2">     print(a)
</span><span class="s2"> index1(l)  # ([111, 22, 33, 44, 55],)
</span><span class="s2"> index1(*l)  # (111, 22, 33, 44, 55)
</span><span class="s2"> 等价
</span><span class="s2"> index1(111,22,33,44,55)  # (111, 22, 33, 44, 55)
</span><span class="s2">
</span><span class="s2">    
</span><span class="s2">def index2(*args,**kwargs):
</span><span class="s2">    print(args)
</span><span class="s2">    print(kwargs)
</span><span class="s2">index2(d)  # ({&#39;a&#39;: 111, &#39;b&#39;: 222, &#39;c&#39;: 333},)
</span><span class="s2">index2(**d)  # {&#39;a&#39;: 111, &#39;b&#39;: 222, &#39;c&#39;: 333}
</span><span class="s2"> 等价
</span><span class="s2">index2(a=111,b=222,c=333)  # {&#39;a&#39;: 111, &#39;b&#39;: 222, &#39;c&#39;: 333}
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">*
</span><span class="s2">    在实际参数中会将列表中的元素打散成位置参数的形式
</span><span class="s2">    挨个传入函数
</span><span class="s2">
</span><span class="s2">**
</span><span class="s2">    在实际参数中会将字典的k:v键值对打散成关键字参数
</span><span class="s2">    挨个传入函数
</span><span class="s2">&#34;&#34;&#34;</span>     
</code></pre></div><h4 id="函数小练习">函数小练习</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 注册登录功能</span>
<span class="s1">&#39;&#39;&#39;体会编程魅力&#39;&#39;&#39;</span>
<span class="k">def</span> <span class="nf">get_user</span><span class="p">():</span>
    <span class="n">username</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;username&gt;&gt;&gt;:&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
    <span class="n">password</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;password&gt;&gt;&gt;:&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">username</span><span class="p">,</span> <span class="n">password</span>


<span class="k">def</span> <span class="nf">register</span><span class="p">():</span>
    <span class="c1"># 解压赋值</span>
    <span class="n">user</span><span class="p">,</span> <span class="n">pwd</span> <span class="o">=</span> <span class="n">get_user</span><span class="p">()</span>
    <span class="c1"># 将数据存入文件</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;userinfo.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%s</span><span class="s1">:</span><span class="si">%s</span><span class="se">\n</span><span class="s1">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">pwd</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">login</span><span class="p">():</span>
    <span class="n">user</span><span class="p">,</span> <span class="n">pwd</span> <span class="o">=</span> <span class="n">get_user</span><span class="p">()</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;userinfo.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
            <span class="c1"># print(line)  # jason:123</span>
            <span class="c1"># 字符串的切割</span>
            <span class="n">name</span><span class="p">,</span><span class="n">password</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">user</span> <span class="o">==</span> <span class="n">name</span> <span class="ow">and</span> <span class="n">password</span> <span class="o">==</span> <span class="n">pwd</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="s1">&#39;登录成功&#39;</span><span class="p">)</span>
                <span class="k">break</span>       <span class="c1"># 直接结束for循环</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s1">&#39;用户名或密码错误/用户不存在&#39;</span><span class="p">)</span>


<span class="c1"># 注册</span>
<span class="c1"># register()</span>
<span class="c1"># 登录</span>
<span class="n">login</span><span class="p">()</span>
</code></pre></div><h4 id="模块">模块</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">模块你可以看成是已经写好的具有一定功能的代码块
</span><span class="s2">模块的表现形式可以是单个的py文件，也可以是多个py文件组成的文件夹
</span><span class="s2">
</span><span class="s2">
</span><span class="s2">使用方式
</span><span class="s2">	1.内置的(python解释器自带的)
</span><span class="s2">    	import os
</span><span class="s2">    2.自己写的
</span><span class="s2">        import mydd  # 将mydd内所有的变量全部导入
</span><span class="s2">        from mydd import name  # 从mydd中只导入一个name变量
</span><span class="s2">
</span><span class="s2">    导入模块其实会自动执行模块文件内的所有代码
</span><span class="s2">    之后通过模块名的形式就可以直接使用模块内所有的功能
</span><span class="s2">
</span><span class="s2">3.导入第三方(存于网上)
</span><span class="s2">    	要想第三方模块必须先下载
</span><span class="s2">        pip3 
</span><span class="s2">        pip3 install requests  # 默认是去国外的仓库下载 速度会比较慢
</span><span class="s2">        针对下载地址我们可以有以下几种方式修改
</span><span class="s2">        （1）阿里云 http://mirrors.aliyun.com/pypi/simple/
</span><span class="s2">        （2）豆瓣http://pypi.douban.com/simple/
</span><span class="s2">        （3）清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/
</span><span class="s2">        （4）中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/
</span><span class="s2">        （5）华中科技大学http://pypi.hustunique.com/
</span><span class="s2">            
</span><span class="s2">         方式1 
</span><span class="s2">        pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple/ requests
</span><span class="s2">         方式2
</span><span class="s2">        pycharm快捷方式修改
</span><span class="s2">         方式3(修改python的配置文件)
</span><span class="s2">        不建议修改
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="模块的使用">模块的使用</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">import random
</span><span class="s2">
</span><span class="s2"># 内置的 随机模块
</span><span class="s2"># print(random.random())  # 0-1之间的随机小数
</span><span class="s2"># print(random.randint(1,6))  # 1-6之间的整数  类似于摇骰子
</span><span class="s2"># l = [2, 3, 4, 5, 6, 7, 8, 9, 10, &#39;J&#39;, &#39;Q&#39;, &#39;K&#39;, &#39;A&#39;]
</span><span class="s2"># random.shuffle(l)  # 洗牌功能  打乱原来的顺序
</span><span class="s2"># print(l)
</span><span class="s2">l1 = [&#39;三等奖&#39;,&#39;二等奖&#39;,&#39;一等奖&#39;,&#39;谢谢惠顾&#39;,&#39;如花抱回家&#39;]
</span><span class="s2">res = random.choice(l1)  # 随机抽取
</span><span class="s2">print(res)
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Python之字符编码，字符处理，文件处理，文件操作</title>
			<link>https://Eddy-622.github.io/posts/python%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
			<pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/python%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
			<description>今日内容概要   字符编码的概念
  文件处理
用python代码来操作文件的创建、书写、修改
  函数
  模块
  面向对象
python本质就是一门面向对象的编程语言
  今日内容详细 知识补充
​	布尔值为False的情况有哪些
​	0 、None 、 &#39;&amp;rsquo; 、[ ] 、 { }
字符编码 &amp;#39;&amp;#39;&amp;#39;有时候当我们打开一个文件的时候发现展示的内容是一段乱码，这种情况是如何产生的，以及如何解决字符编码的研究只针对文本文件，视频音频文件没有字符一说，不在研究范围之内知识回顾1、软件运行前，软件的代码及其相关数据都是存放于硬盘中的2、任何软件的启动都是将数据从硬盘中读入内存，然后cpu从内存中取出指令并执行3、软件运行过程中产生的数据最先都是存放于内存中的，若想永久保存软件产生的数据，则需要将数据由内存写入硬盘普通的文本编辑器阶段1、启动一个文件编辑器（文本编辑器如nodepad++，pycharm，word）阶段2、文件编辑器会将文件内容从硬盘读入内存阶段3、文本编辑器会将刚刚读入内存中的内容显示到屏幕上python解释器阶段1、启动python解释器，此时就相当于启动了一个文本编辑器阶段2、python解释器相当于文本编辑器，从硬盘上将test.py的内容读入到内存中阶段3、python解释器解释执行刚刚读入的内存的内容，开始识别python语法 文本编辑器和python解释器的异同点1、相同点：前两个阶段二者完全一致，都是将硬盘中文件的内容读入内存，详解如下python解释器是解释执行文件内容的，因而python解释器具备读py文件的功能，这一点与文本编辑器一样2、不同点：在阶段3时，针对内存中读入的内容处理方式不同，详解如下文本编辑器将文件内容读入内存后，是为了显示或者编辑，根本不去理会python的语法，而python解释器将文件内容读入内存后，可不是为了给你瞅一眼python代码写的啥，而是为了执行python代码、会识别python语法）计算机由于是基于电工作的，只能识别识别010101二进制数据，但是我们人在使用计算机的时候却可以使用各式各样的文字语言人类的字符	转换过程	二进制数字&amp;#39;&amp;#39;&amp;#39;字符编码发展史 &amp;#39;&amp;#39;&amp;#39;计算机起源于美国美国人用的是英文，而计算机只认识二进制，美国人需要解决英文字符和二进制之间的转换关系(ASCII码)&amp;#34;&amp;#34;&amp;#34;8bit = 1bytes1024bytes = 1KB1024KB = 1MB1024MB = 1GB&amp;#34;&amp;#34;&amp;#34;一家独大ASCII码记录了英文字符和数字之间的转换关系用8位来来表示一个英文字符2**8(其实2的7次方足以表示所有的英文字符，但是考虑到后续可能会出现新的语言，所以留了一位备用)群雄割据自己得开发一套自己的字符编码表中国人GBK编码表记录了中文字符、英文字符跟数字的对应关系用16位来表示一个中文字符，针对英文字符还是用8位(针对生僻字我们可能会使用更高位数来表示)韩国人Euc_kr编码表记录了韩文、英文跟数字的对应关系日本人shift_JIS编码表记录了日文、英文跟数字的对应关系# 每个国家自己使用自己的编码，无法实现国家之间数据的交互&amp;#34;&amp;#34;&amp;#34;在中国电脑上使用GBK编写的文件基于网络发送给日本人打开的时候使用的是shift_JIS编码表，会造成文件乱码现象&amp;#34;&amp;#34;&amp;#34;天下一统为了解决群雄割据的局面，实现数据的统一思想unicode编码表	万国码兼容所有国家的所有编码统一使用16位即2bytes表示数据(针对生僻字会采用更多的位数)我们现在之所以能够在一台计算机上敲出各个国家的文字就是因为我们计算机内存中使用的是unicode编码表unicode的弊端，针对纯英文的文件存储空间会翻倍，随之而来的等待时间也会翻倍这个是我们无法容忍的utf8 万国码的转换格式它是存在与硬盘中的(内存使用unicode硬盘使用utf8)针对中文使用3bytes英文使用1bytes当我们书写文件的时候编码默认使用utf8即可，目前绝大多数的软件使用的都是utf8&amp;#39;&amp;#39;&amp;#39;字符编码和要掌握的内容 变量名.</description>
			<content type="html"><![CDATA[<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>
<p>字符编码的概念</p>
</li>
<li>
<p>文件处理</p>
<p>用python代码来操作文件的创建、书写、修改</p>
</li>
<li>
<p>函数</p>
</li>
<li>
<p>模块</p>
</li>
<li>
<p>面向对象</p>
<p>python本质就是一门面向对象的编程语言</p>
</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<p>知识补充</p>
<p>​	布尔值为False的情况有哪些</p>
<p>​		0 、None 、 '&rsquo;   、[  ]   、 { }</p>
<h3 id="字符编码">字符编码</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;有时候当我们打开一个文件的时候发现展示的内容是一段乱码，这种情况是如何产生的，以及如何解决
</span><span class="s1">
</span><span class="s1">字符编码的研究只针对文本文件，视频音频文件没有字符一说，不在研究范围之内
</span><span class="s1">
</span><span class="s1">知识回顾
</span><span class="s1">1、软件运行前，软件的代码及其相关数据都是存放于硬盘中的
</span><span class="s1">2、任何软件的启动都是将数据从硬盘中读入内存，然后cpu从内存中取出指令并执行
</span><span class="s1">3、软件运行过程中产生的数据最先都是存放于内存中的，若想永久保存软件产生的数据，则需要将数据由内存写入硬盘
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">普通的文本编辑器
</span><span class="s1">阶段1、启动一个文件编辑器（文本编辑器如nodepad++，pycharm，word）
</span><span class="s1">阶段2、文件编辑器会将文件内容从硬盘读入内存
</span><span class="s1">阶段3、文本编辑器会将刚刚读入内存中的内容显示到屏幕上
</span><span class="s1">python解释器
</span><span class="s1">阶段1、启动python解释器，此时就相当于启动了一个文本编辑器
</span><span class="s1">阶段2、python解释器相当于文本编辑器，从硬盘上将test.py的内容读入到内存中
</span><span class="s1">阶段3、python解释器解释执行刚刚读入的内存的内容，开始识别python语法 
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">文本编辑器和python解释器的异同点
</span><span class="s1">1、相同点：前两个阶段二者完全一致，都是将硬盘中文件的内容读入内存，详解如下
</span><span class="s1">python解释器是解释执行文件内容的，因而python解释器具备读py文件的功能，这一点与文本编辑器一样
</span><span class="s1">2、不同点：在阶段3时，针对内存中读入的内容处理方式不同，详解如下
</span><span class="s1">文本编辑器将文件内容读入内存后，是为了显示或者编辑，根本不去理会python的语法，而python解释器将文件内容读入内存后，可不是为了给你瞅一眼python代码写的啥，而是为了执行python代码、会识别python语法）
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">计算机由于是基于电工作的，只能识别识别010101二进制数据，但是我们人在使用计算机的时候却可以使用各式各样的文字语言
</span><span class="s1">	人类的字符			转换过程				二进制数字&#39;&#39;&#39;</span>
</code></pre></div><h4 id="字符编码发展史">字符编码发展史</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;计算机起源于美国
</span><span class="s1">	美国人用的是英文，而计算机只认识二进制，美国人需要解决英文字符和二进制之间的转换关系(ASCII码)
</span><span class="s1">&#34;&#34;&#34;
</span><span class="s1">8bit = 1bytes
</span><span class="s1">1024bytes = 1KB
</span><span class="s1">1024KB = 1MB
</span><span class="s1">1024MB = 1GB
</span><span class="s1">&#34;&#34;&#34;
</span><span class="s1">    
</span><span class="s1">    
</span><span class="s1">一家独大
</span><span class="s1">	ASCII码
</span><span class="s1">    	记录了英文字符和数字之间的转换关系
</span><span class="s1">        	用8位来来表示一个英文字符
</span><span class="s1">            	2**8(其实2的7次方足以表示所有的英文字符，但是考虑到后续可能会出现新的语言，所以留了一位备用)
</span><span class="s1">		
</span><span class="s1">群雄割据
</span><span class="s1">	自己得开发一套自己的字符编码表
</span><span class="s1">	中国人
</span><span class="s1">    	GBK编码表
</span><span class="s1">        记录了中文字符、英文字符跟数字的对应关系
</span><span class="s1">        	用16位来表示一个中文字符，针对英文字符还是用8位
</span><span class="s1">        	(针对生僻字我们可能会使用更高位数来表示)
</span><span class="s1">    韩国人
</span><span class="s1">    	Euc_kr编码表
</span><span class="s1">        记录了韩文、英文跟数字的对应关系
</span><span class="s1">    日本人
</span><span class="s1">    	shift_JIS编码表
</span><span class="s1">        记录了日文、英文跟数字的对应关系
</span><span class="s1">	# 每个国家自己使用自己的编码，无法实现国家之间数据的交互
</span><span class="s1">    &#34;&#34;&#34;在中国电脑上使用GBK编写的文件基于网络发送给日本人
</span><span class="s1">    打开的时候使用的是shift_JIS编码表，会造成文件乱码现象
</span><span class="s1">    &#34;&#34;&#34;
</span><span class="s1">    
</span><span class="s1">天下一统
</span><span class="s1">	为了解决群雄割据的局面，实现数据的统一思想
</span><span class="s1">    unicode编码表		万国码
</span><span class="s1">    	兼容所有国家的所有编码
</span><span class="s1">       	统一使用16位即2bytes表示数据(针对生僻字会采用更多的位数)
</span><span class="s1">    我们现在之所以能够在一台计算机上敲出各个国家的文字就是因为我们计算机内存中使用的是unicode编码表
</span><span class="s1">    
</span><span class="s1">    unicode的弊端，针对纯英文的文件存储空间会翻倍，随之而来的等待时间也会翻倍这个是我们无法容忍的
</span><span class="s1">    
</span><span class="s1">    utf8 万国码的转换格式
</span><span class="s1">    	它是存在与硬盘中的
</span><span class="s1">        (内存使用unicode硬盘使用utf8)
</span><span class="s1">        	针对中文使用3bytes英文使用1bytes
</span><span class="s1">            
</span><span class="s1">当我们书写文件的时候编码默认使用utf8即可，目前绝大多数的软件使用的都是utf8&#39;&#39;&#39;</span>
</code></pre></div><h4 id="字符编码和要掌握的内容">字符编码和要掌握的内容</h4>
<p><strong>变量名.encode(&lsquo;utf-8&rsquo;)  &raquo;&raquo;&raquo;   使用utf8格式编码</strong></p>
<p><strong>变量名.decode(&lsquo;utf-8&rsquo;)  &raquo;&raquo;&raquo;  使用utf-8 格式解码</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;1.解决乱码的核心就是在于用什么编码编的就用什么码来解
</span><span class="s2">2.代码层面如何用数据进行编码与解码
</span><span class="s2">	基于网络传输数据，数据必须是bytes格式（二进制格式）
</span><span class="s2">    
</span><span class="s2">eg： info = &#39;这是一段字符串&#39;
</span><span class="s2">	把字符串按照指定的编码编成bytes格式
</span><span class="s2">    res = info.encoude(&#39;utf-8&#39;)
</span><span class="s2">    print(res)   &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;此时res所待变的则就是经过utf8转码后的二进制码
</span><span class="s2">    
</span><span class="s2">    在python中如果字符串有一个b，则说明该数据类型为bytes类型
</span><span class="s2">    python中的bytes类型你可以直接看成是二进制数据
</span><span class="s2">	
</span><span class="s2">    将bytes类型的数据按照指定的编码解析成人类可读的数据
</span><span class="s2">    res1 = res.decode(&#39;utf_8&#39;)
</span><span class="s2">    print(res1)
</span><span class="s2">    
</span><span class="s2">3.python2版本和python3版本默认的字符编码是不一致的
</span><span class="s2">	python2版本出来的时候还没有unicode，python2内部采用的是ASCII
</span><span class="s2">    python3版本默认的则为utf8
</span><span class="s2">    
</span><span class="s2">    针对python2我们在书写字符串的时候会采用
</span><span class="s2">    1.文件头的形式
</span><span class="s2">    	coding:utf8
</span><span class="s2">    2.在所有的字符串前面加上字母u
</span><span class="s2">    	info = u&#39;这是一段字符串&#39;&#34;&#34;&#34;</span>
</code></pre></div><h4 id="文件处理">文件处理</h4>
<div class="highlight"><pre class="chroma"><code class="language-PYTHON" data-lang="PYTHON"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">什么是文件？
</span><span class="s2">	文件就是用来帮助我们保存数据的
</span><span class="s2">    文件的本质其实就是操作系统给我们封装的一个用来操作计算机硬盘的快捷工具
</span><span class="s2">    
</span><span class="s2">文件的操作
</span><span class="s2">（了解）
</span><span class="s2">file = open(r&#39;a.txt&#39;,&#39;r&#39;,encoding=&#39;utf-8&#39;)  &gt;&gt;&gt;&gt;&gt;&gt; 此处的r作用为防止路径中的\与字母                &gt;&gt;&gt;打开文件                被解释为特殊含义，从而出现代码错误。
</span><span class="s2">file.close()   &gt;&gt;&gt;&gt;关闭文件
</span><span class="s2">
</span><span class="s2">with   上下文管理
</span><span class="s2">with open(r&#39;a.txt&#39;,&#39;r&#39;,encoding=&#39;utf-8&#39;) as f: 
</span><span class="s2">       							  &gt;&gt;&gt;&gt;&gt;这里的f就是一个变量名用来指代open的结果
</span><span class="s2">     res = f.read()
</span><span class="s2">     print(res)
</span><span class="s2">固定句式
</span><span class="s2">with open(r&#39;文件路径&#39;(必需),&#39;读写模式&#39;(必需),encoding(不是必需的)) as 变量名:
</span><span class="s2">    缩进的代码用于操作文件
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="文件的打开方式">文件的打开方式</h4>
<p>​	r	 	只读模式</p>
<p>​	w		只写模式</p>
<p>​	a		只追加写模式</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">r 模式打开文件的时候若输入的文件名不存在则直接报错
</span><span class="s2">witn open(r&#39;b.txt&#39;, &#39;r&#39;, encoding=&#39;utf8&#39;) as f:
</span><span class="s2">    pass      &gt;&gt;&gt;&gt;&gt;&gt;此处pass的本身没有任何意义，用来补全代码结构
</span><span class="s2">文件名存在：r模式会以只读的形式打开文件
</span><span class="s2">with open(r&#39;a.txt&#39;, &#39;r&#39;, encoding= &#39;utf8&#39;) as = f:
</span><span class="s2">    data = f.read()			&gt;&gt;&gt;&gt;&gt;读取文件内的所有数据
</span><span class="s2">    print(data)
</span><span class="s2">    
</span><span class="s2">w 模式
</span><span class="s2">若输入的文件名不存在， w 模式会自动帮你创建新文件并重命名
</span><span class="s2">with open(r &#39;b.txt&#39;, &#39;w&#39;, encoding= &#39;utf8&#39;) as = f:
</span><span class="s2">    pass   &gt;&gt;&gt;&gt;&gt;补全代码
</span><span class="s2"> 文件名存在:w模式会以只写的形式打开文件(先清空文件再写入容)
</span><span class="s2"> with open(r&#39;a.txt&#39;, &#39;w&#39;, encoding=&#39;utf8&#39;) as f:
</span><span class="s2">     f.write(&#39;哈哈哈哈</span><span class="se">\n</span><span class="s2">&#39;)
</span><span class="s2">     f.write(&#39;哈哈哈哈</span><span class="se">\n</span><span class="s2">&#39;)
</span><span class="s2">     f.write(&#39;哈哈哈哈&#39;)
</span><span class="s2">        
</span><span class="s2">       
</span><span class="s2">a模式
</span><span class="s2">文件名不存在，a模式会帮你创建文件
</span><span class="s2">with open(r &#39;c.txt&#39;, &#39;a&#39;, encoding=&#39;utf8&#39;) as = f:
</span><span class="s2">    pass
</span><span class="s2">文件名存在，a模式会以只追加写的形式打开文件（不会清空原文件的内容）
</span><span class="s2"> with open(r&#39;a.txt&#39;, &#39;a&#39;, encoding=&#39;utf8&#39;) as f:
</span><span class="s2">	 f.write(&#39;嘿嘿嘿&#39;)&#34;&#34;&#34;</span>
</code></pre></div><h4 id="文件操作的常用方法">文件操作的常用方法</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">read()    &gt;&gt;&gt;&gt;&gt;&gt;读取文件操作
</span><span class="s1">	1.执行完read方法之后光标会停留在文件末尾，再次读取时就没有内容了
</span><span class="s1">    2.当文件特别大的时候，执行read可能会造成内存溢出（撑爆了）
</span><span class="s1">    	推荐
</span><span class="s1">        	for循环文件对象
</span><span class="s1">write()    &gt;&gt;&gt;&gt;&gt;&gt;&gt;写入文件内容
</span><span class="s1">readable()  &gt;&gt;&gt;&gt;&gt;&gt;判断文件是否可读
</span><span class="s1">f.writable() &gt;&gt;&gt;&gt;&gt;判断文件是否可写
</span><span class="s1">f.readline() &gt;&gt;&gt;&gt;&gt;&gt;只读一行数据
</span><span class="s1">f.readlines()  &gt;&gt;&gt;&gt;&gt;将文件内容全部读取出来并且组织成列表的形式
</span><span class="s1">f.writelines([]) &gt;&gt;&gt;&gt;&gt;一次性将列表多个元素全部写入文件
</span><span class="s1">f.flush()   &gt;&gt;&gt;&gt;&gt;&gt;&gt;将内存中的数据立刻刷到硬盘上
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h4 id="文件的操作模式">文件的操作模式</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">t    文本模式
</span><span class="s1">		该模式也是默认的模式
</span><span class="s1">    r   rt
</span><span class="s1">    w   wt
</span><span class="s1">    a   at
</span><span class="s1">  1.该模式只能用于文本文件
</span><span class="s1">  2，该模式读写都市以字符串为单位
</span><span class="s1">  3.该模式必须要有encoding参数
</span><span class="s1">
</span><span class="s1">b    二进制（bytes）模式
</span><span class="s1">	1.该模式可以用于任意的文件
</span><span class="s1">    2.该模式读写都是以butes为单位
</span><span class="s1">    3.该模式不一定要有encoding参数
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h4 id="控制光标的移动">控制光标的移动</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">f.seek(offset,whence)
</span><span class="s2">	offset:移动量
</span><span class="s2">    whence:模式
</span><span class="s2">        	0:可以在t和b使用(相对于文件开头)
</span><span class="s2">            1:只能在b模式使用(相对于光标所在的位置)
</span><span class="s2">            2:只能在b模式使用(相对于文件末尾)
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="文件的修改">文件的修改</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">eg:   文件 b.txt  内容为  my name is egon ，my age is 18.
</span><span class="s2">    将文件中的egon修敢为jason
</span><span class="s2">    with open(r &#39;b.txt&#39;,&#39;r&#39;,encoding=&#39;utf8&#39;) as = f: 
</span><span class="s2">         &gt;&gt;&gt;&gt;&gt;&gt;以只读模式打开文件b.txt并赋值在变量f上
</span><span class="s2">        data = f.read()   &gt;&gt;&gt;&gt;&gt;读取文件的内容并赋值给变量data
</span><span class="s2">    with open(r &#39;b.txt&#39;,&#39;w&#39;,encoding = &#39;utf8&#39;) as = f:
</span><span class="s2">           &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;以只写模式打开b.txt文件并赋值在变量f上
</span><span class="s2">        res = data.replace(&#39;egon&#39;,&#39;jason&#39;)   &gt;&gt;&gt;&gt;&gt;&gt;字符串的替换（替换数据）
</span><span class="s2">        f.write(res)     &gt;&gt;&gt;&gt;&gt;&gt;&gt;写入数据   
</span><span class="s2">        
</span><span class="s2">        
</span><span class="s2">方式二：
</span><span class="s2">先创建一个新文件，将老文件内容写入新文件
</span><span class="s2">将老文件删除并重命名新文件名为老文件名
</span><span class="s2">import os
</span><span class="s2">
</span><span class="s2">with open(r&#39;b.txt&#39;, &#39;r&#39;, encoding=&#39;utf-8&#39;) as read_f, \
</span><span class="s2">        open(r&#39;b_backend.txt&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as write_f:
</span><span class="s2">    for line in read_f:
</span><span class="s2">        write_f.write(line.replace(&#39;jason&#39;, &#39;jasonDSB&#39;))
</span><span class="s2">
</span><span class="s2">        
</span><span class="s2">os.remove (&#39;b.txt&#39;)   &gt;&gt;&gt;&gt;将原文件删除
</span><span class="s2">os.rename(&#39;b_backend.txt , &#39;b.txt)   &gt;&gt;&gt;&gt;&gt;重命名
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="作业">作业</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;1.基于做题作业的第二道题扩展新功能(思考)
</span><span class="s1">	当用户输错三次之后，提示用户是否继续尝试
</span><span class="s1">    (y/n),用户如果想继续尝试则再给用户三次机会
</span><span class="s1">    不想尝试则退出程序&#39;&#39;&#39;</span>
    
    <span class="n">user_name</span> <span class="o">=</span> <span class="s1">&#39;Eddy&#39;</span>
<span class="n">pass_word</span> <span class="o">=</span> <span class="s1">&#39;123&#39;</span>
<span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">num1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">user_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;user_name&gt;&gt;&gt;:&#39;</span><span class="p">)</span>
    <span class="n">pass_word</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;pass_word&gt;&gt;&gt;:&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">user_name</span> <span class="o">==</span> <span class="s1">&#39;Eddy&#39;</span> <span class="ow">and</span> <span class="n">pass_word</span> <span class="o">==</span> <span class="s1">&#39;123&#39;</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;登录成功&#39;</span><span class="p">)</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">break</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;用户名或密码错误&#34;</span><span class="p">)</span>
        <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;剩余输入次数&#39;</span><span class="p">,</span> <span class="mi">3</span> <span class="o">-</span> <span class="n">num</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s1">&#39;失败次数过多，是否继续尝试，三次机会！&#39;</span><span class="p">)</span>
            <span class="n">rest</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;失败次数过多，是否继续尝试:[y/n]&#39;</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">rest</span> <span class="ow">is</span> <span class="s1">&#39;y&#39;</span><span class="p">:</span>
                <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                    <span class="n">user_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;user_name&gt;&gt;&gt;:&#39;</span><span class="p">)</span>
                    <span class="n">pass_word</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;pass_word&gt;&gt;&gt;:&#39;</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">user_name</span> <span class="o">==</span> <span class="s1">&#39;Eddy&#39;</span> <span class="ow">and</span> <span class="n">pass_word</span> <span class="o">==</span> <span class="s1">&#39;123&#39;</span><span class="p">:</span>
                        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;登录成功&#39;</span><span class="p">)</span>
                        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                            <span class="k">break</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;用户名或密码错误&#34;</span><span class="p">)</span>
                        <span class="n">num1</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;剩余输入次数&#39;</span><span class="p">,</span> <span class="mi">3</span> <span class="o">-</span> <span class="n">num1</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">num1</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
                        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;死去吧&#39;</span><span class="p">)</span>
                        <span class="k">break</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">break</span>

    
    
<span class="s1">&#39;&#39;&#39;2.参考代码完善功能(拔高题)
</span><span class="s1">	# 拷贝数据
</span><span class="s1">	with open(r&#39;111.jpg&#39;,&#39;rb&#39;) as rf,open(r&#39;222.jpg&#39;,&#39;wb&#39;) as wf:
</span><span class="s1">    # 读取111.jpg数据写入222.jpg
</span><span class="s1">    for line in rf:
</span><span class="s1">        wf.write(line)
</span><span class="s1">   1.针对拷贝出来的文件存放位置，用户可以自定义
</span><span class="s1">   2.针对被拷贝文件也让用户自定义选择(思考即可)&#39;&#39;&#39;</span>

</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Python之While循环，for循环，嵌套，数据类型的内置</title>
			<link>https://Eddy-622.github.io/posts/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%86%85%E7%BD%AEwhile%E5%BE%AA%E7%8E%AFfor%E5%BE%AA%E7%8E%AF/</link>
			<pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%86%85%E7%BD%AEwhile%E5%BE%AA%E7%8E%AFfor%E5%BE%AA%E7%8E%AF/</guid>
			<description>上周内容回顾 数据类型 &amp;#39;&amp;#39;&amp;#39;布尔值 bool布尔值的命名传统前面加上is_eg: is_deleteis_status元组 tuplet = (1,2,3,4,5)当容器类型里面只有一个元素的时候也应该将逗号加上集合 sets = {1,2,3,4,5}&amp;#39;&amp;#39;&amp;#39;可变类型与不可变类型 &amp;#39;&amp;#39;&amp;#39; 查询数值的内存地址id()可变类型（列表，字典）值改变内存地址不变不可变类型（整型，浮点型，字符串）值改变内存地址一定变&amp;#39;&amp;#39;&amp;#39;用户交互 &amp;#39;&amp;#39;&amp;#39;获取用户输入inputinput获取到的数据都是字符串类型输出结果print可以一次性输出多个元素，逗号隔开即可&amp;#39;&amp;#39;&amp;#39;格式化输出 &amp;#39;&amp;#39;&amp;#39;占位符 ： %s(可以给任意的数据类型占位)。d%(只能给数字占位)&amp;#39;my name is %sand my age is s%&amp;#39; (Eddy, 18)字符串里有几个占位符，后面给数据的时候就要给出几个真实数据&amp;#39;&amp;#39;&amp;#39;运算符 &amp;#39;&amp;#39;&amp;#39;基本运算符+-*/%**增量赋值x += 1x -= 1x *= 1x /= 1链式赋值a = b = c = 666交叉赋值m = 10n = 999交换m 和 n 的数值方式一利用中间变量tum = mm = n n = tum方式二交叉赋值m,n = n,m解压赋值l = [11,22,33]默认情况下左右两边的个数一定要相等有多少个值就要给多少个变量名a ,b,c = l利用*打破变量名数量的限制a,*_,b = l*_常用来表达无用的数据逻辑运算and or notand连接多个条件，且必须成立，输出结果才为True，有一个条件不成立直接结束，输出Flaseor与and恰恰相反，链接的结果只要一个成立，结果都为True。有一个成立则直接输出结果Truenot取反 not True = Flase身份运算is判断地址是否相等==判断值是否想同值相同内存地址可能不同内存地址相同值一定相同&amp;#39;&amp;#39;&amp;#39;代码的缩进 &amp;#39;&amp;#39;&amp;#39;python中利用代码的缩进来表示代码的从属关系并不是所有的代码都可以又子代码的权限属于同一个代码的多个子代码，子代码之间的缩进必须是相同的遇到冒号说明接下来的代码需要缩进&amp;#39;&amp;#39;&amp;#39;流程控制值if判断 &amp;#39;&amp;#39;&amp;#39;if的固定句式if 条件1:代码1代码2elif 条件2:代码1代码2elif 条件3:代码1代码2else :代码1代码2那个条件成立就会执行哪个条件的子代码其他的都不会被执行所有条件代码中只会被执行一个&amp;#39;&amp;#39;&amp;#39;今日内容 if 判断结束 循环结构值while循环 循环结构之for循环 数据类型的内置方法 字符编码 今日内容详细 if判断 &amp;#39;&amp;#39;&amp;#39;if的嵌套(代码的缩进以及子代码的从属关系)eg:如果女人的年龄小于28岁且定义为漂亮的则上去要微信如果成功则邀请看电影吃饭逛街不成功则 打扰了&amp;#39;&amp;#39;&amp;#39;age = 26is_beautiful = Trueis_success = Trueif age &amp;lt; 28 and is_beautifulprint(&amp;#39;小姐姐加个微信&amp;#39;)#二次判断 if is_success:print(&amp;#39;我们去吃饭看电影逛街吧&amp;#39;)else:print(&amp;#39;打扰了&amp;#39;)else:print(&amp;#39;不好意思认错人了&amp;#39;)循环结构之while循环 break 用于结束离他最近的while循环</description>
			<content type="html"><![CDATA[<h1 id="上周内容回顾">上周内容回顾</h1>
<h4 id="数据类型">数据类型</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">布尔值  bool
</span><span class="s1">
</span><span class="s1">布尔值的命名传统前面加上is_
</span><span class="s1">eg:  is_delete
</span><span class="s1">     is_status
</span><span class="s1">
</span><span class="s1">元组  tuple
</span><span class="s1">	t = (1,2,3,4,5)
</span><span class="s1">    
</span><span class="s1">  当容器类型里面只有一个元素的时候也应该将逗号加上
</span><span class="s1">
</span><span class="s1">集合 set
</span><span class="s1">	s = {1,2,3,4,5}
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h4 id="可变类型与不可变类型">可变类型与不可变类型</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39; 查询数值的内存地址
</span><span class="s1">    	id()
</span><span class="s1">可变类型（列表，字典）
</span><span class="s1">	值改变内存地址不变
</span><span class="s1">
</span><span class="s1">不可变类型（整型，浮点型，字符串）
</span><span class="s1">	值改变内存地址一定变&#39;&#39;&#39;</span>
</code></pre></div><h4 id="用户交互">用户交互</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;获取用户输入
</span><span class="s1">	input
</span><span class="s1">		input获取到的数据都是字符串类型
</span><span class="s1">
</span><span class="s1">输出结果
</span><span class="s1">	print
</span><span class="s1">      可以一次性输出多个元素，逗号隔开即可
</span><span class="s1">       &#39;&#39;&#39;</span>
</code></pre></div><h4 id="格式化输出">格式化输出</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;占位符  ： </span><span class="si">%s</span><span class="s1">(可以给任意的数据类型占位)。d%(只能给数字占位)
</span><span class="s1">
</span><span class="s1">&#39;my name is </span><span class="si">%s</span><span class="s1"> and my age is s%&#39;  (Eddy, 18)
</span><span class="s1">字符串里有几个占位符，后面给数据的时候就要给出几个真实数据&#39;&#39;&#39;</span>
</code></pre></div><h4 id="运算符">运算符</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;基本运算符
</span><span class="s1">	+
</span><span class="s1">    -
</span><span class="s1">    *
</span><span class="s1">    /
</span><span class="s1">    %
</span><span class="s1">    **
</span><span class="s1">    
</span><span class="s1">增量赋值
</span><span class="s1">	x += 1
</span><span class="s1">    x -= 1
</span><span class="s1">    x *= 1
</span><span class="s1">    x /= 1
</span><span class="s1">    
</span><span class="s1">链式赋值
</span><span class="s1">	a = b = c = 666
</span><span class="s1">    
</span><span class="s1">交叉赋值
</span><span class="s1">	m = 10
</span><span class="s1">    n = 999
</span><span class="s1">交换m 和 n 的数值
</span><span class="s1">	方式一
</span><span class="s1">		利用中间变量
</span><span class="s1">        tum = m
</span><span class="s1">        m = n 
</span><span class="s1">        n = tum
</span><span class="s1">    方式二
</span><span class="s1">    	交叉赋值
</span><span class="s1">        m,n = n,m
</span><span class="s1">        
</span><span class="s1">解压赋值
</span><span class="s1">  l = [11,22,33]
</span><span class="s1">	默认情况下左右两边的个数一定要相等
</span><span class="s1">    有多少个值就要给多少个变量名
</span><span class="s1">  a ,b,c = l
</span><span class="s1">	
</span><span class="s1">    利用*打破变量名数量的限制
</span><span class="s1">    a,*_,b = l
</span><span class="s1">      *_常用来表达无用的数据
</span><span class="s1">       
</span><span class="s1">逻辑运算
</span><span class="s1">	and or not
</span><span class="s1">    
</span><span class="s1">and
</span><span class="s1">	连接多个条件，且必须成立，输出结果才为True，有一个条件不成立直接结束，输出Flase
</span><span class="s1">or
</span><span class="s1">	与and恰恰相反，链接的结果只要一个成立，结果都为True。有一个成立则直接输出结果True
</span><span class="s1">not
</span><span class="s1">	取反   not True = Flase
</span><span class="s1">    
</span><span class="s1">身份运算
</span><span class="s1">	is
</span><span class="s1">    	判断地址是否相等
</span><span class="s1">    ==
</span><span class="s1">    	判断值是否想同
</span><span class="s1">    值相同内存地址可能不同
</span><span class="s1">    内存地址相同值一定相同&#39;&#39;&#39;</span>
    
  
</code></pre></div><h4 id="代码的缩进">代码的缩进</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;python中利用代码的缩进来表示代码的从属关系
</span><span class="s1">并不是所有的代码都可以又子代码的权限
</span><span class="s1">
</span><span class="s1">属于同一个代码的多个子代码，子代码之间的缩进必须是相同的
</span><span class="s1">
</span><span class="s1">遇到冒号说明接下来的代码需要缩进&#39;&#39;&#39;</span>
</code></pre></div><h4 id="流程控制值if判断">流程控制值if判断</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;if的固定句式
</span><span class="s1">	if 条件1:
</span><span class="s1">        代码1
</span><span class="s1">        代码2
</span><span class="s1">    elif 条件2:
</span><span class="s1">        代码1
</span><span class="s1">        代码2
</span><span class="s1">    elif 条件3:
</span><span class="s1">        代码1
</span><span class="s1">        代码2
</span><span class="s1">    else :
</span><span class="s1">        代码1
</span><span class="s1">        代码2
</span><span class="s1">        
</span><span class="s1">那个条件成立就会执行哪个条件的子代码
</span><span class="s1">其他的都不会被执行
</span><span class="s1">所有条件代码中只会被执行一个&#39;&#39;&#39;</span>
</code></pre></div><h1 id="今日内容">今日内容</h1>
<h4 id="if-判断结束">if 判断结束</h4>
<h4 id="循环结构值while循环">循环结构值while循环</h4>
<h4 id="循环结构之for循环">循环结构之for循环</h4>
<h4 id="数据类型的内置方法">数据类型的内置方法</h4>
<h4 id="字符编码">字符编码</h4>
<h1 id="今日内容详细">今日内容详细</h1>
<h4 id="if判断">if判断</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;if的嵌套(代码的缩进以及子代码的从属关系)
</span><span class="s1">eg:
</span><span class="s1">    如果女人的年龄小于28岁且定义为漂亮的则上去要微信
</span><span class="s1">    如果成功则邀请看电影吃饭逛街
</span><span class="s1">    不成功则 打扰了&#39;&#39;&#39;</span>
    
<span class="n">age</span> <span class="o">=</span> <span class="mi">26</span>
<span class="n">is_beautiful</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">is_success</span> <span class="o">=</span> <span class="bp">True</span>
<span class="k">if</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">28</span> <span class="ow">and</span> <span class="n">is_beautiful</span>
	<span class="k">print</span><span class="p">(</span><span class="s1">&#39;小姐姐加个微信&#39;</span><span class="p">)</span>
	<span class="c1">#二次判断</span>
    <span class="k">if</span> <span class="n">is_success</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;我们去吃饭看电影逛街吧&#39;</span><span class="p">)</span>
	<span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;打扰了&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;不好意思认错人了&#39;</span><span class="p">)</span>
</code></pre></div><h4 id="循环结构之while循环">循环结构之while循环</h4>
<p><strong>break   用于结束离他最近的while循环</strong></p>
<p><strong>continue   结束离他最近的本次while循环，直接开始下一次循环</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">while True:
</span><span class="s1">    username = input(&#39;username&gt;&gt;&gt;:&#39;)
</span><span class="s1">    password = input(&#39;password&gt;&gt;&gt;:&#39;)
</span><span class="s1">    #判断用户名密码是否正确，不正确则重新输入
</span><span class="s1">    if username == &#39;Eddy&#39; and password = &#39;123&#39;:
</span><span class="s1">        print(&#39;登录成功&#39;)
</span><span class="s1">    else:
</span><span class="s1">        (&#39;用户名或者密码错误&#39;)
</span><span class="s1">
</span><span class="s1">固定句式
</span><span class="s1">while 条件：
</span><span class="s1">	代码1
</span><span class="s1">    代码2
</span><span class="s1">    ....
</span><span class="s1">    
</span><span class="s1">当条件成立的时候会执行while子代码，子代码运行完毕之后会再次回到条件哦按段除，
</span><span class="s1">判断条件是否成立
</span><span class="s1">如果成立则继续执行，直到条件判断为不成立，我while循环结束
</span><span class="s1">
</span><span class="s1">while + break
</span><span class="s1">当用户输入错误可以反复输入，但是一旦用户输入正确则立马结束while循环
</span><span class="s1">
</span><span class="s1">while True:
</span><span class="s1">    username = input(&#39;username&gt;&gt;&gt;:&#39;)
</span><span class="s1">    password = input(&#39;password&gt;&gt;&gt;:&#39;)
</span><span class="s1">#判断条件用户名和密码是否正确
</span><span class="s1">	if username == &#39;Eddy&#39; and password == &#39;123&#39;:
</span><span class="s1">        print(&#39;登陆成功&#39;)
</span><span class="s1">        #此处立马结束while循环
</span><span class="s1">        break
</span><span class="s1">    else:
</span><span class="s1">        print(&#39;用户名或者密码错误&#39;)
</span><span class="s1">        
</span><span class="s1">while + continue
</span><span class="s1">循环打印1——10
</span><span class="s1">count = 1
</span><span class="s1">while count &lt; 11:
</span><span class="s1">    print(count)
</span><span class="s1">    count += 1
</span><span class="s1">    
</span><span class="s1">循环打印1-10，但是不打印7
</span><span class="s1">count = 1
</span><span class="s1">while count &lt; 11:
</span><span class="s1">    if count == 7:
</span><span class="s1">        count += 1
</span><span class="s1">        不打印直接开始下一次循环
</span><span class="s1">        continue
</span><span class="s1">    print(count)
</span><span class="s1">	count += 1
</span><span class="s1">    
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">while  嵌套
</span><span class="s1">	
</span><span class="s1">while True:
</span><span class="s1">    username = input(&#39;username&gt;&gt;&gt;:&#39;)
</span><span class="s1">    password = input(&#39;password&gt;&gt;&gt;:&#39;)
</span><span class="s1">    # 判断用户名和密码是否正确
</span><span class="s1">    if username == &#39;jason&#39; and password == &#39;123&#39;:
</span><span class="s1">        print(&#39;登录成功&#39;)
</span><span class="s1">        # 进入内部循环
</span><span class="s1">        while True:
</span><span class="s1">            cmd = input(&#39;please input your command&gt;&gt;&gt;:&#39;)
</span><span class="s1">            print(&#39;正在执行您的命令:</span><span class="si">%s</span><span class="s1">&#39;</span><span class="si">%c</span><span class="s1">md)
</span><span class="s1">            if cmd == &#39;q&#39;:
</span><span class="s1">                print(&#39;欢迎下次使用&#39;)
</span><span class="s1">                break
</span><span class="s1">        break
</span><span class="s1">    else:
</span><span class="s1">        print(&#39;用户名或密码错误&#39;)
</span><span class="s1">        &#39;&#39;&#39;</span>
</code></pre></div><h4 id="for-循环">for 循环</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2">for 循环能够做到的事情while循环都可以实现
</span><span class="s2">但是for循环比while循环语法更加简单
</span><span class="s2">
</span><span class="s2">while循环打印1-10
</span><span class="s2">count = 1
</span><span class="s2">while count &lt; 11:
</span><span class="s2">    print(count)
</span><span class="s2">    count += 1
</span><span class="s2">    
</span><span class="s2">for循环打印1-10
</span><span class="s2">for i in range(1, 11):
</span><span class="s2">    print(i)
</span><span class="s2">    
</span><span class="s2">for i in range(11):
</span><span class="s2">    print(i)
</span><span class="s2">    
</span><span class="s2">range(1, 11) 会产生一个范围序列  可以堪称为[1,2,3,4,5,6,7,8,9,10]  顾头不顾尾
</span><span class="s2">range(11)  括号里面如果之后一个数字，那么开头默认是从0开始
</span><span class="s2">
</span><span class="s2">l = [111, 222, 333, 444, 555, 666, 777, 888]
</span><span class="s2">依次挨个取出列表l中的值
</span><span class="s2"> while循环
</span><span class="s2"> count = 0
</span><span class="s2"> while count &lt; 8:
</span><span class="s2">     print(l[count])
</span><span class="s2">     count += 1
</span><span class="s2">
</span><span class="s2"> for循环
</span><span class="s2">for num in l:
</span><span class="s2">    print(num)
</span><span class="s2">    
</span><span class="s2">for循环不需要你自己给结束条件，for循环内部会自动结束
</span><span class="s2">
</span><span class="s2">使用for循环打印字符串中的字符
</span><span class="s2"> s = &#39;hello world&#39;
</span><span class="s2"> for i in s:
</span><span class="s2">     print(i)
</span><span class="s2">
</span><span class="s2">        
</span><span class="s2">d = {
</span><span class="s2">    &#39;username&#39;: &#39;jason&#39;,
</span><span class="s2">    &#39;password&#39;: 123,
</span><span class="s2">    &#39;hobby&#39;: [111, 222]
</span><span class="s2">}
</span><span class="s2"> for循环字典的时候只会拿到字典的key
</span><span class="s2">for i in d:
</span><span class="s2">    print(i)
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h4 id="数据类型的内置方法-1">数据类型的内置方法</h4>
<pre><code class="language-pythom" data-lang="pythom">&quot;&quot;&quot;
整型 int
	类型转换
    res = '123'  此处res为字符串类型
    res = int(res)  此处res则转换为整型
转换的时候需要注意 待转换的对象必须提前符合要转的数据类型格式    


浮点型 float
	res2 = '11.11' 此处为字符串
    res2 = float(res2)  此处则转为浮点型
    #res2 = int(res2)  不可转
    
字符串 str
s = 'hello world'
类型转换  所有的数据类型都可以转换为字符串
str(123)
str(11.11)
str([1,2,3,4,5])


索引取值
s = 'hello world'
print(s[0])   &gt;&gt;&gt;&gt;&gt;   h


切片取值
s = 'hello world'
print(s[0,3])    &gt;&gt;&gt;&gt;   h e l
从索引0取到索引2为止，顾头不顾尾
步长 (默认步长为1)
print(s[0,3,2])  &gt;&gt;&gt;&gt;&gt;  h l o  
步长为2 ，表示隔一个取一个值


统计长度   关键字 len
print (len(s)) &gt;&gt;&gt;&gt;&gt;  11



移除字符串中的首尾字符或空格   关键字 strip
username = input('username&gt;&gt;&gt;:').strip()
 if username == 'jason':
     print('登录')
 else:
     print('失败')
 name = '   jason   '
 print(len(name))

 name = name.strip()  # strip()  移除字符串首尾的空格
 print(len(name))
 name1 = '&amp;&amp;jas&amp;&amp;on&amp;&amp;'
 print(name1.strip('&amp;'))  # 括号内也可以自己指定移除首尾的字符
 print(name1.lstrip('&amp;'))  # jas&amp;&amp;on&amp;&amp;
 print(name1.rstrip('&amp;'))  # &amp;&amp;jas&amp;&amp;on
 
 
 按照指定的字符切割字符串  关键字 split
 name_info = 'jason|123|read|China'
 res = name_info.split('|')   split切割之后是一个列表数据类型
 print(res)   &gt;&gt;&gt;&gt;&gt;&gt;    ['jason', '123', 'read', 'China']
  
 
 res1 = name_info.lsplit('|', maxsplit=1)   #lsplit 从左往右切割指定个数的字符
 print(res1)  &gt;&gt;&gt;&gt;&gt;&gt;     ['jason', '123|read|China']
 
 
 res2 = name_info.rsplit('|',maxsplit=2)    #rsplit  从右往左切割指定个数的字符
 print(res2)  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    ['jason|123', 'read', 'China']
 
 
 
统计某个字符出现的个数     关键字  count
 info = 'name n a asd asdjklj a dsa dajd  dasd'
 print(info.count('a'))       &gt;&gt;&gt;&gt;&gt;   8
 
 
求索引值    关键字 index 
 info1 = 'jason' 求出字符o的索引值
 print(info1.index('o'))      &gt;&gt;&gt;&gt;&gt;&gt; 3
 
 
字符串转大小写         关键字 upper  lower
 info = 'My NAME iS JasOn'
 print(info.upper())  # MY NAME IS JASON
 print(info.lower())  # my name is jason


 字符串的格式化输出d    关键字 format
 方式1  跟占位符
 res = 'my name is {} my age is {}'
 print(res.format('jason',18))
 方式2  指定索引 并且前后个数可以不一致
 res = 'my name is {0} my age is {1} {0}{0}{0}'
 print(res.format('jason',18))
 方式3: 指名道姓 并且前后个数可以不一致
 res = 'my name is {name} my age is {age} {name}{name}{name}'
 print(res.format(name='jason', age=18))




 字典类型
 类型转换
 res = dict(([1,2],(111,222)))
 print(res)  # {1: 2, 111: 222}
d = {
    'username': 'jason',
    'password': 123,
    'hobby': [111, 222, 333]
}
 字典取值   关键字 get
 print(d['username'])
 print(d.get('username'))
 print(d['xxx'])  # 没有直接报错
 print(d.get('xxx'))  # None  不会报错 返回None提示信息

 字典k:v键值对的个数  一样使用关键字len进行统计
 print(len(d))  # 3

 修改字典  键存在则修改 键不存在则添加新的  关键字 updata
 d.update({'username': 'jasonDSB', 'age': 18})
 print(d)
 d['username'] = 'JasonNB'  # 值存在修改
 d['age'] = 18  # 键存在修改
 print(d)  # 无则添加


 获取字典所有key
d = {
    'username': 'jason',
    'password': 123,
    'hobby': [111, 222, 333]
}
 print(d.keys())  # dict_keys(['username', 'password', 'hobby'])
 获取字典所有value
 print(d.values())  # dict_values(['jason', 123, [111, 222, 333]])
 获取字典的键值对 组织成元组的形式返回
 print(d.items())  # dict_items([('username', 'jason'), ('password', 123), ('hobby', [111, 222, 333])])
 
 
 元组
t = (1, 2, 3, 4, 5, 6)
 print(len(t))
 
元组内元素不能被修改
 t[0] = 111  # 报错
 
 
拔高题
 t1 = (111, 222, 333, [11, 22])
 t1[-1].append(33)
 print(t1)  # (111, 222, 333, [11, 22, 33])

A 报错
B (111, 222, 333, [11, 22, 33]) &gt;&gt;&gt;&gt; 正确   元组内的数值不能直接被修改但是元组内的	C (111, 222, 333, [11, 22,], 33)			表的值是可以修改的



集合
 集合内元素必须是不可变类型
 s1 = {[111,222],1,2,3,4}
 print(s1)  # 报错 列表为可变类型 所以报错
 去重  集合内不可能出现相同的元素  自动去重
 s1 = {1,2,2,2,2,3,4,3,4,5,6,7,6,4,2,3,4,5,6,5,4}
 print(s1)  # {1, 2, 3, 4, 5, 6, 7}
 l = ['jason', 'jason', 'egon', 'tony', 'jason']

将列表转换成集合
 s1 = set(l)
 l = list(s1)
 print(l)


关系运算
f1 = {'jason', 'egon', 'tony', 'tank'}
f2 = {'jason', 'egon', 'kevin', 'tom'}
 求两者共同的好友
print(f1 &amp; f2)  # {'jason', 'egon'}
 求两者所有的好友
print(f1 | f2)  # {'tony', 'egon', 'tank', 'kevin', 'tom', 'jason'}\
 求用户1的独有好友
print(f1 - f2)  # {'tony', 'tank'}
 求用户2的独有好友
print(f2 - f1)  # {'kevin', 'tom'}&quot;&quot;&quot;
</code></pre><h4 id="作业">作业</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;1.根据用户输入的用户名的不同打印不同的身份信息
</span><span class="s2">
</span><span class="s2">jason --&gt; 超级管理员
</span><span class="s2">tom  --&gt; 普通管理员
</span><span class="s2">jack,rain --&gt; 业务主管
</span><span class="s2">egon --&gt; 保洁阿姨
</span><span class="s2">其他 --&gt; 普通用户
</span><span class="s2">解1&#34;&#34;&#34;</span>
<span class="n">user_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;用户名:&#39;</span><span class="p">)</span>
<span class="n">pass_word</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;密码: &#39;</span><span class="p">)</span>
<span class="k">if</span> <span class="n">user_name</span> <span class="o">==</span> <span class="s1">&#39;jason&#39;</span> <span class="ow">and</span> <span class="n">pass_word</span> <span class="o">==</span> <span class="s1">&#39;123&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;超级管理员&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">user_name</span> <span class="o">==</span> <span class="s1">&#39;tom&#39;</span> <span class="ow">and</span> <span class="n">pass_word</span> <span class="o">==</span> <span class="s1">&#39;123&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;普通管理员&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">user_name</span> <span class="o">==</span> <span class="s1">&#39;jack, rain&#39;</span> <span class="ow">and</span> <span class="n">pass_word</span> <span class="o">==</span> <span class="s1">&#39;123&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;业务主管&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">user_name</span> <span class="o">==</span> <span class="s1">&#39;egon&#39;</span> <span class="ow">and</span> <span class="n">pass_word</span> <span class="o">==</span> <span class="s1">&#39;123&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;保洁阿姨&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;普通用户&#39;</span><span class="p">)</span>

    
    
<span class="s1">&#39;&#39;&#39;2.编写用户登录功能成功直接退出程序，不成功只有三次尝试机会(尝试)&#39;&#39;&#39;</span>
<span class="n">user_name</span> <span class="o">=</span> <span class="s1">&#39;Eddy&#39;</span>
<span class="n">pass_word</span> <span class="o">=</span> <span class="s1">&#39;123&#39;</span>
<span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">user_name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;user_name&gt;&gt;&gt;:&#39;</span><span class="p">)</span>
    <span class="n">pass_word</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;pass_word&gt;&gt;&gt;:&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">user_name</span> <span class="o">==</span> <span class="s1">&#39;Eddy&#39;</span> <span class="ow">and</span> <span class="n">pass_word</span> <span class="o">==</span> <span class="s1">&#39;123&#39;</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;登录成功&#39;</span><span class="p">)</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">break</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;用户名或密码错误&#34;</span><span class="p">)</span>
        <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
    	<span class="k">print</span><span class="p">(</span><span class="s1">&#39;剩余输入次数:&#39;</span><span class="p">,</span> <span class="mi">3</span> <span class="o">-</span> <span class="n">num</span><span class="p">)</span>
    	<span class="k">if</span> <span class="n">num</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s1">&#39;失败次数过多，稍后再试&#39;</span><span class="p">)</span>
        <span class="k">break</span>

        
<span class="s1">&#39;&#39;&#39;3.关系运算
</span><span class="s1">　　有如下两个集合，pythons是报名python课程的学员名字集合，linuxs是报名linux课程的学员名字集合
</span><span class="s1">　　pythons={&#39;jason&#39;,&#39;egon&#39;,&#39;kevin&#39;,&#39;ricky&#39;,&#39;gangdan&#39;,&#39;biubiu&#39;}
</span><span class="s1">　　linuxs={&#39;kermit&#39;,&#39;tony&#39;,&#39;gangdan&#39;}
</span><span class="s1">　　1. 求出即报名python又报名linux课程的学员名字集合
</span><span class="s1">　　2. 求出所有报名的学生名字集合
</span><span class="s1">　　3. 求出只报名python课程的学员名字
</span><span class="s1">　　4. 求出没有同时这两门课程的学员名字集合&#39;&#39;&#39;</span>

        <span class="n">common_student</span> <span class="o">=</span> <span class="p">(</span><span class="n">pythons</span> <span class="o">&amp;</span> <span class="n">linuxs</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">common_student</span><span class="p">)</span>

        <span class="n">all_student</span> <span class="o">=</span> <span class="p">(</span><span class="n">pythons</span> <span class="o">|</span> <span class="n">linuxs</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">all_student</span><span class="p">)</span>

        <span class="n">alone_pstudent</span> <span class="o">=</span> <span class="p">(</span><span class="n">pythons</span> <span class="o">-</span> <span class="n">linuxs</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">alone_pstudent</span><span class="p">)</span>

        <span class="n">alone_lstudent</span> <span class="o">=</span> <span class="p">(</span><span class="n">linuxs</span> <span class="o">^</span> <span class="n">pythons</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">alone_lstudent</span><span class="p">)</span>
<span class="s1">&#39;&#39;&#39;4.对列表去重并保留原来的顺序(思考)&#39;&#39;&#39;</span>
	<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">88</span><span class="p">,</span><span class="mi">99</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">55</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">22</span><span class="p">]</span>
    
    

</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Python之用户交互、格式化输出、运算符、流程控制</title>
			<link>https://Eddy-622.github.io/posts/python%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E8%BF%90%E7%AE%97%E7%AC%A6%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-/</link>
			<pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/python%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E8%BF%90%E7%AE%97%E7%AC%A6%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-/</guid>
			<description>10.29内容回顾   代码的注释
&amp;#39;&amp;#39;&amp;#39;1.# 单行注释2.&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;,&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34; 多行注释在pycharm中的快捷键ctrl+? 注释快捷键，再次激活取消注释&amp;#39;&amp;#39;&amp;#39;  变量
&amp;#39;&amp;#39;&amp;#39;语法规范变量名 赋值符号 变量的值&amp;#39;&amp;#39;&amp;#39;name = &amp;#39;Eddy&amp;#39;&amp;#34;&amp;#34;&amp;#34;遇到赋值符号先看符号右边的再看符号左边的&amp;#34;&amp;#34;&amp;#34;# 情况1  name = &amp;#39;jason&amp;#39;name = &amp;#39;egon&amp;#39;name = &amp;#39;tony&amp;#39;&amp;#39;&amp;#39;&amp;#39;name依次被赋予 jason egon tony 三个值，但是最后只能指向一个值所有此时name对应的值为 tony&amp;#39;&amp;#39;&amp;#39;# 情况2 name = &amp;#39;jason&amp;#39;name1 = namename2 = name&amp;#39;&amp;#39;&amp;#39;name被赋予Jason，name1,name2 同时被赋予name的值所有 name1 = name2 = name = Jason&amp;#39;&amp;#39;&amp;#39;  变量的命名规范(必须遵守)
&amp;#39;&amp;#39;&amp;#39;1.只能包含数字、字母、下划线2.数字不能开头、下划线也尽量不要开头(隐藏变量)3.</description>
			<content type="html"><![CDATA[<h1 id="1029内容回顾">10.29内容回顾</h1>
<ul>
<li>
<p>代码的注释</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;1.#   单行注释
</span><span class="s1">2.&#39;&#39;&#39;&#39;&#39;&#39;,&#34;&#34;&#34;&#34;&#34;&#34;  多行注释
</span><span class="s1">在pycharm中的快捷键ctrl+?   注释快捷键，再次激活取消注释&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>变量</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;语法规范
</span><span class="s1">变量名 赋值符号 变量的值&#39;&#39;&#39;</span>
<span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Eddy&#39;</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">遇到赋值符号先看符号右边的
</span><span class="s2">再看符号左边的
</span><span class="s2">&#34;&#34;&#34;</span>
<span class="c1"># 情况1 </span>
<span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;jason&#39;</span>
<span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;egon&#39;</span>
<span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;tony&#39;</span>
<span class="s1">&#39;&#39;&#39;name依次被赋予 jason  egon tony 三个值，但是最后只能指向一个值
</span><span class="s1">所有此时name对应的值为 tony&#39;&#39;&#39;</span>
<span class="c1"># 情况2</span>
<span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;jason&#39;</span>
<span class="n">name1</span> <span class="o">=</span> <span class="n">name</span>
<span class="n">name2</span> <span class="o">=</span> <span class="n">name</span>
<span class="s1">&#39;&#39;&#39;name被赋予Jason，name1,name2 同时被赋予name的值
</span><span class="s1">所有 name1 = name2 = name = Jason&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>变量的命名规范(必须遵守)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;1.只能包含数字、字母、下划线
</span><span class="s1">2.数字不能开头、下划线也尽量不要开头(隐藏变量)
</span><span class="s1">3.变量名一定要做到见名知意
</span><span class="s1">4.变量名不能跟python里面的关键字冲突&#39;&#39;&#39;</span>
  
<span class="k">print</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
<span class="k">print</span> <span class="o">=</span> <span class="s1">&#39;hello world&#39;</span>  <span class="c1"># 不能使用关键字作为变量名</span>
<span class="k">print</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
<span class="s1">&#39;&#39;&#39;print被作为变量名赋值之后则他会失去原本打印的功能，所有
</span><span class="s1">变量名不可以是关键字字符&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>变量的命名风格</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;1.下划线
</span><span class="s1">  user_name = &#39;jason&#39;
</span><span class="s1">2.驼峰体
</span><span class="s1">  userName = &#39;jason&#39;
</span><span class="s1">    UserName = &#39;jason&#39;&#39;&#39;&#39;</span>
<span class="s1">&#39;&#39;&#39;python推荐使用下划线，Js推荐使用驼峰体&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>常量</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;在python中没有真正意义上的常量，我们墨守成规的将全大写的变量名看成是常量
</span><span class="s1">HOST = &#39;127.0.0.1&#39;
</span><span class="s1">PORT = 6379
</span><span class="s1">在其他编程语言中如js是有真正意义上的常量的(定义之后就无法修改了)&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>PEP8规范</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">1.赋值符号左右两边都应该有空格
</span><span class="s1">2.逗号后面应该有空格
</span><span class="s1">3.注释符号与文字之间应该有空格
</span><span class="s1">4.注释和代码在一行的情况下注释符号需要与代码之间空两格
</span><span class="s1">&#39;&#39;&#39;</span>
  
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">先在pycharm中书写代码，你可以不考虑规范
</span><span class="s2">然后利用pycharm自动格式化代码的功能，学习它帮你格式化了哪些地方
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div></li>
<li>
<p>查看数据类型</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="nb">type</span><span class="p">()</span>
</code></pre></div></li>
<li>
<p>数据类型</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">整型int
</span><span class="s1">age = 18
</span><span class="s1">  
</span><span class="s1">浮点型float
</span><span class="s1">salary = 11.11
</span><span class="s1">  
</span><span class="s1">字符串str
</span><span class="s1">&#39;&#39;&#39;</span>
<span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;jason&#39;</span>
<span class="n">name1</span> <span class="o">=</span> <span class="s2">&#34;jason1&#34;</span>
<span class="n">name2</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;jason2&#39;&#39;&#39;</span>
<span class="n">name3</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;jason3&#34;&#34;&#34;</span>
<span class="c1"># 小操作</span>
<span class="n">name</span> <span class="o">+</span> <span class="n">name1</span> 
<span class="n">name</span> <span class="o">*</span> <span class="mi">10</span>
<span class="s1">&#39;&#39;&#39;
</span><span class="s1">列表list
</span><span class="s1">l1 = [&#39;jason&#39;, 123, 11.11, [1, 2, 3]]
</span><span class="s1"># 索引(index)取值:在IT行业索引都是从0开始的
</span><span class="s1">l1[0]
</span><span class="s1"># 针对嵌套问题
</span><span class="s1">l1[0][2][1]
</span><span class="s1">  
</span><span class="s1">字典dict
</span><span class="s1">字典的key一般情况下都是字符串，字典的value可以是任意数据类型
</span><span class="s1">d = {
</span><span class="s1">    &#39;name&#39;:&#39;jason&#39;,
</span><span class="s1">    &#39;age&#39;:123,
</span><span class="s1">    &#39;hobby&#39;:[1, 2, 3]
</span><span class="s1">}
</span><span class="s1"># 字典的取值
</span><span class="s1">d[&#39;name&#39;]
</span><span class="s1">d.get(&#39;name&#39;)
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div></li>
</ul>
<h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>数据类型之布尔值</li>
<li>数据类型之元组</li>
<li>数据类型之集合</li>
<li>与用户交互及运算符</li>
<li>数据类型的内置方法</li>
<li>流程控制</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h3 id="数据类型之布尔值bool">数据类型之布尔值bool</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">布尔值总共就两种情况
</span><span class="s1">True
</span><span class="s1">False
</span><span class="s1">在逻辑运算中用来判断事物的对错和是否可行
</span><span class="s1">(流程控制中会学习)
</span><span class="s1">&#39;&#39;&#39;</span>
<span class="s1">&#39;&#39;&#39;
</span><span class="s1">在python中，如果一个变量的值是布尔值
</span><span class="s1">那么我们会习惯性的将变量名起名为is开头
</span><span class="s1">is_right = True
</span><span class="s1">is_status = True
</span><span class="s1">is_delete = True
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h3 id="数据类型之元组tuple">数据类型之元组tuple</h3>
<p>符号：（）</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">元组与列表类似，也是可以存多个任意类型的元素，
</span><span class="s1">不同之处在于元组的元素不能修改，
</span><span class="s1">即元组相当于不可变的列表，
</span><span class="s1">用于记录多个固定不允许修改的值，单纯用于取
</span><span class="s1">目前你只需要知道元组就相当于不可变的列表
</span><span class="s1">元组的符号是()
</span><span class="s1">&#39;&#39;&#39;</span>
<span class="n">name</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
<span class="s2">&#34;&#34;&#34;
</span><span class="s2">元组的小坑
</span><span class="s2">
</span><span class="s2"># t = (1)
</span><span class="s2"># print(type(t))  # &lt;class &#39;int&#39;&gt;
</span><span class="s2"># t1 = (&#39;jason&#39;)
</span><span class="s2"># print(type(t1))  # &lt;class &#39;str&#39;&gt;
</span><span class="s2"># 如果元组里面只有一个元素，那么你也需要将逗号加上
</span><span class="s2">t = (1,)
</span><span class="s2">print(type(t))  # &lt;class &#39;tuple&#39;&gt;
</span><span class="s2">t1 = (&#39;jason&#39;,)
</span><span class="s2">print(type(t1))  # &lt;class &#39;tuple&#39;&gt;
</span><span class="s2">&#39;&#39;&#39;
</span><span class="s2">容器类型:能够存储多个数据的数据类型,eg:list、tuple、dict
</span><span class="s2">针对容器类型，如果里面只有一个元素
</span><span class="s2">我们也推荐你将逗号加上
</span><span class="s2">&#39;&#39;&#39;
</span><span class="s2">&#34;&#34;&#34;</span>
</code></pre></div><h3 id="数据类型之集合set">数据类型之集合set</h3>
<p>符号：{}</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">集合主要是用来做以下两种需求
</span><span class="s1">1.去重
</span><span class="s1">	去掉重复的元素
</span><span class="s1">2.关系运算
</span><span class="s1">	共同好友、共同关注
</span><span class="s1">集合也可以存放多个数据，数据与数据之间逗号隔开，数据必须是不可变类型
</span><span class="s1">集合的符号也是{}
</span><span class="s1">s = {1, 2, 3, 4, 5, 6}
</span><span class="s1">print(type(s))
</span><span class="s1">&#39;&#39;&#39;</span>
</code></pre></div><h3 id="可变类型与不可变类型">可变类型与不可变类型</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">可变类型
</span><span class="s1">	值改变内存地址不变			列表
</span><span class="s1">
</span><span class="s1">不可变类型
</span><span class="s1">	值改变内存地址肯定变		   整型 浮点型 字符串
</span><span class="s1">&#39;&#39;&#39;</span>

<span class="c1"># 如何查看值的内存地址</span>

<span class="nb">id</span><span class="p">()</span> 
<span class="c1"># 返回一串数字，该数字你可以直接看成是内存地址</span>
<span class="c1"># name = &#39;jason&#39;</span>
<span class="c1"># print(id(name))  # 2134060606104</span>
<span class="c1"># name = &#39;jasonDSB&#39;</span>
<span class="c1"># print(id(name))  # 2134061440944</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">l</span><span class="p">))</span>
<span class="c1"># 修改列表元素数值的方式</span>
<span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">666</span>  <span class="c1"># 将列表索引0的位置的值修改为666</span>
<span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">===&gt;</span>  <span class="mi">666</span>
</code></pre></div><h3 id="与用户交互">与用户交互</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">输入信息
</span><span class="s1">输出信息
</span><span class="s1">
</span><span class="s1">获取用户输入
</span><span class="s1">	input()
</span><span class="s1">输出结果
</span><span class="s1">	print()
</span><span class="s1">    
</span><span class="s1">input(&#39;请输入您的用户名&gt;&gt;&gt;:&#39;)
</span><span class="s1">将input获取到的用户输入赋值给变量name
</span><span class="s1">
</span><span class="s1">name = input(&#39;请输入您的用户名&gt;&gt;&gt;:&#39;)
</span><span class="s1">
</span><span class="s1">print(type(name))  ===&gt; str&#39;&#39;&#39;</span>
<span class="s1">&#39;&#39;&#39;注意input获取到的用户输入都是字符串类型&#39;&#39;&#39;</span>


<span class="c1"># 输出单个数据</span>
<span class="k">print</span><span class="p">(</span><span class="mi">123</span><span class="p">)</span>
<span class="c1"># 输出多个数据</span>
<span class="c1"># print(&#39;jason&#39;, &#39;egon&#39;, &#39;kevin&#39;)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;jason&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;egon&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;kevin&#39;</span><span class="p">)</span>
<span class="c1"># print(&#34;aaaa&#34;,end=&#39;&#39;)</span>
<span class="c1"># print(&#34;bbbb&#34;,end=&#39;&amp;&#39;)</span>
<span class="c1"># print(&#34;cccc&#34;,end=&#39;@&#39;)</span>
</code></pre></div><h3 id="格式化输出">格式化输出</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">一段文本当中，针对后续可能被替换的部分，我们在定义该字符串的时候需要提前先用占位符占位
</span><span class="s1">占位符:</span><span class="si">%s</span><span class="s1">(任意数据类型均可)、</span><span class="si">%d</span><span class="s1">(只能给数字占位)
</span><span class="s1">&#39;&#39;&#39;</span>

<span class="c1"># 字符串里面有几个%s就表示后续可以替换几个文本</span>
<span class="n">info</span> <span class="o">=</span> <span class="s1">&#39;亲爱的</span><span class="si">%s</span><span class="s1">你好！你</span><span class="si">%s</span><span class="s1">月的话费是</span><span class="si">%s</span><span class="s1">，余额是</span><span class="si">%s</span><span class="s1">&#39;</span>
<span class="c1"># 将字符串格式化之后的结果赋值给变量res</span>
<span class="n">res</span> <span class="o">=</span> <span class="n">info</span> <span class="o">%</span> <span class="p">(</span><span class="s1">&#39;jason&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">100000000000000</span><span class="p">)</span>
<span class="n">res1</span> <span class="o">=</span> <span class="n">info</span> <span class="o">%</span> <span class="p">(</span><span class="s1">&#39;egon&#39;</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="o">-</span><span class="mi">11110</span><span class="p">)</span>
<span class="s1">&#39;&#39;&#39;注意</span><span class="si">%s</span><span class="s1">的使用 字符串里面事先有几个</span><span class="si">%s</span><span class="s1">后续在替换的时候就需要给几个内容&#39;&#39;&#39;</span>
</code></pre></div><h3 id="运算符">运算符</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s2">&#34;&#34;&#34;
</span><span class="s2"># 算数运算符
</span><span class="s2">	+
</span><span class="s2">    -
</span><span class="s2">    *
</span><span class="s2">    /
</span><span class="s2">    **
</span><span class="s2">    
</span><span class="s2"># 比较运算符
</span><span class="s2">	&gt;
</span><span class="s2">    &lt;
</span><span class="s2">    &gt;=
</span><span class="s2">    &lt;=
</span><span class="s2">    print(1 &lt;= 2)  # True  表示判断正确
</span><span class="s2">	print(1 &gt; 5)  # False  表示判断错误
</span><span class="s2"> 
</span><span class="s2"># 赋值运算符
</span><span class="s2">	name = &#39;jason&#39;
</span><span class="s2"> 
</span><span class="s2"># 增量赋值(掌握)
</span><span class="s2">	# 增量赋值
</span><span class="s2">    x += 1  # x = x + 1
</span><span class="s2">    x += 100  # x = x + 100
</span><span class="s2">    x -= 1  # x = x - 1
</span><span class="s2">    x *= 1  # x = x * 1
</span><span class="s2">    x /= 1  # x = x / 1
</span><span class="s2">  
</span><span class="s2"># 链式赋值(掌握)
</span><span class="s2">	# name = &#39;jason&#39;
</span><span class="s2">    # name1 = name
</span><span class="s2">    # name2 = name
</span><span class="s2">    # 链式赋值
</span><span class="s2">    name = name1 = name2 = &#39;jason&#39;
</span><span class="s2">    print(name,name1,name2)
</span><span class="s2">    
</span><span class="s2"># 交叉赋值(掌握)
</span><span class="s2">	m = 111
</span><span class="s2">    n = 999
</span><span class="s2">    # 将m和n互换
</span><span class="s2">    # m = n
</span><span class="s2">    # n = m
</span><span class="s2">    # print(m,n)  # 错误示范
</span><span class="s2">
</span><span class="s2">    # 方式1:通过中间变量
</span><span class="s2">    # tmp = m
</span><span class="s2">    # m = n
</span><span class="s2">    # n = tmp
</span><span class="s2">    # print(m,n)
</span><span class="s2">     &#39;&#39;&#39;交叉赋值
</span><span class="s2">    m, n = n, m
</span><span class="s2">    print(m, n)&#39;&#39;&#39;
</span><span class="s2">   
</span><span class="s2"># 解压赋值(重要)
</span><span class="s2">	name_list = [&#39;jason&#39;, &#39;egon&#39;, &#39;kevin&#39;, &#39;tony&#39;]
</span><span class="s2">    # 将列表中所有的名字取出分别赋值给不同的变量
</span><span class="s2">    # name1 = name_list[0]
</span><span class="s2">    # name2 = name_list[1]
</span><span class="s2">    # name3 = name_list[2]
</span><span class="s2">    # name4 = name_list[3]
</span><span class="s2">    # print(name1,name2,name3,name4)
</span><span class="s2">    # 解压赋值
</span><span class="s2">    # name1, name2, name3, name4 = name_list
</span><span class="s2">    # print(name1, name2, name3, name4)
</span><span class="s2">    # 扩展知识点 了解即可
</span><span class="s2">&#34;&#34;&#34;</span>    <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    注意事项
</span><span class="s1">    1.解压赋值默认情况下左右变量的变量名和变量的值个数要相等
</span><span class="s1">    2.可以借助于符号*来打破相等的限制
</span><span class="s1">    &#39;&#39;&#39;</span>
    <span class="c1"># *会将多余没有被解压的元素统一组织成列表的形式赋值给*后面的变量名</span>
   <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    eg： 
</span><span class="s1">     name, *arg = name_list
</span><span class="s1">     print(name, arg)  # jason [&#39;egon&#39;, &#39;kevin&#39;, &#39;tony&#39;]
</span><span class="s1">     name, *_, name1 = name_list
</span><span class="s1">     print(name, _, name1)  # jason [&#39;egon&#39;, &#39;kevin&#39;] tony
</span><span class="s1">    &#39;&#39;&#39;</span>


<span class="c1"># 逻辑运算符(重要)</span>
<span class="s1">&#39;&#39;&#39;
</span><span class="s1">and、or和not
</span><span class="s1">        and的意思为“而且”，所以and运算符会链接两个布尔值，如果两个布尔值
</span><span class="s1">        都是True，那么运算结果也为True；两边分布有一个False，那么结果就是false
</span><span class="s1">        所以当and表达式左边结果为FALSE的时候，右边的表达式不论是什么运算结果都
</span><span class="s1">        将是false，运算时右边的值将会被跳过，根本不会被执行（短路处理）。
</span><span class="s1">        or的意思为或者，所以or连接的的也会是两个布尔值，如果两个布尔值有任意一个是
</span><span class="s1">        true，那么运算结果就是true，当然or也有短路功能，当左边为true的情况下右边的
</span><span class="s1">        表达式根本不会被执行。
</span><span class="s1">        not运算符的右边会跟一个布尔值，他的作用是得到与该布尔值相反的值，
</span><span class="s1">        也就是说当not后面的布尔值是 TRUE,那么运算结果就是FALSE,相反同理。
</span><span class="s1"> &#39;&#39;&#39;</span>
        
    <span class="s1">&#39;&#39;&#39; 
</span><span class="s1">    !=  不等于
</span><span class="s1">    res = 2 &gt; 1 and 1 != 1 and True and 3 &gt; 2
</span><span class="s1">    print(res)  # False
</span><span class="s1">    如果一个判断语句里面都是and，那么判断起来其实很方便
</span><span class="s1">    你只需要从前往后一个个看，只要遇到一个不成立的后面就不用看了
</span><span class="s1">    &#39;&#39;&#39;</span>
    
    
    <span class="n">res</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="ow">or</span> <span class="mi">1</span> <span class="o">!=</span> <span class="mi">1</span> <span class="ow">or</span> <span class="bp">True</span> <span class="ow">or</span> <span class="mi">3</span> <span class="o">&gt;</span> <span class="mi">2</span> 
	<span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>  <span class="c1"># True</span>
    
    <span class="k">print</span><span class="p">(</span><span class="ow">not</span> <span class="n">res</span><span class="p">)</span>  <span class="c1"># False</span>
    
    <span class="s1">&#39;&#39;&#39;
</span><span class="s1">    注意上述三个运算符在混合使用的时候是有优先级的
</span><span class="s1">    但是我们不应该将优先级的判断交给用户，而应该使用括号的形式
</span><span class="s1">    将优先级在代码层面就区分开，这样的话我们在判断的时候也会更加的方便
</span><span class="s1">    &#39;&#39;&#39;</span>
    <span class="n">res</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="ow">and</span> <span class="mi">4</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="ow">or</span> <span class="p">((</span><span class="mi">1</span> <span class="o">==</span> <span class="mi">3</span> <span class="ow">and</span> <span class="s1">&#39;x&#39;</span> <span class="o">==</span> <span class="s1">&#39;x&#39;</span><span class="p">)</span> <span class="ow">or</span> <span class="mi">3</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>  <span class="c1"># False</span>
    
<span class="c1"># 成员运算  in</span>
	<span class="s1">&#39;&#39;&#39;
</span><span class="s1">	判断某个个体在不在某个整体内
</span><span class="s1">    eg:判断李强在不在我们班级学生名单中
</span><span class="s1">    name_list1 = [&#39;jason&#39;,&#39;egon&#39;,&#39;tony&#39;,&#39;kevin&#39;]
</span><span class="s1">    # 判断tom在不在列表内
</span><span class="s1">    print(&#39;tom&#39; in name_list1)  # False
</span><span class="s1">    # 取反
</span><span class="s1">    print(&#39;tom&#39; not in name_list1)  # True
</span><span class="s1">    s1 = &#39;hello world&#39;
</span><span class="s1">    print(&#39;h&#39; in s1)  # True
</span><span class="s1">    &#39;&#39;&#39;</span>
 
<span class="c1"># 身份运算</span>
	<span class="s1">&#39;&#39;&#39;
</span><span class="s1">	is	判断两者内存地址是否一样
</span><span class="s1">    ==  判断两者值是否一样
</span><span class="s1">   	值相同内存地址可能不同，内存地址相同值肯定相同
</span><span class="s1">    
</span><span class="s1">    l1 = [&#39;jason&#39;,&#39;egon&#39;,&#39;kevin&#39;]
</span><span class="s1">    l2 = [&#39;jason&#39;,&#39;egon&#39;,&#39;kevin&#39;]
</span><span class="s1">    # print(id(l1),id(l2))  # 2455183599432 2455183600136 值相同，地址不同
</span><span class="s1">    &#39;&#39;&#39;</span>
    
    
    <span class="c1"># 判断值是否相等</span>
    <span class="k">print</span><span class="p">(</span><span class="n">l1</span> <span class="o">==</span> <span class="n">l2</span><span class="p">)</span>  <span class="c1"># True</span>
    <span class="c1"># 判断地址是否相等</span>
    <span class="k">print</span><span class="p">(</span><span class="n">l1</span> <span class="ow">is</span> <span class="n">l2</span><span class="p">)</span>  <span class="c1"># False</span>
</code></pre></div><h3 id="流程控制">流程控制</h3>
<p><strong>关键字 ： if</strong>       判断条件是否满足</p>
<p>​				<strong>elif</strong>     当不满足if条件是流程进入elif</p>
<p>​				<strong>else</strong>   以上都不满足条件时就走else，兜底的</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;
</span><span class="s1">流程控制即控制流程，具体指控制程序的执行流程，而程序的执行流程分为三种结构：
</span><span class="s1">	顺序结构（之前我们写的代码都是顺序结构）
</span><span class="s1">    	从上到下执行你写的代码
</span><span class="s1">        
</span><span class="s1">    分支结构（用到if判断）
</span><span class="s1">    	根据条件的不同执行不同的操作
</span><span class="s1">        
</span><span class="s1">    循环结构（用到while与for）
</span><span class="s1">    	重复执行某一段代码(操作)
</span><span class="s1">        
</span><span class="s1">   
</span><span class="s1">分支结构（用到if判断）
</span><span class="s1">    	根据条件的不同执行不同的操作
</span><span class="s1">&#39;&#39;&#39;</span>
    
<span class="c1"># 如果女人的年龄大于40岁 叫阿姨</span>
<span class="c1"># age = 28</span>
<span class="c1"># if age &gt; 40:  # 遇到冒号 说明后面的代码需要缩进(默认是4格)</span>
<span class="c1">#     print(&#39;阿姨好&#39;)</span>
<span class="c1">#     # print子代码只有在if后面的条件成立的情况下才会执行</span>

<span class="c1"># 如果女人的年龄大于40岁叫阿姨否则叫小姐姐</span>
<span class="c1"># age = 45</span>
<span class="c1"># if age &gt; 40:</span>
<span class="c1">#     print(&#39;阿姨好&#39;)</span>
<span class="c1"># else:</span>
<span class="c1">#     print(&#39;小姐姐 加个微信吧&#39;)</span>
    <span class="c1"># 当if条件不成立的时候就会走else</span>
<span class="s1">&#39;&#39;&#39;if和else连用的情况下 两者只会执行一个
</span><span class="s1">走了if肯定不走else
</span><span class="s1">走了else说明if不成立
</span><span class="s1">&#39;&#39;&#39;</span>


<span class="c1"># 如果：成绩&gt;=90，那么：优秀</span>
<span class="c1"># 如果成绩&gt;=80且&lt;90,那么：良好</span>
<span class="c1"># 如果成绩&gt;=70且&lt;80,那么：普通</span>
<span class="c1"># 其他情况：很差</span>
<span class="n">score</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;score&gt;&gt;&gt;:&#39;</span><span class="p">)</span>
<span class="n">score</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">score</span><span class="p">)</span>  <span class="c1"># 忽略</span>
<span class="k">if</span> <span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">90</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;优秀&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">80</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;良好&#39;</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">score</span> <span class="o">&gt;=</span> <span class="mi">70</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;普通&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;你不行！！！&#39;</span><span class="p">)</span>
<span class="s1">&#39;&#39;&#39;
</span><span class="s1">if...elif...else
</span><span class="s1">三者连用 也是只会走一个
</span><span class="s1">&#39;&#39;&#39;</span>
<span class="s1">&#39;&#39;&#39;
</span><span class="s1">语法结构
</span><span class="s1">if 条件1:   # 如果条件1的结果为True，就依次执行：代码1、代码2，......
</span><span class="s1">  　代码1
</span><span class="s1">    代码2
</span><span class="s1">    ......
</span><span class="s1">elif 条件2: # 如果条件2的结果为True，就依次执行：代码3、代码4，......
</span><span class="s1">  　代码3
</span><span class="s1">    代码4
</span><span class="s1">    ......
</span><span class="s1">elif 条件3: # 如果条件3的结果为True，就依次执行：代码5、代码6，......
</span><span class="s1">  　代码5
</span><span class="s1">    代码6
</span><span class="s1">    ......
</span><span class="s1">else:　　   # 其它情况，就依次执行：代码7、代码8，......
</span><span class="s1">    代码7
</span><span class="s1">    代码8
</span><span class="s1">    ......
</span><span class="s1">&#39;&#39;&#39;</span>

</code></pre></div><h3 id="python中的缩进">python中的缩进</h3>
<p><strong>遇到冒号就缩进！</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;在python中用缩进来表示代码的从属关系
</span><span class="s1">如果一行代码下面的代码缩进了说明下面的代码属于上面的代码&#39;&#39;&#39;</span>
<span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">40</span><span class="p">:</span>  <span class="c1"># 遇到冒号 说明后面的代码需要缩进(默认是4格)</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;阿姨好&#39;</span><span class="p">)</span>
    <span class="c1"># 此处print就属于if的子代码</span>
 
<span class="s1">&#39;&#39;&#39;并不是所有的代码都可以有子代码的权限
</span><span class="s1">截止目前为止 唯一可以有子代码的关键字就是if
</span><span class="s1">
</span><span class="s1">属于同一个的代码的多个子代码一定要保证相同的缩进量，python中推荐缩进4个空格(在windows中tab键刚好就是4个空格)
</span><span class="s1">
</span><span class="s1">小技巧:你可以看代码后面有没有冒号 如果有 下面的代码肯定要缩进  &#39;&#39;&#39;</span>
</code></pre></div><h3 id="作业">作业</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="c1"># 练习1：接收用户输入的用户名密码，打印成指定格式</span>

<span class="n">info</span> <span class="o">=</span> <span class="s1">&#39;亲爱的用户</span><span class="si">%s</span><span class="s1">!您的账户密码已设置为</span><span class="si">%s</span><span class="s1">&#39;</span>
<span class="n">user1</span> <span class="o">=</span> <span class="n">info</span> <span class="o">%</span> <span class="p">(</span><span class="s1">&#39;Eddy&#39;</span><span class="p">,</span> <span class="mi">521</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">user1</span><span class="p">)</span>

        
    
<span class="s1">&#39;&#39;&#39;# 练习2：用户输入姓名、年龄、工作、爱好 ，然后打印成以下格式
</span><span class="s1">------------ info of Tony -----------
</span><span class="s1">Name  : Tony
</span><span class="s1">Age   : 22
</span><span class="s1">Sex   : male
</span><span class="s1">Job   : Teacher 
</span><span class="s1">------------- end -----------------&#39;&#39;&#39;</span>

<span class="c1">#解2：</span>
<span class="n">name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;姓名:&#39;</span><span class="p">)</span>
<span class="n">age</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;年龄:&#39;</span><span class="p">)</span>
<span class="n">sex</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;性别:&#39;</span><span class="p">)</span>
<span class="n">job</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;工作:&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;--------info of&#39;</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="s1">&#39;--------&#39;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;Name: &#39;</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;Age: &#39;</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;Sex: &#39;</span><span class="p">,</span> <span class="n">sex</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;Job: &#39;</span><span class="p">,</span> <span class="n">job</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;---------end------------------&#39;</span><span class="p">)</span>



<span class="c1"># 练习3:使用if判断尝试着编写一个用户登录功能</span>
<span class="c1">#思路:获取用户的用户名和密码 然后判断是否正确(jason 123)</span>
    
<span class="c1">#解3</span>
<span class="c1">#用户名密码校验题目  校验输入的用户名密码为(Eddy,521)</span>
<span class="n">username</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;用户名:  &#39;</span><span class="p">)</span>
<span class="n">password</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;密码: &#39;</span><span class="p">)</span>
<span class="k">if</span> <span class="n">username</span> <span class="o">==</span> <span class="s1">&#39;Eddy&#39;</span> <span class="ow">and</span> <span class="n">password</span> <span class="o">==</span> <span class="s1">&#39;521&#39;</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;欢迎帅哥~&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;你个冒牌货!&#39;</span><span class="p">)</span>
    
    
<span class="s1">&#39;&#39;&#39; 练习4:成绩评判系统(照着我写的好好理解)
</span><span class="s1">评判规则：&gt;=95 S
</span><span class="s1">		&gt;=90 A+
</span><span class="s1">    	&gt;=85 A
</span><span class="s1">        &gt;=80 A
</span><span class="s1">        &gt;=75 B
</span><span class="s1">        &gt;=70 C
</span><span class="s1">        &lt;70  D
</span><span class="s1">解4               &#39;&#39;&#39;</span>
<span class="n">grade</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s1">&#39;您的学分:&#39;</span><span class="p">)</span>
<span class="n">grade</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">grade</span><span class="p">)</span>
<span class="k">if</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">95</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;S&#39;</span><span class="p">,</span> <span class="n">grade</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">90</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;A+&#39;</span><span class="p">,</span> <span class="n">grade</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">85</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">,</span> <span class="n">grade</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">80</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">,</span> <span class="n">grade</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">75</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">,</span> <span class="n">grade</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s1">&#39;D&#39;</span><span class="p">,</span> <span class="n">grade</span><span class="p">)</span>


</code></pre></div><h3 id="jason老湿送的一句话">Jason老湿送的一句话</h3>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;我们每一次的进步都是一次赶鸭子上架的过程&#39;&#39;&#39;</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Python之初识Python</title>
			<link>https://Eddy-622.github.io/posts/python%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
			<pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/python%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
			<description>10.28回顾   简单的cmd操作 选择盘符E: ， cd 切换目录，dir显示当前列表
  路径的概念
​	相对路径
​	绝对路径
  环境变量的设置
win7 大同小异，win7注意单行地址栏操作各路径之间用；隔开
win10
  解释器的多版本共存
配置不同的环境变量以及拷贝exe文件修改文件名以达到共存的目的
  执行python程序
cmd窗口中输入代码
txt，word等文件中输入代码，用解释器执行
专业的python编辑器
  python编辑器推荐
vscode 凑合用，适合老手
anaconda 主要用途为数据分析、
pycharm 好东西，要钱，破解
  pycharm的使用
&amp;#39;&amp;#39;&amp;#39;安装好设置好文件存放路径已经选择好解释器版本后启动新建py文件，写入代码，运行文件&amp;#39;&amp;#39;&amp;#39;  文件后缀名
&amp;#39;&amp;#39;&amp;#39;明确对文件的分类，使人一眼就能看懂文件的类型&amp;#39;&amp;#39;&amp;#39;  今日内容   python中的注释 &amp;#39;&amp;#39;&amp;#39;注释就是对于一段代码的文字解释。python中的注释是用来给人看，给自己看，帮助理解代码使用的方便后期更新维护方式1（单行注释）#或选中注释区域后使用 快捷键 CTRL + /再次激活快捷键为解开注释&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;方式2（多行注释）&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;三个单引号&amp;#39;&amp;#39;&amp;#39;&amp;#34;&amp;#34;&amp;#34;三个双引号&amp;#34;&amp;#34;&amp;#34;  python中的变量 &amp;#39;&amp;#39;&amp;#39;1.</description>
			<content type="html"><![CDATA[<h1 id="1028回顾">10.28回顾</h1>
<ul>
<li>
<p>简单的cmd操作     选择盘符E: ， cd 切换目录，dir显示当前列表</p>
</li>
<li>
<p>路径的概念</p>
<p>​	相对路径</p>
<p>​	绝对路径</p>
</li>
<li>
<p>环境变量的设置</p>
<p>win7    大同小异，win7注意单行地址栏操作各路径之间用；隔开</p>
<p>win10</p>
</li>
<li>
<p>解释器的多版本共存</p>
<p>配置不同的环境变量以及拷贝exe文件修改文件名以达到共存的目的</p>
</li>
<li>
<p>执行python程序</p>
<p>cmd窗口中输入代码</p>
<p>txt，word等文件中输入代码，用解释器执行</p>
<p>专业的python编辑器</p>
</li>
<li>
<p>python编辑器推荐</p>
<p>vscode  凑合用，适合老手</p>
<p>anaconda   主要用途为数据分析、</p>
<p>pycharm  好东西，要钱，破解</p>
</li>
<li>
<p>pycharm的使用</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;安装好设置好文件存放路径已经选择好解释器版本后启动
</span><span class="s1">新建py文件，写入代码，运行文件&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<p>文件后缀名</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;明确对文件的分类，使人一眼就能看懂文件的类型&#39;&#39;&#39;</span>
</code></pre></div></li>
</ul>
<h1 id="今日内容">今日内容</h1>
<ul>
<li>
<h4 id="python中的注释">python中的注释</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;注释就是对于一段代码的文字解释。
</span><span class="s1">  
</span><span class="s1">python中的注释是用来给人看，给自己看，帮助理解代码使用的
</span><span class="s1">方便后期更新维护
</span><span class="s1">  方式1（单行注释）
</span><span class="s1">      #
</span><span class="s1">   或选中注释区域后使用  快捷键 CTRL + /
</span><span class="s1">    再次激活快捷键为解开注释&#39;&#39;&#39;</span>
      
    <span class="s1">&#39;&#39;&#39;方式2（多行注释）&#39;&#39;&#39;</span>
    <span class="s1">&#39;&#39;&#39;三个单引号&#39;&#39;&#39;</span>
    <span class="s2">&#34;&#34;&#34;三个双引号&#34;&#34;&#34;</span>
</code></pre></div></li>
<li>
<h4 id="python中的变量">python中的变量</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;1.什么是变量？
</span><span class="s1">  即变化的量，用来描述事物状态的变化
</span><span class="s1">      
</span><span class="s1">2.为什么有变量?
</span><span class="s1">   用来记录事物状态&#39;&#39;&#39;</span>
    <span class="c1">#为了让计算机能够像人一样去记忆事物的某种状态，并且状态是可以发生变化的</span>
  <span class="c1"># 详细地说：</span>
  <span class="c1"># 程序执行的本质就是一系列状态的变化，变是程序执行的直接体现，所以我们需要有一种机制能够反映或者说是保存下来程序执行时状态，以及状态的变化。</span>
      
   <span class="s1">&#39;&#39;&#39; 思考问题，对一个只是点的掌握从三个方面思考
</span><span class="s1">     这玩意是什么
</span><span class="s1">     为什么需要这个玩意
</span><span class="s1">     这玩意如何使用&#39;&#39;&#39;</span>
          
<span class="s1">&#39;&#39;&#39;3.如何使用变量
</span><span class="s1">  name = &#39;Eddy&#39;
</span><span class="s1">    age = 18
</span><span class="s1">    
</span><span class="s1">变量名   赋值符号   变量的值
</span><span class="s1">  
</span><span class="s1">通过赋值符号将变量值赋值给变量名
</span><span class="s1">以后就可以通过变量名来访问变量值&#39;&#39;&#39;</span>
<span class="c1">#pycharm中 快速复制一行代码   CTRL +  D</span>
  
</code></pre></div><h4 id="变量的命名规则必须遵守">变量的命名规则：必须遵守</h4>
<p>1.变量名只能是数字、字母、下划线三者的组合</p>
<p>2.不能以数字开头，也不推荐下划线开头</p>
<p>3.变量名不能与关键字冲突。</p>
</li>
<li>
<p>变量名的命名风格：可以不遵守</p>
<p>1.下划线  python中推荐使用</p>
<pre><code>Age_of_eddy = 18
</code></pre><p>2.小驼峰  Javascript中推荐使用</p>
<pre><code>ageOfEddy = 18
</code></pre><p>3.大驼峰</p>
<pre><code>AgeOFeddy = 18
</code></pre><h4 id="常量">常量</h4>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="s1">&#39;&#39;&#39;即不变的量或很少变的量
</span><span class="s1">python中没有绝对的常量，即所有的量都可以修改
</span><span class="s1">但是作为python程序员我们会约定俗称的将常量的变量名全部大写来表示常量
</span><span class="s1">修改之前提醒校验是否可以修改
</span><span class="s1">例如：
</span><span class="s1">   HOST = &#39;127.0.0.1&#39;&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<h4 id="数据类型">数据类型</h4>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="s1">&#39;&#39;&#39;查看数据类型  type()&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<h4 id="整型-int">整型 int</h4>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="s1">&#39;&#39;&#39;整型就是整数
</span><span class="s1">作用：用来记录人的年龄，出生年份等整数相关的状态
</span><span class="s1">age = 18
</span><span class="s1">  
</span><span class="s1">python中表示整型的关键字是int&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<h4 id="浮点型float">浮点型float</h4>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="s1">&#39;&#39;&#39;浮点型可以看作是带有小数点的小数
</span><span class="s1">作用，用来记录薪资，身高，体重等多伴随小数相关的状态
</span><span class="s1">salary = 3.1
</span><span class="s1">weight = 55.5
</span><span class="s1">  
</span><span class="s1">python  中浮点型关键字为float&#39;&#39;&#39;</span>
</code></pre></div></li>
<li>
<h4 id="字符串str">字符串str</h4>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="s1">&#39;&#39;&#39;本质就是文本信息
</span><span class="s1">用来记录姓名，住址等描述性信息的状态
</span><span class="s1">字符串的左右两边要用引号引起来&#39;&#39;&#39;</span>
  
<span class="s1">&#39;&#39;&#39;第一种 单个单引号
</span><span class="s1">name = &#39;Eddy&#39;
</span><span class="s1">第二章 单组双引号
</span><span class="s1">name = &#34;Eddy&#34;&#39;&#39;&#39;</span>
<span class="s2">&#34;&#34;&#34;第三种
</span><span class="s2">  1.三组单引号
</span><span class="s2">  name = &#39;&#39;&#39;eddy&#39;&#39;&#39;
</span><span class="s2">  2.三组双引号&#34;&#34;&#34;</span>
  <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;eddy&#34;&#34;&#34;</span>
<span class="s1">&#39;&#39;&#39;1.为什么三引号既可以是注释又可以是字符串，两个如何区分？
</span><span class="s1">    当三引号左边没有出现赋值符号和变量名的时候那么它就是注释
</span><span class="s1">    如果左边出现了赋值符号和变量名那么它就是字符串
</span><span class="s1">  
</span><span class="s1">  
</span><span class="s1">2.为什么定义字符串需要用到这么多方式？
</span><span class="s1">  为了防止字符串内部可能也需要用到引号&#39;&#39;&#39;</span>
  
<span class="c1"># 外层用单引号内层就用双引号</span>
<span class="n">info</span> <span class="o">=</span> <span class="s1">&#39;jason老师说:&#34;我们要好好学习,衣锦还乡&#34;&#39;</span>
<span class="c1"># 外层用双引号内层就用单引号</span>
<span class="n">info1</span> <span class="o">=</span> <span class="s2">&#34;jason老师说:&#39;我们要好好学习,衣锦还乡&#39;&#34;</span>
<span class="c1"># 总之一句话:内外层不要出现引号的冲突即可</span>
  
<span class="s1">&#39;字符串的操作&#39;</span>
<span class="n">str1</span> <span class="o">=</span> <span class="s1">&#39;Eddy&#39;</span>
<span class="n">str2</span> <span class="o">=</span> <span class="s1">&#39;NB&#39;</span>
<span class="k">print</span><span class="p">(</span><span class="n">str1</span> <span class="o">+</span> <span class="n">str2</span><span class="p">)</span> <span class="c1">#字符串的拼接操作  EddyNB</span>
  
<span class="n">str3</span> <span class="o">=</span> <span class="n">str1</span> <span class="o">+</span> <span class="n">str2</span>
<span class="k">print</span><span class="p">(</span><span class="n">str3</span> <span class="o">*</span> <span class="mi">100</span><span class="p">)</span> <span class="c1">#EddyNB 重复100次</span>
  
</code></pre></div></li>
<li>
<h4 id="列表list">列表list</h4>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="s1">&#39;&#39;&#39;列表的内部可以储存多个元素，并且可以是任意数据类型
</span><span class="s1">元素于元素之间逗号分隔，符号为[]
</span><span class="s1">存取数据，为了将来更方便的取&#39;&#39;&#39;</span>
  
<span class="n">students_name</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;jason&#39;</span><span class="p">,</span> <span class="s1">&#39;egon&#39;</span><span class="p">,</span> <span class="s1">&#39;kevin&#39;</span><span class="p">,</span> <span class="s1">&#39;tony&#39;</span><span class="p">]</span>
<span class="n">l1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">123</span><span class="p">,</span> <span class="mf">1.11</span><span class="p">,</span> <span class="s1">&#39;jason&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">students_name</span><span class="p">),</span> <span class="nb">type</span><span class="p">(</span><span class="n">l1</span><span class="p">))</span>
  
<span class="c1"># 索引取值:索引是从0开始的</span>
<span class="c1"># print(students_name[0])</span>
<span class="c1"># print(students_name[1])</span>
<span class="c1"># 索引取值练习题</span>
<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;jason&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;egon&#39;</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;jasonNB&#39;</span><span class="p">,</span> <span class="s1">&#39;egonDSB&#39;</span><span class="p">]]]]</span>
<span class="c1"># 遇到嵌套问题 先看最外层到底有几个元素</span>
<span class="n">l1</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># 将索引取值获取到的元素赋值给l1</span>
<span class="c1"># print(l1)  # [&#39;jason&#39;, [&#39;egon&#39;, 123, [&#39;jasonNB&#39;, &#39;egonDSB&#39;]]]</span>
<span class="c1"># l1其实就两个元素</span>
<span class="n">l2</span> <span class="o">=</span> <span class="n">l1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="c1"># print(l2)  # [&#39;egon&#39;, 123, [&#39;jasonNB&#39;, &#39;egonDSB&#39;]]</span>
<span class="n">l3</span> <span class="o">=</span> <span class="n">l2</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="c1"># print(l3)  # [&#39;jasonNB&#39;, &#39;egonDSB&#39;]</span>
<span class="c1"># print(l3[1])</span>
<span class="s1">&#39;&#39;&#39;基于上述的分步思想 其实我们可以写出下面一行代码&#39;&#39;&#39;</span>
<span class="n">name</span> <span class="o">=</span> <span class="n">l</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></li>
<li>
<h4 id="字典dict">字典dict</h4>
<div class="highlight"><pre class="chroma"><code class="language-py" data-lang="py"><span class="s1">&#39;&#39;&#39;字典的符号是{}
</span><span class="s1">它是以key:value键值对的形式存储数据
</span><span class="s1">  key是对value的描述性信息(key一般情况下都是字符串)
</span><span class="s1">  value是真正的数据(value可以是任意数据类型)
</span><span class="s1">字典也可以存储多个元素，元素是key:value键值对的形式
</span><span class="s1">键值对之间用逗号隔开
</span><span class="s1">&#39;&#39;&#39;</span>
<span class="n">jason_dict</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;username&#39;</span><span class="p">:</span> <span class="s1">&#39;jason&#39;</span><span class="p">,</span>
    <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="s1">&#39;password&#39;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
    <span class="s1">&#39;province&#39;</span><span class="p">:</span> <span class="s1">&#39;安徽&#39;</span>
<span class="p">}</span>
  
  
<span class="c1"># 字典的取值  字典内部其实是无序的 无法使用索引的方式取值</span>
<span class="c1"># 取值方式1</span>
<span class="k">print</span><span class="p">(</span><span class="n">jason_dict</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">])</span>  <span class="c1"># jason  将字典中key为username对于的value值取出</span>
<span class="c1"># 取值方式2</span>
<span class="k">print</span><span class="p">(</span><span class="n">jason_dict</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;hobby&#39;</span><span class="p">))</span>  <span class="c1"># [&#39;read&#39;, &#39;run&#39;, &#39;JDB&#39;]</span>
  
  
<span class="s1">&#39;小练习&#39;</span>
<span class="n">jason_dict</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;username&#39;</span><span class="p">:</span> <span class="s1">&#39;jason&#39;</span><span class="p">,</span>
    <span class="s1">&#39;age&#39;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
    <span class="s1">&#39;password&#39;</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
    <span class="s1">&#39;province&#39;</span><span class="p">:</span> <span class="p">{</span>
        <span class="s1">&#39;北京&#39;</span><span class="p">:[</span><span class="s1">&#39;沙河&#39;</span><span class="p">,</span><span class="s1">&#39;朝阳&#39;</span><span class="p">,</span><span class="s1">&#39;昌平&#39;</span><span class="p">],</span>
        <span class="s1">&#39;上海&#39;</span><span class="p">:[</span><span class="s1">&#39;静安&#39;</span><span class="p">,</span><span class="s1">&#39;金山&#39;</span><span class="p">,</span><span class="s1">&#39;嘉定&#39;</span><span class="p">],</span>
        <span class="s1">&#39;安徽&#39;</span><span class="p">:[</span><span class="s1">&#39;黄山&#39;</span><span class="p">,</span><span class="s1">&#39;芜湖&#39;</span><span class="p">,</span><span class="s1">&#39;合肥&#39;</span><span class="p">]</span>
    <span class="p">},</span>
    <span class="s1">&#39;hobby&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;read&#39;</span><span class="p">,</span> <span class="s1">&#39;run&#39;</span><span class="p">,</span> <span class="s1">&#39;JDB&#39;</span><span class="p">]</span>
<span class="p">}</span>
<span class="s1">&#39;&#39;&#39;获取jason的老巢 &#34;芜湖&#34;&#39;&#39;&#39;</span>
<span class="k">print</span><span class="p">(</span><span class="s1">&#39;province&#39;</span><span class="p">)(</span><span class="s1">&#39;安徽&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
  
  
  
<span class="n">place</span> <span class="o">=</span> <span class="p">(</span><span class="n">jason_dict</span><span class="p">[</span><span class="s1">&#39;province&#39;</span><span class="p">])</span>
<span class="n">jason_home</span> <span class="o">=</span> <span class="p">(</span><span class="n">place</span><span class="p">[</span><span class="s1">&#39;安徽&#39;</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">jason_home</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
  
</code></pre></div></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>计算机基础知识</title>
			<link>https://Eddy-622.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
			<pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
			<description>10.27回顾 1.计算机的由来  1623年：德国科学家契克卡德（W. Schickard）制造了人类有史以来第一台机械计算机，这台机器能够 进行六位数的加减乘除运算。 1642年：法国科学家帕斯卡（B.Pascal）发明了著名的帕斯卡机械计算机，首次确立了计算机器的概念。 1674年：莱布尼茨改进了帕斯卡的计算机，使之成为一种能够进行连续运算的机器，并且提出了“二进制”数的概念。（据说这个概念来源于中国的八卦） 此后发展了两百多年于 1895年： 英国青年工程师弗莱明（J.Fleming）通过“爱迪生效应”发明了人类第一只电子管。 从此进入电子管时代 1943年：10月，绰号为“巨人”的用来破译德军密码的计算机在英国布雷契莱庄园制造成功，此后又制造多台，为第二次世界大战的胜利立下了汗马功劳。  2.计算机的工作原理  计算机通过识别0101的二进制数值进行工作  3.计算机的硬件组成  控制器 （控制计算机各部分的运行，下达指令） 运算器 （进行逻辑运算，判断对错） 储存器 (数据的短期长期储存) 输入设备 (键盘鼠标等人机交互设备) 输出设备(显示器，扬声器等)  4.计算机三大核心硬件  CPU	中央运算处理器 (计算机的大脑，集成了控制器运算器，以及最新的AR模块和集成显卡） 内存	与cpu直接进行沟通，进行数据吞吐，读写速度快，但是断电后会清空所有数据 硬盘	负责数据的长期的储存，虽然读写速度想对慢的多，但是理论情况下可以实现对数据的完整保 存  5.操作系统   windows 、MacOS 、Linux、ubuntu
操作系统就是充当人与计算机之间沟通的桥梁，因为计算机只认识01二进制数值，返回的	数值也生涩僵硬难懂，操作系统可以高效率的将指令传达给计算机，并且返回的指令进行	可视化处理，人类看起来更加方便，易懂。
  6.三层架构  应用程序	我们所使用的所有软件即是应用程序层面的，侧重与用户的使用体验 操作系统	基于底层架构起来的系统，也属于应用层序，不过侧重于与计算的交互 计算机硬件	即计算机本身的实体化部分，CPU内存等，随着迭代，性能不断增强  7.编程语言  人和计算机沟通的语言，把人类的语言编写成计算机可以听懂看懂的语言，已达到为计算机下达工作指令的目的  8.编程  将编程语言编写下来的过程就是编程  9.编程语言的发展史  机器语言	计算机的原生语言，0101的二进制字符 晦涩难懂，难学难用 汇编语言	使用特定的英文字母代替二进制字符，语言进化迭代的产物 高级语言	使用人类的语言单词，简单易懂，目前的主流语言python，Java，C++等  10.</description>
			<content type="html"><![CDATA[<h1 id="1027回顾">10.27回顾</h1>
<h4 id="1计算机的由来">1.计算机的由来</h4>
<ul>
<li>1623年：德国科学家契克卡德（W. Schickard）制造了人类有史以来第一台机械计算机，这台机器能够  进行六位数的加减乘除运算。
1642年：法国科学家帕斯卡（B.Pascal）发明了著名的帕斯卡机械计算机，首次确立了计算机器的概念。
1674年：莱布尼茨改进了帕斯卡的计算机，使之成为一种能够进行连续运算的机器，并且提出了“二进制”数的概念。（据说这个概念来源于中国的八卦）
此后发展了两百多年于
1895年： 英国青年工程师弗莱明（J.Fleming）通过“爱迪生效应”发明了人类第一只电子管。
从此进入电子管时代
1943年：10月，绰号为“巨人”的用来破译德军密码的计算机在英国布雷契莱庄园制造成功，此后又制造多台，为第二次世界大战的胜利立下了汗马功劳。</li>
</ul>
<h4 id="2计算机的工作原理">2.计算机的工作原理</h4>
<ul>
<li>计算机通过识别0101的二进制数值进行工作</li>
</ul>
<h4 id="3计算机的硬件组成">3.计算机的硬件组成</h4>
<ul>
<li>控制器 （控制计算机各部分的运行，下达指令）
运算器 （进行逻辑运算，判断对错）
储存器 (数据的短期长期储存)
输入设备 (键盘鼠标等人机交互设备)
输出设备(显示器，扬声器等)</li>
</ul>
<h4 id="4计算机三大核心硬件">4.计算机三大核心硬件</h4>
<ul>
<li>CPU		中央运算处理器 (计算机的大脑，集成了控制器运算器，以及最新的AR模块和集成显卡）
内存	与cpu直接进行沟通，进行数据吞吐，读写速度快，但是断电后会清空所有数据
硬盘	负责数据的长期的储存，虽然读写速度想对慢的多，但是理论情况下可以实现对数据的完整保   存</li>
</ul>
<h4 id="5操作系统">5.操作系统</h4>
<ul>
<li>
<p>windows 、MacOS 、Linux、ubuntu</p>
<p>操作系统就是充当人与计算机之间沟通的桥梁，因为计算机只认识01二进制数值，返回的				数值也生涩僵硬难懂，操作系统可以高效率的将指令传达给计算机，并且返回的指令进行					可视化处理，人类看起来更加方便，易懂。</p>
</li>
</ul>
<h4 id="6三层架构">6.三层架构</h4>
<ul>
<li>应用程序		我们所使用的所有软件即是应用程序层面的，侧重与用户的使用体验
操作系统		基于底层架构起来的系统，也属于应用层序，不过侧重于与计算的交互
计算机硬件		即计算机本身的实体化部分，CPU内存等，随着迭代，性能不断增强</li>
</ul>
<h4 id="7编程语言">7.编程语言</h4>
<ul>
<li>人和计算机沟通的语言，把人类的语言编写成计算机可以听懂看懂的语言，已达到为计算机下达工作指令的目的</li>
</ul>
<h4 id="8编程">8.编程</h4>
<ul>
<li>将编程语言编写下来的过程就是编程</li>
</ul>
<h4 id="9编程语言的发展史">9.编程语言的发展史</h4>
<ul>
<li>机器语言	计算机的原生语言，0101的二进制字符  晦涩难懂，难学难用
汇编语言	使用特定的英文字母代替二进制字符，语言进化迭代的产物
高级语言	使用人类的语言单词，简单易懂，目前的主流语言python，Java，C++等</li>
</ul>
<h4 id="10编程语言分类">10.编程语言分类</h4>
<ul>
<li>编译型：将编程下来的语言一次性编译给操作系统，跨平台性不高
解释型：真的不同的平台有不同的解释器，只需要写一遍代码即可解释成不同操作系统可识别的语言，通用性高，跨平台语言。</li>
</ul>
<h4 id="11解释器下载安装与启动">11.解释器下载安装与启动</h4>
<ul>
<li>再装不好吃屎去吧</li>
</ul>
<h1 id="今日内容">今日内容</h1>
<h4 id="1环境变量">1.环境变量</h4>
<ul>
<li>
<p>通过设置系统的环境变量可以达成在CMD命令窗口不进入软件路径下直接启动软件的目的。
原理是在CMD窗口下运行命令时，计算机会读取设置的各项环境变量路径寻找符合条件的命令，
如果没有，所处路径又不对，则报错
·计算机右键属性==&gt;高级系统设置==&gt;环境变量
在下面系统变量中找到path，双击打开
新建==&gt;将软件路径添加到里面即可。
如果添加完成后还不能在CMD窗口中正常启动则
· 设置变量后CMD窗口需重启才能生效
· 校验变量路径，是否存储在用户变量上
· 软件过多时path的变量路径过多，则可能有名称相同的变量文件，但是软件只有部分功能不能使用
需要把python的路径添加值path变量的最上方，CMD查找使从上往下一次查找，这样就能解决问题。</p>
<p>CMD中查看当前路径下的文件   dir
实现多版本共存
1.将两个版本的python.exe文件所在的路径都添加到环境变量中
2.将两个版本下的python.exe文件拷贝一份修改名字(不要直接修改原文件)</p>
</li>
</ul>
<h4 id="2python的第一个程序">2.python的第一个程序</h4>
<ul>
<li>CMD 窗口下编写程序困难多多，想要挑战自我，没事去玩玩
用处为大多时候的短命令运行
python可以在任意文件中进行编写，txt，word等，但是这些文档仅限于记录的基本功能，没有编程相关的功能提示等。
推荐使用代码编辑器
vscode      ===&gt;新手入门不建议
Anaconda    ===&gt;侧重于数据分析，不在编程
pycharm     ===&gt;专业软件，好用，要钱，贵，破解！
建议安装2020.1版本进行破解
激活码下载网站：http://idea.medeming.com/jets/</li>
</ul>
<h4 id="3pycharm的使用">3.pycharm的使用</h4>
<ul>
<li>1.创建文件夹  ==&gt;文件保存路径，设置于除c盘外的其他盘
2.创建py文件 ==&gt; NEW Python File
3.修改字体大小  ==&gt;File==&gt;setting==&gt;Editor==&gt;General</li>
</ul>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201029021741038.png" alt="image-20201029021741038"></p>
<ul>
<li>​                                          意为使用CTRL+鼠标滚轮进行放大缩小操作，勾上即可
4.设置风格   个人随意
5.切换解释器  ==&gt;File==&gt;setting==&gt;project:py==&gt;python interperter</li>
</ul>
<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201029022215906.png" alt="image-20201029022215906"></p>
<ul>
<li>
<p>此处进行添加不同版本的解释器，也可以实现多版本解释器共存及解释器切换
另外
路径类似于坐标，即目标所在的位置</p>
</li>
<li>
<p>1.相对路径
有一个参考点，基于该参考点所描绘出来的路径
这个路径并不是通用的 
2.绝对路径
不需要有参考点，描绘出来的路径给任何人都可以
明确的找到目标位置</p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Eddy&#39;s Boke</title>
			<link>https://Eddy-622.github.io/posts/eddys-boke/</link>
			<pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
			
			<guid>https://Eddy-622.github.io/posts/eddys-boke/</guid>
			<description>这是我创建的第一个个人网站
刚刚开始摸索其中的乐趣
做的的不好的地方以后会尽量优化
今天也是充满希望的一天Fighting！打工人</description>
			<content type="html"><![CDATA[<p><strong>这是我创建的第一个个人网站</strong></p>
<p><strong>刚刚开始摸索其中的乐趣</strong></p>
<p><strong>做的的不好的地方以后会尽量优化</strong></p>
<p><strong>今天也是充满希望的一天Fighting！打工人</strong></p>
]]></content>
		</item>
		
	</channel>
</rss>
