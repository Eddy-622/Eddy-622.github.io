<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eddy&#39;s Boke</title>
    <link>https://Eddy-622.github.io/</link>
    <description>Recent content on Eddy&#39;s Boke</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 30 Oct 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://Eddy-622.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>常用模块，面向对象，类</title>
      <link>https://Eddy-622.github.io/posts/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B1%BB/</link>
      <pubDate>Thu, 05 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B1%BB/</guid>
      <description>今日内容   常用模块
random模块、时间模块、hashlib模块
  面向对象
什么是对象，什么是类，如何创建类，如何创建对象，基本使用
  今日内容详细 常用模块 python的精髓在于模块，不论是什么功能都可能已经有前人写好打包好的模块供我们使用，所以遇到问题应该先找一下有没有模块已经实现了我想要的功能或大致实现，以减少时间提高效率
&amp;#34;&amp;#34;&amp;#34;利用random随机模块实现随机验证码五位随机验证码，每一位都可以是大写字母小写字母或者数字★ 必备基础知识点英文大小写26个字母与十进制的ASCII码表对应关系A-Z &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 65-90a-z &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 97-122★chr 通过数值表达式把数值转换编码表现的字符这里可以利用for循环 循环五次每一次循环产生三个数据，大写字母，小写字母和数字三个里面随机选取一位import random &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;导入random模块code = &amp;#39;&amp;#39; 将产生的数据拼接到字符串中for i in range(5): &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;for循环五次random_upper = chr(random.randint(65,90))&amp;gt;&amp;gt;&amp;gt;&amp;gt;从65-90数字中随机抽取并通过chr转换为数值表达式所表达的字符产生随机的大写字符random_lower = chr(random.randint(97,122))&amp;gt;&amp;gt;&amp;gt;&amp;gt;产生随机的小写字符random_int = str(random.randint(0,9))&amp;gt;&amp;gt;&amp;gt;&amp;gt;产生随机数字 并转换为字符串格式temp = random.choice([random_supper,random_lower,random_int])&amp;gt;&amp;gt;&amp;gt;&amp;gt;三个随机数字随机抽取一个赋值给tempcode += temp&amp;gt;&amp;gt;&amp;gt;&amp;gt; 五位随机数拼接到code中print(code)把封装成函数def get_code(n) &amp;gt;&amp;gt;&amp;gt;&amp;gt;需要产生n位的随机验证码，code = &amp;#39;&amp;#39; 将产生的数据拼接到字符串中for i in range(n): &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;for循环五次random_upper = chr(random.</description>
    </item>
    
    <item>
      <title>函数分类，形参实参，结构，模块</title>
      <link>https://Eddy-622.github.io/posts/%E5%87%BD%E6%95%B0%E5%88%86%E7%B1%BB%E5%BD%A2%E5%8F%82%E5%AE%9E%E5%8F%82%E7%BB%93%E6%9E%84%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/%E5%87%BD%E6%95%B0%E5%88%86%E7%B1%BB%E5%BD%A2%E5%8F%82%E5%AE%9E%E5%8F%82%E7%BB%93%E6%9E%84%E6%A8%A1%E5%9D%97/</guid>
      <description>今日内容概要   函数
认识学会基本的函数定义，基本的函数使用
  模块
  面向对象
认识，学会如何定义类，如何产生对象，基本的面向对象概念，使用
  今日内容详细 函数 &#39;&#39;&#39;函数相对于是工具，能够提前准备好之后在反复的使用，无需重复制造，可以大大的减少我们的工作时间，提高我们的工作效率在python中函数必须要先定义（创造）之后才能使用函数的定义★ 1.函数在定义阶段只检查语法不执行代码def get_user():username = input(&#39;username&amp;gt;&amp;gt;&amp;gt;:&#39;)password = input(&#39;password&amp;gt;&amp;gt;&amp;gt;:&#39;)print(&#39;%s:%s&#39;%(username,password))★2.函数的调用函数名+括号会执行函数体内部的代码get_user()&#39;&#39;&#39;函数的语法结构 &amp;#34;&amp;#34;&amp;#34;函数的语法结构def get_user():&amp;#39;&amp;#39;&amp;#39;注释&amp;#39;&amp;#39;&amp;#39;username = input(&amp;#39;username&amp;gt;&amp;gt;&amp;gt;:&amp;#39;)password = input(&amp;#39;password&amp;gt;&amp;gt;&amp;gt;:&amp;#39;)print(&amp;#39;%s:%s&amp;#39;(username,password))return &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;返回值1.def 是定义函数的关键字2.get_user 是函数名(类似于变量名，起的时候注意做到见名知意)3.(参数1，参数2) 括号里面可以放参数，意思是在调用函数的时候可以给函数的内部传输额外的数据4.参数 外界传递给函数内部的数据（不是必须的）5.函数的注释 用来解释该函数的功能、使用方式、注意事项6.函数体代码 函数真正的功能逻辑7.return 函数执行完毕之后返回给调用者的信息（该关键字也不是必须的）结构def 函数名 (参数1，参数2，...):&amp;#39;&amp;#39;&amp;#39;函数的注释&amp;#39;&amp;#39;&amp;#39;函数体代码return 返回值&amp;#34;&amp;#34;&amp;#34;函数的分类 &amp;#39;&amp;#39;&amp;#39;1.</description>
    </item>
    
    <item>
      <title>字符编码，字符处理，文件处理，文件操作</title>
      <link>https://Eddy-622.github.io/posts/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
      <description>今日内容概要   字符编码的概念
  文件处理
用python代码来操作文件的创建、书写、修改
  函数
  模块
  面向对象
python本质就是一门面向对象的编程语言
  今日内容详细 知识补充
​	布尔值为False的情况有哪些
​	0 、None 、 &#39;&amp;rsquo; 、[ ] 、 { }
字符编码 &amp;#39;&amp;#39;&amp;#39;有时候当我们打开一个文件的时候发现展示的内容是一段乱码，这种情况是如何产生的，以及如何解决字符编码的研究只针对文本文件，视频音频文件没有字符一说，不在研究范围之内知识回顾1、软件运行前，软件的代码及其相关数据都是存放于硬盘中的2、任何软件的启动都是将数据从硬盘中读入内存，然后cpu从内存中取出指令并执行3、软件运行过程中产生的数据最先都是存放于内存中的，若想永久保存软件产生的数据，则需要将数据由内存写入硬盘普通的文本编辑器阶段1、启动一个文件编辑器（文本编辑器如nodepad++，pycharm，word）阶段2、文件编辑器会将文件内容从硬盘读入内存阶段3、文本编辑器会将刚刚读入内存中的内容显示到屏幕上python解释器阶段1、启动python解释器，此时就相当于启动了一个文本编辑器阶段2、python解释器相当于文本编辑器，从硬盘上将test.py的内容读入到内存中阶段3、python解释器解释执行刚刚读入的内存的内容，开始识别python语法 文本编辑器和python解释器的异同点1、相同点：前两个阶段二者完全一致，都是将硬盘中文件的内容读入内存，详解如下python解释器是解释执行文件内容的，因而python解释器具备读py文件的功能，这一点与文本编辑器一样2、不同点：在阶段3时，针对内存中读入的内容处理方式不同，详解如下文本编辑器将文件内容读入内存后，是为了显示或者编辑，根本不去理会python的语法，而python解释器将文件内容读入内存后，可不是为了给你瞅一眼python代码写的啥，而是为了执行python代码、会识别python语法）计算机由于是基于电工作的，只能识别识别010101二进制数据，但是我们人在使用计算机的时候却可以使用各式各样的文字语言人类的字符	转换过程	二进制数字&amp;#39;&amp;#39;&amp;#39;字符编码发展史 &amp;#39;&amp;#39;&amp;#39;计算机起源于美国美国人用的是英文，而计算机只认识二进制，美国人需要解决英文字符和二进制之间的转换关系(ASCII码)&amp;#34;&amp;#34;&amp;#34;8bit = 1bytes1024bytes = 1KB1024KB = 1MB1024MB = 1GB&amp;#34;&amp;#34;&amp;#34;一家独大ASCII码记录了英文字符和数字之间的转换关系用8位来来表示一个英文字符2**8(其实2的7次方足以表示所有的英文字符，但是考虑到后续可能会出现新的语言，所以留了一位备用)群雄割据自己得开发一套自己的字符编码表中国人GBK编码表记录了中文字符、英文字符跟数字的对应关系用16位来表示一个中文字符，针对英文字符还是用8位(针对生僻字我们可能会使用更高位数来表示)韩国人Euc_kr编码表记录了韩文、英文跟数字的对应关系日本人shift_JIS编码表记录了日文、英文跟数字的对应关系# 每个国家自己使用自己的编码，无法实现国家之间数据的交互&amp;#34;&amp;#34;&amp;#34;在中国电脑上使用GBK编写的文件基于网络发送给日本人打开的时候使用的是shift_JIS编码表，会造成文件乱码现象&amp;#34;&amp;#34;&amp;#34;天下一统为了解决群雄割据的局面，实现数据的统一思想unicode编码表	万国码兼容所有国家的所有编码统一使用16位即2bytes表示数据(针对生僻字会采用更多的位数)我们现在之所以能够在一台计算机上敲出各个国家的文字就是因为我们计算机内存中使用的是unicode编码表unicode的弊端，针对纯英文的文件存储空间会翻倍，随之而来的等待时间也会翻倍这个是我们无法容忍的utf8 万国码的转换格式它是存在与硬盘中的(内存使用unicode硬盘使用utf8)针对中文使用3bytes英文使用1bytes当我们书写文件的时候编码默认使用utf8即可，目前绝大多数的软件使用的都是utf8&amp;#39;&amp;#39;&amp;#39;字符编码和要掌握的内容 变量名.</description>
    </item>
    
    <item>
      <title>While循环，for循环，嵌套，数据类型的内置</title>
      <link>https://Eddy-622.github.io/posts/while%E5%BE%AA%E7%8E%AFfor%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%86%85%E7%BD%AE/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/while%E5%BE%AA%E7%8E%AFfor%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%86%85%E7%BD%AE/</guid>
      <description>上周内容回顾 数据类型 &amp;#39;&amp;#39;&amp;#39;布尔值 bool布尔值的命名传统前面加上is_eg: is_deleteis_status元组 tuplet = (1,2,3,4,5)当容器类型里面只有一个元素的时候也应该将逗号加上集合 sets = {1,2,3,4,5}&amp;#39;&amp;#39;&amp;#39;可变类型与不可变类型 &amp;#39;&amp;#39;&amp;#39; 查询数值的内存地址id()可变类型（列表，字典）值改变内存地址不变不可变类型（整型，浮点型，字符串）值改变内存地址一定变&amp;#39;&amp;#39;&amp;#39;用户交互 &amp;#39;&amp;#39;&amp;#39;获取用户输入inputinput获取到的数据都是字符串类型输出结果print可以一次性输出多个元素，逗号隔开即可&amp;#39;&amp;#39;&amp;#39;格式化输出 &amp;#39;&amp;#39;&amp;#39;占位符 ： %s(可以给任意的数据类型占位)。d%(只能给数字占位)&amp;#39;my name is %sand my age is s%&amp;#39; (Eddy, 18)字符串里有几个占位符，后面给数据的时候就要给出几个真实数据&amp;#39;&amp;#39;&amp;#39;运算符 &amp;#39;&amp;#39;&amp;#39;基本运算符+-*/%**增量赋值x += 1x -= 1x *= 1x /= 1链式赋值a = b = c = 666交叉赋值m = 10n = 999交换m 和 n 的数值方式一利用中间变量tum = mm = n n = tum方式二交叉赋值m,n = n,m解压赋值l = [11,22,33]默认情况下左右两边的个数一定要相等有多少个值就要给多少个变量名a ,b,c = l利用*打破变量名数量的限制a,*_,b = l*_常用来表达无用的数据逻辑运算and or notand连接多个条件，且必须成立，输出结果才为True，有一个条件不成立直接结束，输出Flaseor与and恰恰相反，链接的结果只要一个成立，结果都为True。有一个成立则直接输出结果Truenot取反 not True = Flase身份运算is判断地址是否相等==判断值是否想同值相同内存地址可能不同内存地址相同值一定相同&amp;#39;&amp;#39;&amp;#39;代码的缩进 &amp;#39;&amp;#39;&amp;#39;python中利用代码的缩进来表示代码的从属关系并不是所有的代码都可以又子代码的权限属于同一个代码的多个子代码，子代码之间的缩进必须是相同的遇到冒号说明接下来的代码需要缩进&amp;#39;&amp;#39;&amp;#39;流程控制值if判断 &amp;#39;&amp;#39;&amp;#39;if的固定句式if 条件1:代码1代码2elif 条件2:代码1代码2elif 条件3:代码1代码2else :代码1代码2那个条件成立就会执行哪个条件的子代码其他的都不会被执行所有条件代码中只会被执行一个&amp;#39;&amp;#39;&amp;#39;今日内容 if 判断结束 循环结构值while循环 循环结构之for循环 数据类型的内置方法 字符编码 今日内容详细 if判断 &amp;#39;&amp;#39;&amp;#39;if的嵌套(代码的缩进以及子代码的从属关系)eg:如果女人的年龄小于28岁且定义为漂亮的则上去要微信如果成功则邀请看电影吃饭逛街不成功则 打扰了&amp;#39;&amp;#39;&amp;#39;age = 26is_beautiful = Trueis_success = Trueif age &amp;lt; 28 and is_beautifulprint(&amp;#39;小姐姐加个微信&amp;#39;)#二次判断 if is_success:print(&amp;#39;我们去吃饭看电影逛街吧&amp;#39;)else:print(&amp;#39;打扰了&amp;#39;)else:print(&amp;#39;不好意思认错人了&amp;#39;)循环结构之while循环 break 用于结束离他最近的while循环</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://Eddy-622.github.io/about-hugo/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/about-hugo/</guid>
      <description>此博客创建于2020-10-30
用以记录学习数据分析以及python中遇到的各种问题
定期上传更新学习中的课程笔记等</description>
    </item>
    
    <item>
      <title>用户交互、格式化输出、运算符、流程控制</title>
      <link>https://Eddy-622.github.io/posts/%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E8%BF%90%E7%AE%97%E7%AC%A6%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E8%BF%90%E7%AE%97%E7%AC%A6%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6-/</guid>
      <description>10.29内容回顾   代码的注释
&amp;#39;&amp;#39;&amp;#39;1.# 单行注释2.&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;,&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34;&amp;#34; 多行注释在pycharm中的快捷键ctrl+? 注释快捷键，再次激活取消注释&amp;#39;&amp;#39;&amp;#39;  变量
&amp;#39;&amp;#39;&amp;#39;语法规范变量名 赋值符号 变量的值&amp;#39;&amp;#39;&amp;#39;name = &amp;#39;Eddy&amp;#39;&amp;#34;&amp;#34;&amp;#34;遇到赋值符号先看符号右边的再看符号左边的&amp;#34;&amp;#34;&amp;#34;# 情况1  name = &amp;#39;jason&amp;#39;name = &amp;#39;egon&amp;#39;name = &amp;#39;tony&amp;#39;&amp;#39;&amp;#39;&amp;#39;name依次被赋予 jason egon tony 三个值，但是最后只能指向一个值所有此时name对应的值为 tony&amp;#39;&amp;#39;&amp;#39;# 情况2 name = &amp;#39;jason&amp;#39;name1 = namename2 = name&amp;#39;&amp;#39;&amp;#39;name被赋予Jason，name1,name2 同时被赋予name的值所有 name1 = name2 = name = Jason&amp;#39;&amp;#39;&amp;#39;  变量的命名规范(必须遵守)
&amp;#39;&amp;#39;&amp;#39;1.只能包含数字、字母、下划线2.数字不能开头、下划线也尽量不要开头(隐藏变量)3.</description>
    </item>
    
    <item>
      <title>初识Python</title>
      <link>https://Eddy-622.github.io/posts/python%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/python%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>10.28回顾   简单的cmd操作 选择盘符E: ， cd 切换目录，dir显示当前列表
  路径的概念
​	相对路径
​	绝对路径
  环境变量的设置
win7 大同小异，win7注意单行地址栏操作各路径之间用；隔开
win10
  解释器的多版本共存
配置不同的环境变量以及拷贝exe文件修改文件名以达到共存的目的
  执行python程序
cmd窗口中输入代码
txt，word等文件中输入代码，用解释器执行
专业的python编辑器
  python编辑器推荐
vscode 凑合用，适合老手
anaconda 主要用途为数据分析、
pycharm 好东西，要钱，破解
  pycharm的使用
&amp;#39;&amp;#39;&amp;#39;安装好设置好文件存放路径已经选择好解释器版本后启动新建py文件，写入代码，运行文件&amp;#39;&amp;#39;&amp;#39;  文件后缀名
&amp;#39;&amp;#39;&amp;#39;明确对文件的分类，使人一眼就能看懂文件的类型&amp;#39;&amp;#39;&amp;#39;  今日内容   python中的注释 &amp;#39;&amp;#39;&amp;#39;注释就是对于一段代码的文字解释。python中的注释是用来给人看，给自己看，帮助理解代码使用的方便后期更新维护方式1（单行注释）#或选中注释区域后使用 快捷键 CTRL + /再次激活快捷键为解开注释&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;方式2（多行注释）&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;&amp;#39;三个单引号&amp;#39;&amp;#39;&amp;#39;&amp;#34;&amp;#34;&amp;#34;三个双引号&amp;#34;&amp;#34;&amp;#34;  python中的变量 &amp;#39;&amp;#39;&amp;#39;1.</description>
    </item>
    
    <item>
      <title>计算机基础知识</title>
      <link>https://Eddy-622.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>10.27回顾 1.计算机的由来  1623年：德国科学家契克卡德（W. Schickard）制造了人类有史以来第一台机械计算机，这台机器能够 进行六位数的加减乘除运算。 1642年：法国科学家帕斯卡（B.Pascal）发明了著名的帕斯卡机械计算机，首次确立了计算机器的概念。 1674年：莱布尼茨改进了帕斯卡的计算机，使之成为一种能够进行连续运算的机器，并且提出了“二进制”数的概念。（据说这个概念来源于中国的八卦） 此后发展了两百多年于 1895年： 英国青年工程师弗莱明（J.Fleming）通过“爱迪生效应”发明了人类第一只电子管。 从此进入电子管时代 1943年：10月，绰号为“巨人”的用来破译德军密码的计算机在英国布雷契莱庄园制造成功，此后又制造多台，为第二次世界大战的胜利立下了汗马功劳。  2.计算机的工作原理  计算机通过识别0101的二进制数值进行工作  3.计算机的硬件组成  控制器 （控制计算机各部分的运行，下达指令） 运算器 （进行逻辑运算，判断对错） 储存器 (数据的短期长期储存) 输入设备 (键盘鼠标等人机交互设备) 输出设备(显示器，扬声器等)  4.计算机三大核心硬件  CPU	中央运算处理器 (计算机的大脑，集成了控制器运算器，以及最新的AR模块和集成显卡） 内存	与cpu直接进行沟通，进行数据吞吐，读写速度快，但是断电后会清空所有数据 硬盘	负责数据的长期的储存，虽然读写速度想对慢的多，但是理论情况下可以实现对数据的完整保 存  5.操作系统   windows 、MacOS 、Linux、ubuntu
操作系统就是充当人与计算机之间沟通的桥梁，因为计算机只认识01二进制数值，返回的	数值也生涩僵硬难懂，操作系统可以高效率的将指令传达给计算机，并且返回的指令进行	可视化处理，人类看起来更加方便，易懂。
  6.三层架构  应用程序	我们所使用的所有软件即是应用程序层面的，侧重与用户的使用体验 操作系统	基于底层架构起来的系统，也属于应用层序，不过侧重于与计算的交互 计算机硬件	即计算机本身的实体化部分，CPU内存等，随着迭代，性能不断增强  7.编程语言  人和计算机沟通的语言，把人类的语言编写成计算机可以听懂看懂的语言，已达到为计算机下达工作指令的目的  8.编程  将编程语言编写下来的过程就是编程  9.编程语言的发展史  机器语言	计算机的原生语言，0101的二进制字符 晦涩难懂，难学难用 汇编语言	使用特定的英文字母代替二进制字符，语言进化迭代的产物 高级语言	使用人类的语言单词，简单易懂，目前的主流语言python，Java，C++等  10.</description>
    </item>
    
    <item>
      <title>Eddy&#39;s Boke</title>
      <link>https://Eddy-622.github.io/posts/eddys-boke/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/eddys-boke/</guid>
      <description>这是我创建的第一个个人网站
刚刚开始摸索其中的乐趣
做的的不好的地方以后会尽量优化
今天也是充满希望的一天Fighting！打工人
当然我知道这个网站是没有几个人会看的~</description>
    </item>
    
  </channel>
</rss>