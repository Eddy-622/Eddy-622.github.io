<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eddy&#39;s Boke</title>
    <link>https://Eddy-622.github.io/</link>
    <description>Recent content on Eddy&#39;s Boke</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 30 Oct 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://Eddy-622.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据仓库与回归模型认识</title>
      <link>https://Eddy-622.github.io/posts/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B%E8%AE%A4%E8%AF%86/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E4%B8%8E%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B%E8%AE%A4%E8%AF%86/</guid>
      <description>今日内容概要  数据仓库 一元线性回归模型理论 python代码实现 多元线性回归模型理论 python代码实现 岭回归模型理论 python代码实现  今日内容详细 数据仓库 数据仓库的诞生主要有两个原因：历史数据的积存需要企业数据分析的需要热数据:使用频率较高的数据冷数据:使用频率较低的数据数仓特点 1.面向主题针对不同的业务分析需求，可能需要多张表联表分组聚合查询2.集成将不同数据源的数据，进行标准化，整合成统一的数据规范，便于之后进行分析运算(统一单位)3.非易失不允许数据修改，只能通过工具对数据进行查询、分析4.时变性定期去接受、集成新的数据进来，保证与业务数据库数据一致但是数仓又不允许修改，所以以时间戳标记版本，老旧的数据可以选择定期删除或保留数据仓库与数据库的区别 # 数据库设计遵循设计范式、数据仓库则不遵循设计范式数据库是面向事务设计的，它属于 OLTP（在线事务处理）系统，为业务提供数据存储服务，主要操作是随机读写；在设计时尽量避免冗余，常采用符合规范来设计。数据仓库是面向主题设计的，属于 OLAP（在线分析处理）系统，主要操作是批量读写；关注数据整合，以及分析、处理性能；会有意引入冗余，采用反范式方式设计。参考截图即可地址:https://www.cnblogs.com/Dominic-Ji/articles/13796364.html密码:jason666 架构设计 # MPP架构是传统数据仓库中常见的技术架构，将单机数据库节点组成集群，从而提升处理性能集群中，这些节点间使用非共享架构，每个节点拥有独立的磁盘存储和内存系统，在计算过程中独立运行，而不必去关心整个集群的状态，也不关心其他节点存储的数据信息每台数据节点通过专用网络或者商业通用网络互相连接优点:MPP 数据库更适合中等规模的结构化数据处理，性能上有很好的体现缺点:随着集群规模的增大，节点的故障率会逐渐升高，瓶颈就会越发明显	# 分布式架构分布式架构是大数据中常见的技术架构，也称为 Hadoop 架构/批处理架构优点:数据在集群中是全局透明共享的，每个节点拥有自治的运算资源因为使用了公共的数据存储，所以它的扩展性极强，而且非常适合处理非结构化、半结构化数据缺点:在数据量较低的情况下，运行速度远不及 MPP 架构；但数据量一旦超过某个量级，吞吐量的优势会极大的发挥出来。# MPP + 分布式架构数据存储层采用分布式架构中的公共存储，提升了分区容错性，也将 MPP 的扩展性得到了质的提升。上层处理架构依然采用 MPP，减少运算的延迟# 总结MPP 架构和分布式架构的适用场景不同。MPP 适合中等规模的数据处理，延迟低、SQL 支持高是它主要的优势；分布式（批处理）架构更适合海量数据规模的批处理计算，吞吐高、运算速度快、扩展性强是它的优势，而这也是离线批处理数仓所看重的。MPP + 分布式架构集成了两者的优势，扩展性强、延迟低、SQL 支持率高，实际上是两者间取了个折中，能够在海量数据规模下依然具有较好的低延迟特性。这些架构并没有好坏之分，对于不同的场景只有适合和不适合之分。如果使用分布式架构的数据仓库对较少的数据量进行交互式的 SQL 查询，需要 5 分钟，但使用传统数仓只需要 1 秒；那不是产品的问题，而是用错的场景而已。数据仓库技术实现 传统数据仓库(MPP)优点1.</description>
    </item>
    
    <item>
      <title>Linux之大数据应用</title>
      <link>https://Eddy-622.github.io/posts/linux%E4%B9%8B%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/linux%E4%B9%8B%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BA%94%E7%94%A8/</guid>
      <description>本周内容概要 大数据之Hadoop(了解并掌握基本操作即可)
 重要理论 hadoop实操  大数据之数据仓库(简单了解基本原理即可)
今日内容详细 大数据的概念 指⽆法在⼀定时间范围内⽤常规软件⼯具进⾏捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策⼒、洞察发现⼒和流程优化能⼒的海量、⾼增⻓率和多样化的信息资产1.海量(数据量特别大)2.⾼增⻓率(较小的时间内涌入大量数据)3.多样化(数据种类很多)大数据的目的 主要解决，海量数据的存储和海量数据的分析计算问题。1.海量数据存储2.海量数据分析计算重要的单位换算 8bit = 1bytes1024bytes = 1KB1024KB = 1MB1024MB = 1GB1024GB = 1TB1024TB = 1PB1024PB = 1EB数据量至少要达到PB级别才能够称之为是大数据大数据的特点 Volume(⼤量)Velocity(⾼速)Variety(多样)Value(低价值密度)大数据的用途 物流仓储零售旅游商品⼴告推荐保险金融房地产人工智能...诸多领域Hadoop简介 主要解决，海量数据的存储和海量数据的分析计算问题(即针对大数据应运而生)从狭义上看Hadoop可以是一个数据库软件从广义上看Hadoop是一个生态圈(包含了很多软件)Hadoop发展史 1.Hadoop是基于Google的三篇论文开发的2.2006年Hadoop正式诞生3.作者是Doug Cutting，软件图标是一个玩具大象Hadoop版本 Hadoop 三⼤发⾏版本Apache、Cloudera、Hortonworks Apache 版本最原始（最基础）的版本，对于⼊⻔学习最好Cloudera 在⼤型互联⽹企业中⽤的较多Hortonworks ⽂档较好官⽹地址：http://hadoop.</description>
    </item>
    
    <item>
      <title>Matplotlib之多表绘制</title>
      <link>https://Eddy-622.github.io/posts/matplotlib%E4%B9%8B%E5%A4%9A%E8%A1%A8%E7%BB%98%E5%88%B6/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/matplotlib%E4%B9%8B%E5%A4%9A%E8%A1%A8%E7%BB%98%E5%88%B6/</guid>
      <description>箱线图
可以反映出很多特征量上下须值四分之一、三位数中位数平均值等并且还可以非常直观的识别出数据中的异常值代码你可以不记忆，但是最起码也要自己手动敲个两三遍熟悉过程  折线图
最常用于跟时间序列相关的数据统计x轴是时间y轴是随时间变化的量# 单条折线图 eg:公司历年(月)业绩# 多条折线图 eg:员工绩效考核(设定的业绩与实际业绩关系)  散点图
主要是用来寻找两个变量之间是否有线性关系(正相关、负相关)  气泡图
其实就是散点图的演变将点的大小根据第三个变量的不同设置成不同的大小eg:x轴时间y轴人口数气泡大小国家面积  热力图
研究变量之间的组合关系(交叉填充表)热力图我们使用的是seaborn模块来绘制参考资料:http://seaborn.pydata.org/tutorial/axis_grids.html  昨日表处理重点
数据透视表制作(热力图知识点)日期字段的拆分(热力图知识点)  今日内容概要   组合图形的绘制
  数据清洗理论
  数据清洗案例
  操作excel表格的python模块(openpyxl)
  MongoDB数据库
数据库只有两大类关系型MySQL(必会)非关系型MongoDB每一类学一个，就可以做到之后所有的数据库都能够非常快速的上手  今日内容详细 组合图形的绘制 # 读取数据 Prod_Trade = pd.</description>
    </item>
    
    <item>
      <title>Matplotlib之箱线图、折线图、散点图、热力图</title>
      <link>https://Eddy-622.github.io/posts/matplotlib%E4%B9%8B%E7%AE%B1%E7%BA%BF%E5%9B%BE%E6%8A%98%E7%BA%BF%E5%9B%BE%E6%95%A3%E7%82%B9%E5%9B%BE%E7%83%AD%E5%8A%9B%E5%9B%BE/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/matplotlib%E4%B9%8B%E7%AE%B1%E7%BA%BF%E5%9B%BE%E6%8A%98%E7%BA%BF%E5%9B%BE%E6%95%A3%E7%82%B9%E5%9B%BE%E7%83%AD%E5%8A%9B%E5%9B%BE/</guid>
      <description>今日内容概要  箱线图 折线图 散点图 气泡图 热力图 组合图(掌握)  今日内容详细 箱线图 箱线图是另一种体现数据分布的图形，通过该图可以得知数据的下须值(Q1-1.5IQR)、下四分位数(Q1)、中位数(Q2)、均值、上四分位(Q3)数和上须值(Q3+1.5IQR)，更重要的是，箱线图还可以发现数据中的异常点;plt.boxplot(x, vert=None, whis=None, patch_artist=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None)x:指定要绘制箱线图的数据 vert:是否需要将箱线图垂直摆放，默认垂直摆放whis:指定上下须与上下四分位的距离，默认为1.5倍的四分位差 patch_artist:bool类型参数，是否填充箱体的颜色;默认为False meanline:bool类型参数，是否用线的形式表示均值，默认为False showmeans:bool类型参数，是否显示均值，默认为False showcaps:bool类型参数，是否显示箱线图顶端和末端的两条线(即上下须)，默认为True showbox:bool类型参数，是否显示箱线图的箱体，默认为Trueshowfliers:是否显示异常值，默认为True boxprops:设置箱体的属性，如边框色，填充色等labels:为箱线图添加标签，类似于图例的作用 filerprops:设置异常值的属性，如异常点的形状、大小、填充色等 medianprops:设置中位数的属性，如线的类型、粗细等 meanprops:设置均值的属性，如点的大小、颜色等 capprops:设置箱线图顶端和末端线条的属性，如颜色、粗细等 whiskerprops:设置须的属性，如颜色、粗细、线的类型等Sec_Buildings = pd.read_excel(&#39;sec_buildings.xlsx&#39;)# 绘制箱线图plt.boxplot(x = Sec_Buildings.price_unit, # 指定绘图数据patch_artist=True, # 要求用自定义颜色填充盒形图，默认白色填充showmeans=True, # 以点的形式显示均值boxprops = {&#39;color&#39;:&#39;black&#39;,&#39;facecolor&#39;:&#39;steelblue&#39;},# 设置箱体属性，如边框色和填充色# 设置异常点属性，如点的形状、填充色和点的大小flierprops = {&#39;marker&#39;:&#39;o&#39;,&#39;markerfacecolor&#39;:&#39;red&#39;, &#39;markersize&#39;:3,&#39;markeredgecolor&#39;:&#39;red&#39;}, # 设置均值点的属性，如点的形状、填充色和点的大小meanprops = {&#39;marker&#39;:&#39;D&#39;,&#39;markerfacecolor&#39;:&#39;indianred&#39;, &#39;markersize&#39;:4}, # 设置中位数线的属性，如线的类型和颜色medianprops = {&#39;linestyle&#39;:&#39;--&#39;,&#39;color&#39;:&#39;orange&#39;}, labels = [&#39;&#39;] # 删除x轴的刻度标签，否则图形显示刻度标签为1)# 添加图形标题plt.</description>
    </item>
    
    <item>
      <title>Matplotlib之饼图、条形图、直方图</title>
      <link>https://Eddy-622.github.io/posts/matplotlib%E4%B9%8B%E9%A5%BC%E5%9B%BE%E6%9D%A1%E5%BD%A2%E5%9B%BE%E7%9B%B4%E6%96%B9%E5%9B%BE/</link>
      <pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/matplotlib%E4%B9%8B%E9%A5%BC%E5%9B%BE%E6%9D%A1%E5%BD%A2%E5%9B%BE%E7%9B%B4%E6%96%B9%E5%9B%BE/</guid>
      <description>今日内容 数据可视化 大白话其实就是画图画图的工具有很多我们先学习一个用python代码画图的方式之后我们还会学习画图软件Teableau、PowerBI可视化模块 matplotlib# 数据分析三剑客之一numpypandasmatplotlib是一个强大的python绘图和数据可视化工具包，数据可视化也是我们数据分析重要环节之一，可以帮助我们分析出很多价值信息，也是数据分析的最后一个可视化阶段# 下载模块python开发环境pip3 install matplotlibconda环境conda install matplotlib# 在notebook环境下直接执行下载命令需要在前面加一个感叹号# 在anaconda提供的环境下数据分析相关的模块都已经提前下载好了# 基本使用(也需要起别名)import numpy as npimport pandas as pdimport matplotlib.pyplot as plt&#39;&#39;&#39;以后在使用notebook环境的时候，可以直接先将上面的三个模块全部导入&#39;&#39;&#39;基本使用 &amp;#34;&amp;#34;&amp;#34;一定要知道每个图形擅长领域并且尽量记忆图形的大致轮廓&amp;#34;&amp;#34;&amp;#34;# 如果想让你绘制的图形弹窗展示 %matplotlib # 执行一遍之后删除即可 饼图的绘制 饼图属于最传统的统计图形之一，几乎随处可见，例如大型公司的屏幕墙、各种年度论坛的演示稿以及各大媒体发布的数据统计报告等;饼图是将一个圆分割成不同大小的楔(扇)形，而圆中的每一个楔形代表了不同的类别值，通常根据楔形的面积大小来判断类别值的差异;pie(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, labeldistance=1.1)x:指定绘图的数据 explode:指定饼图某些部分的突出显示，即呈现爆炸式labels:为饼图添加标签说明，类似于图例说明 colors:指定饼图的填充色 autopct:自动添加百分比显示，可以采用格式化的方法显示 pctdistance:设置百分比标签与圆心的距离 labeldistance:设置各扇形标签(图例)与圆心的距离# 导入第三方模块import matplotlib.</description>
    </item>
    
    <item>
      <title>数据分析之数据处理、筛选、分组、聚合</title>
      <link>https://Eddy-622.github.io/posts/pandas%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AD%9B%E9%80%89%E5%88%86%E7%BB%84%E8%81%9A%E5%90%88/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/pandas%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%AD%9B%E9%80%89%E5%88%86%E7%BB%84%E8%81%9A%E5%90%88/</guid>
      <description>数据概览 df = pd.read_csv(r&amp;#39;sec_cars.csv&amp;#39;)# 1.查看表格的前N条数据 df.head(5) # 不写默认也是五条 # 2.查看表格的后N条数据 df.tail(5) # 不写默认也是五条 # 3.查看表的行列 df.shape # 结果是一个元组(行数,列数) # 4.获取表中所有的列名称 df.columns# 5.获取表中所有的行索引 df.index# 6.查看数据的数据类型 df.dtypes # 在处理数据之前应该用该方法查看一下数据类型 # 7.快速统计 df.describe() # 默认只会统计数字类型的数据 df.describe(include=&amp;#39;object&amp;#39;) # 可以通过include参数指定统计的数据类型 df.describe(include=&amp;#39;all&amp;#39;) 行列操作 df1 = pd.read_excel(r&amp;#39;data_test02.xlsx&amp;#39;,header=None)# 1.修改列名称 df1.rename(columns={0:&amp;#39;序号&amp;#39;})df1.rename(columns={0:&amp;#39;序号&amp;#39;,1:&amp;#39;类型&amp;#39;,2:&amp;#39;颜色&amp;#39;,3:&amp;#39;尺码&amp;#39;},inplace=True)# &amp;#39;&amp;#39;&amp;#39; # # 能修改 但是会报个错误 可以添加下列配置 # pd.</description>
    </item>
    
    <item>
      <title>数据分析之Numpy基础使用</title>
      <link>https://Eddy-622.github.io/posts/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bnumpy%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8Bnumpy%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</guid>
      <description>今日内容概要  常用方法 常用方式 索引与切片 运算符 函数 随机数模块 赌场输赢案例(输赢概率五五开)  今日内容详细 补充 1.我们尽量做到将所有导入模块的语句写在文件的最上方(开头)
ps:我们可以先直接书写代码，写完之后将所有导入模块的语句全部整理到文件开头
2.在notebook环境下左侧In里面 如果是*号表示正在运行 如果是数字表示已经运行完毕
3.在执行完单元格之后 1.如果没有任何的返回结果 说明改变的是源数据 2.如果有返回结果 说明没有改变源数据,而是产生了新的结果
4.数组的特点 1.数组内所有的元素肯定是相同的数据类型 2.数组的大小无法修改 3.数组的数学运算默认都是挨个元素挨个元素逐一运算
a = array([1,2,3])a + 1 array([1+1,2+1,3+1])​ 4.数组之间做运算一定要确保彼此之间列相同
​ 5.如何查看方法的内部注释 ​
1.shift(先按) + tab(再多按几下)2.在方法的后面加?执行6.其实我们的日常生活中包括将来我们工作之后 操作浮点型的概率都是较高的 所以numpy里面默认也都是浮点型
常用方法 T 数组的转置（对高维数组而言）
li1 = [[1,2,3],[4,5,6]] a = np.array(li1) 二维数组(两行三列) a.T 转置(三行两列)dtype 数组元素的数据类型
a.dtypesize 数组元素的个数（常用）
a.sizendim 数组的维数
ar1 = np.</description>
    </item>
    
    <item>
      <title>数据分析之环境配置</title>
      <link>https://Eddy-622.github.io/posts/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%B9%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>今日内容概要  notebook的基本使用 anaconda软件下载 anaconda功能介绍 notebook快捷键操作 数据分析三大模块学习  今日内容详细 notebook的基本使用 下拉框点击python3会创建一个notebook文件
  该文件的特点 1.开发环境是基于ipython模块 2.该文件具有非常易识别的后缀名.ipynb
​ 也就意味着以后遇到该文件只能用notebook环境打开 ​ 如果你收到了后缀名是ipynb的文件应该如何正确的打开呢？ ​ 点击右上方upload按钮，将ipynb文件上传到jupyter内 ​ 即可使用notebook正常打开了
  anaconda软件介绍   虽然我们的jupyter模块已经能够给我们提供python数据分析的notebook环境，但是在数据分析过程中需要使用到大量的第三方模块(200多个)，如果仅仅基于jupyter模块那么需要我们手动下载的模块太多了
  anaconda软件内部也是提供了jupyter模块，不同的是它自动帮你下载了跟数据分析相关的200多个包(也就意味着你自己不需要下载直接可以使用) 并且anaconda内部还提供了其他的数据分析环境和一系列学习文档
  anaconda软件下载  如果你想让anaconda能够正常的呼起你的默认浏览器 一定要确保你的计算机名称中不能含有中文  下载地址:https://www.anaconda.com/products/individual download-section点击下载选择对应的系统，下载的文件是一个.exe结尾的启动文件下载完成后直接双击启动即可(按照提示一步步的点击next即可) 注意该软件下载完毕之后是不能在桌面上展示出来的，第一次启动需要你打开搜索输入anaconda 点击弹出来的anaconda navigator 等待启动完成之后右键任务栏图标把它固定到开始屏幕或者任务栏中 之后就可以鼠标双击启动  anaconda软件介绍  home主页 anaconda给我们提供的很多数据分析相关的开发环境 显示为launch的就是直接可以启动运行使用的 显示为install就是需要额外下载才可以使用的 但是我们目前只需要使用jupyter即可 Envirnments环境 anaconda提前给你准备的数据分析相关的第三方模块(200多个) learning学习环境 给你提供了很多官方权威的学习文档(有空的时候多看看) community社区环境 学习交流平台  主要功能学习 专业名词介绍
cells 单元格(当前正在被编辑的代码区)copy	拷贝paste	粘贴above	在.</description>
    </item>
    
    <item>
      <title>爬虫实例、爬取思路、数据分析简介</title>
      <link>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B%E7%88%AC%E5%8F%96%E6%80%9D%E8%B7%AF%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E5%AE%9E%E4%BE%8B%E7%88%AC%E5%8F%96%E6%80%9D%E8%B7%AF%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%AE%80%E4%BB%8B/</guid>
      <description>今日内容概要  知乎登录破解思路 红薯网小说爬取思路 爬虫框架之Scrapy安装 ipython模块 jupyter模块 anaconda数据分析软件  今日内容详细 知乎登录破解思路   网站手段 我们惯有的思路是登录成功之后网站返回给我们的cookie就是身份标识 但是有一些网站并不是这么做的 当你第一次不登陆情况下访问网站的时候，就已经偷偷给了一个cookie但是这个cookie是没有激活的状态 当你登录之后网站又会在之前的基础之上再给你一个cookie，我们会习惯性的人为第二次给的cookie才是有效的，其实不然 其实第二次给你的是个烟雾弹，真正起作用的恰巧是第一个(登录成功之后会将第一个给你的cookie激活)
1.访问登录首页查看cookie数据
 _xsrf	90d14e60-77f3-43b1-9ad0-f836a97cc631_zap	2afce640-f9c2-48dd-973a-e92c235f36382.点击用户名密码登录
有时候需要输入图片验证码有时候不需要这个其实就是由内部的https://www.zhihu.com/api/v3/oauth/captcha?lang=cn3.验证码中文英文
 lang=cn 中文汉字lang=en	英文数字4.提交post请求数据全部是加密过的 需要去js文件中查找到加密的算法 每个文件里面搜索关键字encrypt 查找到加密之前的字符串但是里面还是有url加密 需要使用python的模块继续解密
 from urllib.parse import unquote_plusclient_id 用户id(固定值)grant_type 验证方式(固定值)timestamp 时间戳*1000,去尾source	(固定值)signature	签名(js加密,变动)username	用户名password	密码captcha	验证码lang	验证码方式(固定值)utm_source	(固定值)ref_source	(固定值)other_https://www.zhihu.com/signin?next=%2F5.signature也是js加密的需要破解
 hmac加密sha1加密将上述推导步骤 熟悉一下即可</description>
    </item>
    
    <item>
      <title>爬虫之selenium模块、实例</title>
      <link>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E4%B9%8Bselenium%E6%A8%A1%E5%9D%97%E5%AE%9E%E4%BE%8B/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Eddy-622.github.io/posts/%E7%88%AC%E8%99%AB%E4%B9%8Bselenium%E6%A8%A1%E5%9D%97%E5%AE%9E%E4%BE%8B/</guid>
      <description>今日内容概要  selenium模块 爬取京东商品信息 研究知乎防爬策略 研究小说爬取思路 Scrapy框架了解 MongoDB数据库(非关系型数据库)  今日内容详细 selenium模块   通过id查找标签
from selenium import webdriverimport timebro=webdriver.Chrome()bro.get(&amp;#34;http://www.baidu.com&amp;#34;)bro.implicitly_wait(10)inEle = bro.find_element_by_id(&amp;#39;kw&amp;#39;)往标签内写内容
inEle.send_keys(&amp;#39;美女&amp;#39;)通过a标签内部的文本查找a标签
aEle = bro.find_element_by_link_text(&amp;#39;登录&amp;#39;)点击a标签
aEle.click()如果你不知道具体文本内容 或者想模糊查询
find_element_by_partial_link_text查找div标签
divEle = bro.find_element_by_tag_name(&amp;#39;div&amp;#39;)获取内部所有的文本信息
print(divEle.text) 查看含有class属性值:
s-top-right-text c-font-normal c-color-tspEle = bro.find_element_by_class_name(&amp;#39;s-top-right-text&amp;#39;)print(spEle.text)css选择器
pEle = bro.find_element_by_css_selector(&amp;#39;#kw&amp;#39;)pEle.click()  自动登录 from selenium import webdriverimport timebro=webdriver.Chrome()bro.get(&amp;#34;http://www.baidu.com&amp;#34;)bro.implicitly_wait(10)  找到登录按钮</description>
    </item>
    
  </channel>
</rss>